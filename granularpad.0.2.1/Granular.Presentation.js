/**
 * @version 0.2.1.0
 * @copyright Copyright â˜º 2016
 * @compiler Bridge.NET 15.7.0
 */
Bridge.assembly("Granular.Presentation", function ($asm, globals) {
    "use strict";

    Bridge.define("System.Windows.Markup.IUriContext", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IResourceContainer", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.ApplicationHost", {
        statics: {
            current: null,
            getCurrent: function () {
                if (System.Windows.ApplicationHost.current == null) {
                    System.Windows.ApplicationHost.initialize$1();
                }

                return System.Windows.ApplicationHost.current;
            },
            initialize$1: function () {
                if (System.Windows.ApplicationHost.current != null) {
                    return;
                }

                var type = System.Windows.ApplicationHost.getApplicationHostTypeByAttribute() || System.Windows.ApplicationHost.getApplicationHostTypeByReference();

                if (type == null) {
                    throw new Granular.Exception("Can't find an explicit ApplicationHost assembly attribute or an implicit IApplicationHost implementation in the loaded assemblies");
                }

                System.Windows.ApplicationHost.initialize(Bridge.cast(Bridge.createInstance(type), System.Windows.IApplicationHost));
            },
            initialize: function (applicationHost) {
                if (System.Windows.ApplicationHost.current != null && !Bridge.referenceEquals(System.Windows.ApplicationHost.current, applicationHost)) {
                    throw new Granular.Exception("ApplicationHost was already initialized");
                }

                System.Windows.ApplicationHost.current = applicationHost;
            },
            getApplicationHostTypeByAttribute: function () {
                var $t;
                var applicationHostAttributes = System.Linq.Enumerable.from(Object.keys(System.Reflection.Assembly.assemblies).map(function(n) { return System.Reflection.Assembly.assemblies[n]; })).selectMany($asm.$.System.Windows.ApplicationHost.f1).toArray();

                if (applicationHostAttributes.length > 1) {
                    throw new Granular.Exception("Multiple ApplicationHost assembly attributes were found, leave only one attribute or call ApplicationHost.Initialize() at the application entry point.");
                }

                return ($t = System.Linq.Enumerable.from(applicationHostAttributes).firstOrDefault(null, null)) != null ? $t.getType() : null;
            },
            getApplicationHostTypeByReference: function () {
                var types = System.Linq.Enumerable.from(Object.keys(System.Reflection.Assembly.assemblies).map(function(n) { return System.Reflection.Assembly.assemblies[n]; })).selectMany($asm.$.System.Windows.ApplicationHost.f2).where($asm.$.System.Windows.ApplicationHost.f3).toArray();

                if (System.Linq.Enumerable.from(types).count() > 1) {
                    throw new Granular.Exception("Multiple types that are implementing IApplicationHost are loaded, use ApplicationHost assembly attribute or call ApplicationHost.Initialize() at the application entry point. Types found: {0}", [Bridge.toArray(System.Linq.Enumerable.from(types).select($asm.$.System.Windows.ApplicationHost.f4)).join(", ")]);
                }

                return System.Linq.Enumerable.from(types).firstOrDefault(null, null);
            }
        }
    });

    Bridge.ns("System.Windows.ApplicationHost", $asm.$);

    Bridge.apply($asm.$.System.Windows.ApplicationHost, {
        f1: function (assembly) {
            return Granular.Extensions.AssemblyExtensions.getCustomAttributesCached(System.Windows.ApplicationHostAttribute, assembly);
        },
        f2: function (assembly) {
            return Bridge.Reflection.getAssemblyTypes(assembly);
        },
        f3: function (type) {
            return Bridge.Reflection.isClass(type) && Bridge.Reflection.isAssignableFrom(System.Windows.IApplicationHost, type);
        },
        f4: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.ApplicationHostAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                Type: null
            }
        },
        ctor: function (type) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setType(type);
        }
    });

    Bridge.define("System.Windows.ApplicationHostExtensions", {
        statics: {
            getMouseDeviceFromElement: function (applicationHost, element) {
                var presentationSource = applicationHost.System$Windows$IApplicationHost$getPresentationSourceFactory().System$Windows$IPresentationSourceFactory$getPresentationSourceFromElement(element);
                return presentationSource != null ? presentationSource.System$Windows$IPresentationSource$getMouseDevice() : null;
            },
            getKeyboardDeviceFromElement: function (applicationHost, element) {
                var presentationSource = applicationHost.System$Windows$IApplicationHost$getPresentationSourceFactory().System$Windows$IPresentationSourceFactory$getPresentationSourceFromElement(element);
                return presentationSource != null ? presentationSource.System$Windows$IPresentationSource$getKeyboardDevice() : null;
            }
        }
    });

    Bridge.define("System.Windows.BaseValueSource", {
        $kind: "enum",
        statics: {
            Unknown: 0,
            Default: 1,
            Inherited: 2,
            ThemeStyle: 3,
            ThemeStyleTrigger: 4,
            Style: 5,
            TemplateTrigger: 6,
            StyleTrigger: 7,
            ImplicitReference: 8,
            ParentTemplate: 9,
            ParentTemplateTrigger: 10,
            Local: 11
        }
    });

    Bridge.define("System.Windows.Markup.IMarkupExtension", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IResourceKey", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Condition", {
        config: {
            properties: {
                Binding: null,
                Property: null,
                SourceName: null,
                Value: null
            }
        },
        createTriggerCondition: function (element) {
            if (this.getProperty() == null) {
                throw new Granular.Exception("Condition.Property cannot be null");
            }

            var dependencyProperty = System.Windows.PropertyPathElementExtensions.getDependencyProperty(this.getProperty(), Bridge.getType(element));

            var resolvedValue = this.getValue() == null || Bridge.Reflection.isInstanceOfType(this.getValue(), dependencyProperty.getPropertyType()) ? this.getValue() : System.Windows.Markup.TypeConverter.convertValue(this.getValue().toString(), dependencyProperty.getPropertyType(), System.Windows.Markup.XamlNamespaces.empty, null);

            var source = Granular.Extensions.StringExtensions.isNullOrEmpty(this.getSourceName()) ? element : Bridge.as(System.Windows.NameScope.getTemplateNameScope(element).System$Windows$INameScope$findName(this.getSourceName()), System.Windows.FrameworkElement);

            return System.Windows.TriggerCondition.register(source, dependencyProperty, resolvedValue);
        },
        createDataTriggerCondition: function (element) {
            if (this.getBinding() == null) {
                throw new Granular.Exception("Condition.Binding cannot be null");
            }

            return System.Windows.DataTriggerCondition.register(element, this.getBinding(), this.getValue());
        }
    });

    Bridge.define("System.Windows.DependencyObject", {
        statics: {
            verifyReadOnlyProperty: function (dependencyProperty, dependencyPropertyKey) {
                if (dependencyProperty.getIsReadOnly() && (dependencyPropertyKey == null || !Bridge.referenceEquals(dependencyPropertyKey.getDependencyProperty(), dependencyProperty) || !System.Windows.DependencyProperty.isValidReadOnlyKey(dependencyPropertyKey))) {
                    throw new Granular.Exception("Can't modify the readonly dependency property \"{0}\" without its key", [dependencyProperty]);
                }
            }
        },
        entries: null,
        readOnlyEntries: null,
        inheritanceParent: null,
        entryValueChangedEventHandler: null,
        containedEntryValueChangedEventHandler: null,
        parentPropertyChangedEventHandler: null,
        config: {
            events: {
                PropertyChanged: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.entries = new (Granular.Collections.ConvertedStringDictionary$2(System.Windows.DependencyProperty,System.Windows.IDependencyPropertyValueEntry))($asm.$.System.Windows.DependencyObject.f1);
            this.readOnlyEntries = new (Granular.Collections.ConvertedStringDictionary$2(System.Windows.DependencyProperty,System.Windows.IDependencyPropertyValueEntry))($asm.$.System.Windows.DependencyObject.f1);

            this.entryValueChangedEventHandler = Bridge.fn.cacheBind(this, this.onEntryValueChanged);
            this.containedEntryValueChangedEventHandler = Bridge.fn.cacheBind(this, this.onContainedEntryValueChanged);
            this.parentPropertyChangedEventHandler = Bridge.fn.cacheBind(this, this.onParentPropertyChanged);
        },
        containsValue: function (dependencyProperty) {
            var entry = { };
            if (!this.entries.tryGetValue(dependencyProperty, entry)) {
                return false;
            }

            return entry.v.System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority() > System.Windows.BaseValueSource.Inherited;
        },
        containsValue$1: function (dependencyPropertyKey) {
            return this.containsValue(dependencyPropertyKey.getDependencyProperty());
        },
        getValue: function (dependencyProperty) {
            var entry = { };
            if (!this.entries.tryGetValue(dependencyProperty, entry)) {
                var propertyMetadata = dependencyProperty.getMetadata(Bridge.getType(this));

                // no need to create a new entry if the value is not inherited or coerced
                if (!propertyMetadata.getInherits() && (Bridge.staticEquals(propertyMetadata.getCoerceValueCallback(), null) || !dependencyProperty.getIsAttached() && !dependencyProperty.isContainedBy(Bridge.getType(this)))) {
                    return propertyMetadata.getDefaultValue();
                }

                entry.v = this.createDependencyPropertyValueEntry(dependencyProperty, propertyMetadata);
                this.entries.add(dependencyProperty, entry.v);
            }

            return entry.v.System$Windows$IDependencyPropertyValueEntry$getValue();
        },
        getValue$1: function (dependencyPropertyKey) {
            return this.getValue(dependencyPropertyKey.getDependencyProperty());
        },
        setValue: function (dependencyProperty, value, source) {
            if (source === void 0) { source = 11; }
            this.setValue$2(dependencyProperty, null, value, false, source);
        },
        setValue$1: function (dependencyPropertyKey, value, source) {
            if (source === void 0) { source = 11; }
            this.setValue$2(dependencyPropertyKey.getDependencyProperty(), dependencyPropertyKey, value, false, source);
        },
        setValue$2: function (dependencyProperty, dependencyPropertyKey, value, setCurrentValue, source) {
            if (setCurrentValue === void 0) { setCurrentValue = false; }
            if (source === void 0) { source = 0; }
            System.Windows.DependencyObject.verifyReadOnlyProperty(dependencyProperty, dependencyPropertyKey);

            var newExpressionProvider = Bridge.as(value, System.Windows.IExpressionProvider);
            if (newExpressionProvider == null && !dependencyProperty.isValidValue(value)) {
                return; // invalid value
            }

            var entry = this.getInitializedValueEntry(dependencyProperty);

            var oldExpression = setCurrentValue ? Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue(entry, false), System.Windows.IExpression) : Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue$1(entry, source, false), System.Windows.IExpression);

            if (newExpressionProvider != null) {
                value = newExpressionProvider.System$Windows$IExpressionProvider$createExpression(this, dependencyProperty);
            } else if (oldExpression != null && oldExpression.System$Windows$IExpression$setValue(value)) {
                return; // value (current or not) was set in the existing expression, nothing else to do
            }

            if (setCurrentValue) {
                System.Windows.DependencyPropertyValueEntryExtensions.setCurrentValue(entry, value);
                return; // base value isn't changed
            }

            if (Bridge.is(oldExpression, System.IDisposable)) {
                Bridge.cast(oldExpression, System.IDisposable).System$IDisposable$dispose();
            }

            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(entry, source, value);
            System.Windows.DependencyPropertyValueEntryExtensions.clearCurrentValue(entry);
        },
        setCurrentValue: function (dependencyProperty, value) {
            this.setValue$2(dependencyProperty, null, value, true, 0);
        },
        setCurrentValue$1: function (dependencyPropertyKey, value) {
            this.setValue$2(dependencyPropertyKey.getDependencyProperty(), dependencyPropertyKey, value, true, 0);
        },
        clearValue: function (dependencyProperty, source) {
            if (source === void 0) { source = 11; }
            this.clearValue$2(dependencyProperty, null, source);
        },
        clearValue$1: function (dependencyPropertyKey, source) {
            if (source === void 0) { source = 11; }
            this.clearValue$2(dependencyPropertyKey.getDependencyProperty(), dependencyPropertyKey, source);
        },
        clearValue$2: function (dependencyProperty, dependencyPropertyKey, source) {
            System.Windows.DependencyObject.verifyReadOnlyProperty(dependencyProperty, dependencyPropertyKey);

            var entry = { };
            if (!this.entries.tryGetValue(dependencyProperty, entry)) {
                return;
            }

            var expression = Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue$1(entry.v, source, false), System.Windows.IExpression);
            if (Bridge.is(expression, System.IDisposable)) {
                Bridge.cast(expression, System.IDisposable).System$IDisposable$dispose();
            }

            System.Windows.DependencyPropertyValueEntryExtensions.clearBaseValue(entry.v, source);
            System.Windows.DependencyPropertyValueEntryExtensions.clearCurrentValue(entry.v);
        },
        coerceValue: function (dependencyProperty) {
            this.getInitializedValueEntry(dependencyProperty).System$Windows$IDependencyPropertyValueEntry$coerceValue();
        },
        getValueSource: function (dependencyProperty) {
            var entry = { };
            if (this.entries.tryGetValue(dependencyProperty, entry)) {
                return new System.Windows.ValueSource(entry.v.System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority(), Bridge.is(System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue(entry.v, false), System.Windows.IExpression) || Bridge.is(System.Windows.DependencyPropertyValueEntryExtensions.getCurrentValue(entry.v, false), System.Windows.IExpression), !Bridge.referenceEquals(System.Windows.DependencyPropertyValueEntryExtensions.getCurrentValue(entry.v, true), System.Windows.Data.ObservableValue.unsetValue), !Bridge.referenceEquals(System.Windows.DependencyPropertyValueEntryExtensions.getAnimationValue(entry.v, true), System.Windows.Data.ObservableValue.unsetValue), !Granular.Compatibility.EqualityComparer.default.equals2(entry.v.System$Windows$IDependencyPropertyValueEntry$getValue(), entry.v.System$Windows$IDependencyPropertyValueEntry$getValue$1(entry.v.System$Windows$IDependencyPropertyValueEntry$getValuePriority(), true)));
            }

            var propertyMetadata = dependencyProperty.getMetadata(Bridge.getType(this));
            var baseValueSource = propertyMetadata.getInherits() && this.inheritanceParent != null ? System.Windows.BaseValueSource.Inherited : System.Windows.BaseValueSource.Default;
            return new System.Windows.ValueSource(baseValueSource, false, false, false, false);
        },
        getBaseValueSource: function (dependencyProperty) {
            var entry = { };

            if (this.entries.tryGetValue(dependencyProperty, entry)) {
                return entry.v.System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority();
            }

            return dependencyProperty.getInherits() && this.inheritanceParent != null ? System.Windows.BaseValueSource.Inherited : System.Windows.BaseValueSource.Default;
        },
        getValueEntry: function (dependencyProperty) {
            return dependencyProperty.getIsReadOnly() ? this.getInitializedReadOnlyValueEntry(dependencyProperty) : this.getInitializedValueEntry(dependencyProperty);
        },
        getValueEntry$1: function (dependencyPropertyKey) {
            System.Windows.DependencyObject.verifyReadOnlyProperty(dependencyPropertyKey.getDependencyProperty(), dependencyPropertyKey);
            return this.getInitializedValueEntry(dependencyPropertyKey.getDependencyProperty());
        },
        getInitializedValueEntry: function (dependencyProperty) {
            var entry = { };
            if (!this.entries.tryGetValue(dependencyProperty, entry)) {
                entry.v = this.createDependencyPropertyValueEntry(dependencyProperty, dependencyProperty.getMetadata(Bridge.getType(this)));
                this.entries.add(dependencyProperty, entry.v);
            }

            return entry.v;
        },
        getInitializedReadOnlyValueEntry: function (dependencyProperty) {
            var readOnlyEntry = { };

            if (this.readOnlyEntries.tryGetValue(dependencyProperty, readOnlyEntry)) {
                return readOnlyEntry.v;
            }

            readOnlyEntry.v = new System.Windows.ReadOnlyDependencyPropertyValueEntry(this.getInitializedValueEntry(dependencyProperty));
            this.readOnlyEntries.add(dependencyProperty, readOnlyEntry.v);

            return readOnlyEntry.v;
        },
        createDependencyPropertyValueEntry: function (dependencyProperty, propertyMetadata) {
            var isContained = dependencyProperty.getIsAttached() || dependencyProperty.isContainedBy(Bridge.getType(this));

            var entry = new System.Windows.DependencyPropertyValueEntry(this, dependencyProperty, isContained ? propertyMetadata.getCoerceValueCallback() : null);
            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(entry, System.Windows.BaseValueSource.Default, propertyMetadata.getDefaultValue());

            if (isContained) {
                entry.System$Windows$IDependencyPropertyValueEntry$addValueChanged(this.containedEntryValueChangedEventHandler);
            } else {
                entry.System$Windows$IDependencyPropertyValueEntry$addValueChanged(this.entryValueChangedEventHandler);
            }

            return entry;
        },
        onEntryValueChanged: function (sender, e) {
            this.onPropertyChanged(e);
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.PropertyChanged, this, e);
        },
        onContainedEntryValueChanged: function (sender, e) {
            e.getProperty().raiseMetadataPropertyChangedCallback(this, e);
            this.onPropertyChanged(e);
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.PropertyChanged, this, e);
        },
        onPropertyChanged: function (e) {
            //
        },
        setInheritanceParent: function (parent) {
            var $t, $t1, $t2;
            if (Bridge.referenceEquals(this.inheritanceParent, parent)) {
                return;
            }

            var oldInheritanceParent = this.inheritanceParent;

            if (this.inheritanceParent != null) {
                this.inheritanceParent.removePropertyChanged(this.parentPropertyChangedEventHandler);
            }

            this.inheritanceParent = parent;

            if (this.inheritanceParent != null) {
                this.inheritanceParent.addPropertyChanged(this.parentPropertyChangedEventHandler);
            }

            if (this.inheritanceParent == null) {
                // clear inherited values
                $t = Bridge.getEnumerator(this.entries.getKeyValuePairs(), System.Collections.Generic.KeyValuePair$2(System.Windows.DependencyProperty,System.Windows.IDependencyPropertyValueEntry));
                while ($t.moveNext()) {
                    var pair = $t.getCurrent();
                    if (pair.key.getInherits()) {
                        System.Windows.DependencyPropertyValueEntryExtensions.clearBaseValue(pair.value, System.Windows.BaseValueSource.Inherited);
                    }
                }
            } else {
                // update existing inherited values
                $t1 = Bridge.getEnumerator(this.entries.getKeyValuePairs(), System.Collections.Generic.KeyValuePair$2(System.Windows.DependencyProperty,System.Windows.IDependencyPropertyValueEntry));
                while ($t1.moveNext()) {
                    var pair1 = $t1.getCurrent();
                    if (pair1.key.getInherits()) {
                        System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(pair1.value, System.Windows.BaseValueSource.Inherited, this.inheritanceParent.getValue(pair1.key));
                    }
                }

                // add missing inherited values
                $t2 = Bridge.getEnumerator(this.inheritanceParent.entries.getKeyValuePairs(), System.Collections.Generic.KeyValuePair$2(System.Windows.DependencyProperty,System.Windows.IDependencyPropertyValueEntry));
                while ($t2.moveNext()) {
                    var pair2 = $t2.getCurrent();
                    if (pair2.key.getInherits()) {
                        System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.getInitializedValueEntry(pair2.key), System.Windows.BaseValueSource.Inherited, pair2.value.System$Windows$IDependencyPropertyValueEntry$getValue());
                    }
                }
            }

            this.onInheritanceParentChanged(oldInheritanceParent, this.inheritanceParent);
        },
        onInheritanceParentChanged: function (oldInheritanceParent, newInheritanceParent) {
            //
        },
        onParentPropertyChanged: function (sender, e) {
            if (e.getProperty().getInherits()) {
                System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.getInitializedValueEntry(e.getProperty()), System.Windows.BaseValueSource.Inherited, e.getNewValue());
            }
        }
    });

    Bridge.ns("System.Windows.DependencyObject", $asm.$);

    Bridge.apply($asm.$.System.Windows.DependencyObject, {
        f1: function (dependencyProperty) {
            return dependencyProperty.getStringKey();
        }
    });

    Bridge.define("System.Windows.IInputElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Animation.IAnimatable", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IContextElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.IItemContainer", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.ClickMode", {
        $kind: "enum",
        statics: {
            Release: 0,
            Press: 1
        }
    });

    Bridge.define("System.Windows.Controls.IDefinitionBase", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.INotifyChanged", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IFrameworkTemplate", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Data.IValueConverter", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.Dock", {
        $kind: "enum",
        statics: {
            Left: 0,
            Top: 1,
            Right: 2,
            Bottom: 3
        }
    });

    Bridge.define("System.Windows.Controls.ExpandDirection", {
        $kind: "enum",
        statics: {
            Down: 0,
            Up: 1,
            Left: 2,
            Right: 3
        }
    });

    Bridge.define("System.Windows.Controls.IDataTemplateSelector", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.InnerCollectionView", {
        inherits: [Granular.Collections.ICollectionView,System.Collections.Generic.IList$1(Object)],
        currentItem: null,
        currentItemIndex: 0,
        innerCollection: null,
        config: {
            events: {
                CollectionChanged: null,
                CurrentChanged: null
            },
            properties: {
                FilterPredicate: null,
                SortKeySelector: null,
                SortDirection: 0
            },
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "addCurrentChanged", "Granular$Collections$ICollectionView$addCurrentChanged",
            "removeCurrentChanged", "Granular$Collections$ICollectionView$removeCurrentChanged",
            "getSourceCollection", "Granular$Collections$ICollectionView$getSourceCollection",
            "getCurrentItem", "Granular$Collections$ICollectionView$getCurrentItem",
            "setCurrentItem", "Granular$Collections$ICollectionView$setCurrentItem",
            "getCurrentItemIndex", "Granular$Collections$ICollectionView$getCurrentItemIndex",
            "setCurrentItemIndex", "Granular$Collections$ICollectionView$setCurrentItemIndex",
            "getCanFilter", "Granular$Collections$ICollectionView$getCanFilter",
            "getFilterPredicate", "Granular$Collections$ICollectionView$getFilterPredicate",
            "setFilterPredicate", "Granular$Collections$ICollectionView$setFilterPredicate",
            "getCanSort", "Granular$Collections$ICollectionView$getCanSort",
            "getSortKeySelector", "Granular$Collections$ICollectionView$getSortKeySelector",
            "setSortKeySelector", "Granular$Collections$ICollectionView$setSortKeySelector",
            "getSortDirection", "Granular$Collections$ICollectionView$getSortDirection",
            "setSortDirection", "Granular$Collections$ICollectionView$setSortDirection",
            "getItem", "System$Collections$Generic$IList$1$Object$getItem",
            "setItem", "System$Collections$Generic$IList$1$Object$setItem",
            "getCount", "System$Collections$Generic$ICollection$1$Object$getCount",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$Object$getIsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$Object$add",
            "clear", "System$Collections$Generic$ICollection$1$Object$clear",
            "contains", "System$Collections$Generic$ICollection$1$Object$contains",
            "indexOf", "System$Collections$Generic$IList$1$Object$indexOf",
            "insert", "System$Collections$Generic$IList$1$Object$insert",
            "remove", "System$Collections$Generic$ICollection$1$Object$remove",
            "removeAt", "System$Collections$Generic$IList$1$Object$removeAt",
            "copyTo", "System$Collections$Generic$ICollection$1$Object$copyTo",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$Object$getEnumerator"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.innerCollection = new (Granular.Collections.ObservableCollection$1(Object)).ctor();
            this.innerCollection.addCollectionChanged(Bridge.fn.cacheBind(this, this.onInnerCollectionChanged));
        },
        getSourceCollection: function () {
            return this;
        },
        getCurrentItem: function () {
            return this.currentItem;
        },
        setCurrentItem: function (value) {
            this.setCurrent$1(value);
        },
        getCurrentItemIndex: function () {
            return this.currentItemIndex;
        },
        setCurrentItemIndex: function (value) {
            this.setCurrent(value);
        },
        getCanFilter: function () {
            return false;
        },
        getCanSort: function () {
            return false;
        },
        getItem: function (index) {
            return this.innerCollection.getItem(index);
        },
        setItem: function (index, value) {
            this.innerCollection.setItem(index, value);
        },
        getCount: function () {
            return this.innerCollection.getCount();
        },
        getIsReadOnly: function () {
            return false;
        },
        onInnerCollectionChanged: function (sender, e) {
            this.setCurrent$1(this.getCurrentItem());
            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, e);
        },
        setCurrent$1: function (item) {
            var itemIndex = this.innerCollection.indexOf(item);

            if (itemIndex !== -1) {
                this.setCurrent$2(item, itemIndex);
            } else if (this.currentItemIndex >= 0 && this.currentItemIndex < this.innerCollection.getCount()) {
                this.setCurrent$2(this.innerCollection.getItem(this.currentItemIndex), this.currentItemIndex);
            } else {
                this.setCurrent$2(null, Math.min(this.currentItemIndex, this.innerCollection.getCount()));
            }
        },
        setCurrent: function (itemIndex) {
            if (itemIndex >= 0 && itemIndex < this.innerCollection.getCount()) {
                this.setCurrent$2(this.innerCollection.getItem(itemIndex), itemIndex);
            } else {
                this.setCurrent$2(null, Math.min(itemIndex, this.innerCollection.getCount()));
            }
        },
        setCurrent$2: function (item, itemIndex) {
            if (Bridge.referenceEquals(this.currentItem, item) && this.currentItemIndex === itemIndex) {
                return;
            }

            this.currentItem = item;
            this.currentItemIndex = itemIndex;

            Granular.Extensions.EventHandlerExtensions.raise$2(this.CurrentChanged, this);
        },
        add: function (value) {
            this.innerCollection.add(value);
        },
        clear: function () {
            this.innerCollection.clear();
        },
        contains: function (value) {
            return this.innerCollection.contains(value);
        },
        indexOf: function (value) {
            return this.innerCollection.indexOf(value);
        },
        insert: function (index, value) {
            this.innerCollection.insert(index, value);
        },
        remove: function (value) {
            return this.innerCollection.remove(value);
        },
        removeAt: function (index) {
            this.innerCollection.removeAt(index);
        },
        copyTo: function (array, arrayIndex) {
            this.innerCollection.copyTo(array, arrayIndex);
        },
        getEnumerator: function () {
            return this.innerCollection.getEnumerator();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.Controls.IPopupLayerHost", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.IRadioButtonGroupScope", {
        $kind: "interface"
    });

    Bridge.definei("System.Windows.Controls.ISelectionGroup$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.definei("System.Windows.Controls.ISelectionGroupScope$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("System.Windows.Controls.IStyleSelector", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.ItemCollection", {
        inherits: [Granular.Collections.ICollectionView,System.Collections.Generic.IList$1(Object)],
        defaultView: null,
        innerView: null,
        delegateView: null,
        config: {
            events: {
                CollectionChanged: null,
                CurrentChanged: null
            },
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "addCurrentChanged", "Granular$Collections$ICollectionView$addCurrentChanged",
            "removeCurrentChanged", "Granular$Collections$ICollectionView$removeCurrentChanged",
            "getSourceCollection", "Granular$Collections$ICollectionView$getSourceCollection",
            "getCurrentItem", "Granular$Collections$ICollectionView$getCurrentItem",
            "setCurrentItem", "Granular$Collections$ICollectionView$setCurrentItem",
            "getCurrentItemIndex", "Granular$Collections$ICollectionView$getCurrentItemIndex",
            "setCurrentItemIndex", "Granular$Collections$ICollectionView$setCurrentItemIndex",
            "getCanFilter", "Granular$Collections$ICollectionView$getCanFilter",
            "getFilterPredicate", "Granular$Collections$ICollectionView$getFilterPredicate",
            "setFilterPredicate", "Granular$Collections$ICollectionView$setFilterPredicate",
            "getCanSort", "Granular$Collections$ICollectionView$getCanSort",
            "getSortKeySelector", "Granular$Collections$ICollectionView$getSortKeySelector",
            "setSortKeySelector", "Granular$Collections$ICollectionView$setSortKeySelector",
            "getSortDirection", "Granular$Collections$ICollectionView$getSortDirection",
            "setSortDirection", "Granular$Collections$ICollectionView$setSortDirection",
            "getItem", "System$Collections$Generic$IList$1$Object$getItem",
            "setItem", "System$Collections$Generic$IList$1$Object$setItem",
            "getCount", "System$Collections$Generic$ICollection$1$Object$getCount",
            "add", "System$Collections$Generic$ICollection$1$Object$add",
            "clear", "System$Collections$Generic$ICollection$1$Object$clear",
            "contains", "System$Collections$Generic$ICollection$1$Object$contains",
            "indexOf", "System$Collections$Generic$IList$1$Object$indexOf",
            "insert", "System$Collections$Generic$IList$1$Object$insert",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$Object$getIsReadOnly",
            "remove", "System$Collections$Generic$ICollection$1$Object$remove",
            "removeAt", "System$Collections$Generic$IList$1$Object$removeAt",
            "copyTo", "System$Collections$Generic$ICollection$1$Object$copyTo",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$Object$getEnumerator"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.defaultView = new System.Windows.Controls.InnerCollectionView();
            this.setDelegateView(this.defaultView);
        },
        getSourceCollection: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getSourceCollection();
        },
        getCurrentItem: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getCurrentItem();
        },
        setCurrentItem: function (value) {
            this.delegateView.Granular$Collections$ICollectionView$setCurrentItem(value);
        },
        getCurrentItemIndex: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getCurrentItemIndex();
        },
        setCurrentItemIndex: function (value) {
            this.delegateView.Granular$Collections$ICollectionView$setCurrentItemIndex(value);
        },
        getCanFilter: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getCanFilter();
        },
        getFilterPredicate: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getFilterPredicate();
        },
        setFilterPredicate: function (value) {
            this.delegateView.Granular$Collections$ICollectionView$setFilterPredicate(value);
        },
        getCanSort: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getCanSort();
        },
        getSortKeySelector: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getSortKeySelector();
        },
        setSortKeySelector: function (value) {
            this.delegateView.Granular$Collections$ICollectionView$setSortKeySelector(value);
        },
        getSortDirection: function () {
            return this.delegateView.Granular$Collections$ICollectionView$getSortDirection();
        },
        setSortDirection: function (value) {
            this.delegateView.Granular$Collections$ICollectionView$setSortDirection(value);
        },
        getItem: function (index) {
            return System.Linq.Enumerable.from(this.delegateView).elementAt(index);
        },
        setItem: function (index, value) {
            this.verifyDefaultView();
            this.defaultView.setItem(index, value);
        },
        getCount: function () {
            return System.Linq.Enumerable.from(this.delegateView).count();
        },
        getIsReadOnly: function () {
            return false;
        },
        setItemsSource: function (source) {
            if (this.innerView != null) {
                if (Bridge.referenceEquals(this.innerView.getSourceCollection(), source)) {
                    return;
                }

                this.innerView.dispose();
                this.innerView = null;
            }

            if (Bridge.is(source, Granular.Collections.ICollectionView)) {
                this.setDelegateView(Bridge.cast(source, Granular.Collections.ICollectionView));
            } else {
                this.innerView = new System.Windows.Data.CollectionView(source);
                this.setDelegateView(this.innerView);
            }
        },
        clearItemsSource: function () {
            if (this.innerView != null) {
                this.innerView.dispose();
                this.innerView = null;
            }

            this.setDelegateView(this.defaultView);
        },
        setDelegateView: function (collectionView) {
            if (Bridge.referenceEquals(this.delegateView, collectionView)) {
                return;
            }

            var oldItems;
            if (this.delegateView != null) {
                this.delegateView.Granular$Collections$INotifyCollectionChanged$removeCollectionChanged(Bridge.fn.cacheBind(this, this.onDelegateViewCollectionChanged));
                this.delegateView.Granular$Collections$ICollectionView$removeCurrentChanged(Bridge.fn.cacheBind(this, this.onDelegateViewCurrentChanged));
                oldItems = this.delegateView;
            } else {
                oldItems = System.Array.init(0, null, Object);
            }

            this.delegateView = collectionView || System.Windows.Data.CollectionView.empty;

            this.delegateView.Granular$Collections$INotifyCollectionChanged$addCollectionChanged(Bridge.fn.cacheBind(this, this.onDelegateViewCollectionChanged));
            this.delegateView.Granular$Collections$ICollectionView$addCurrentChanged(Bridge.fn.cacheBind(this, this.onDelegateViewCurrentChanged));

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.reset(oldItems, this.delegateView));
            Granular.Extensions.EventHandlerExtensions.raise$2(this.CurrentChanged, this);
        },
        onDelegateViewCollectionChanged: function (sender, e) {
            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, e);
        },
        onDelegateViewCurrentChanged: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$3(this.CurrentChanged, this, e);
        },
        add: function (value) {
            this.verifyDefaultView();
            this.defaultView.add(value);
        },
        clear: function () {
            this.verifyDefaultView();
            this.defaultView.clear();
        },
        contains: function (value) {
            this.verifyDefaultView();
            return this.defaultView.contains(value);
        },
        indexOf: function (value) {
            return Granular.Compatibility.Array.indexOf(Object, System.Linq.Enumerable.from(this.delegateView).toArray(), value);
        },
        insert: function (index, value) {
            this.verifyDefaultView();
            this.defaultView.insert(index, value);
        },
        remove: function (value) {
            this.verifyDefaultView();
            return this.defaultView.remove(value);
        },
        removeAt: function (index) {
            this.verifyDefaultView();
            this.defaultView.removeAt(index);
        },
        copyTo: function (array, arrayIndex) {
            var $t;
            ($t=System.Linq.Enumerable.from(this.delegateView).toArray(), System.Array.copy($t, 0, array, arrayIndex, $t.length));
        },
        verifyDefaultView: function () {
            if (!Bridge.referenceEquals(this.delegateView, this.defaultView)) {
                throw new Granular.Exception("Can't change ItemCollection while ItemSource is set");
            }
        },
        getEnumerator: function () {
            return Bridge.getEnumerator(this.delegateView, Object);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.IItemContainerGenerator", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.ItemContainerGenerator.GeneratedItemContainer", {
        config: {
            properties: {
                Container: null,
                Item: null,
                Index: 0
            }
        },
        ctor: function (container, item, index) {
            this.$initialize();
            this.setContainer(container);
            this.setItem(item);
            this.setIndex(index);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.IGeneratorHost", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.ListBox.ISelectionBehavior", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.Orientation", {
        $kind: "enum",
        statics: {
            Horizontal: 0,
            Vertical: 1
        }
    });

    Bridge.define("System.Windows.RoutedEventArgs", {
        config: {
            properties: {
                RoutedEvent: null,
                OriginalSource: null,
                Source: null,
                Handled: false
            }
        },
        ctor: function (routedEvent, originalSource) {
            this.$initialize();
            this.setRoutedEvent(routedEvent);
            this.setOriginalSource(originalSource);
        },
        invokeEventHandler: function (handler, target) {
            if (!(Bridge.is(handler, Function))) {
                throw new Granular.Exception("Can't dynamically invoke a non RoutedEventHandler, \"{0}\" must override InvokeEventHandler", [Bridge.Reflection.getTypeName(Bridge.getType(this))]);
            }

            handler(target, this);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.IScrollInfo", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.Primitives.ItemContainerGeneratorExtensions", {
        statics: {
            generateRange: function (generator, startIndex, count) {
                for (var i = 0; i < count; i = (i + 1) | 0) {
                    generator.System$Windows$Controls$Primitives$IItemContainerGenerator$generate(((startIndex + i) | 0));
                }
            },
            remove: function (generator, index) {
                generator.System$Windows$Controls$Primitives$IItemContainerGenerator$removeRange(index, 1);
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ItemsChangedEventArgs", {
        config: {
            properties: {
                Action: 0,
                OldStartingIndex: 0,
                NewStartingIndex: 0,
                ItemsCount: 0,
                ContainersCount: 0
            }
        },
        ctor: function (action, oldStartingIndex, newStartingIndex, itemsCount, containersCount) {
            this.$initialize();
            this.setAction(action);
            this.setOldStartingIndex(oldStartingIndex);
            this.setNewStartingIndex(newStartingIndex);
            this.setItemsCount(itemsCount);
            this.setContainersCount(containersCount);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement", {
        statics: {
            getPosition: function (placementMode, placementTargetRect, placementRectangle, mouseBounds, offset, popupSize, containerBounds) {
                return System.Windows.Controls.Primitives.Placement.getPlacement(placementMode).getPosition(placementTargetRect, placementRectangle, mouseBounds, offset, popupSize, containerBounds);
            },
            getPlacement: function (placementMode) {
                switch (placementMode) {
                    case System.Windows.Controls.Primitives.PlacementMode.Absolute: 
                        return System.Windows.Controls.Primitives.Placement.AbsolutePlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Relative: 
                        return System.Windows.Controls.Primitives.Placement.RelativePlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Bottom: 
                        return System.Windows.Controls.Primitives.Placement.BottomPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Center: 
                        return System.Windows.Controls.Primitives.Placement.CenterPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Right: 
                        return System.Windows.Controls.Primitives.Placement.RightPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.AbsolutePoint: 
                        return System.Windows.Controls.Primitives.Placement.AbsolutePointPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.RelativePoint: 
                        return System.Windows.Controls.Primitives.Placement.RelativePointPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Mouse: 
                        return System.Windows.Controls.Primitives.Placement.MousePlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.MousePoint: 
                        return System.Windows.Controls.Primitives.Placement.MousePointPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Left: 
                        return System.Windows.Controls.Primitives.Placement.LeftPlacement.default;
                    case System.Windows.Controls.Primitives.PlacementMode.Top: 
                        return System.Windows.Controls.Primitives.Placement.TopPlacement.default;
                }

                throw new Granular.Exception("Unexpected PlacementMode \"{0}\"", [placementMode]);
            },
            getTopLeft: function (size) {
                return System.Windows.Point.zero;
            },
            getTopRight: function (size) {
                return new System.Windows.Point.$ctor1(size.getWidth(), 0);
            },
            getBottomLeft: function (size) {
                return new System.Windows.Point.$ctor1(0, size.getHeight());
            },
            getBottomRight: function (size) {
                return new System.Windows.Point.$ctor1(size.getWidth(), size.getHeight());
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.PlacementBase", {
        statics: {
            getPosition: function (targetOrigin, popupAlignmentPoint, offset) {
                return new System.Windows.Point.$ctor1(targetOrigin.getX() + offset.getX() - popupAlignmentPoint.getX(), targetOrigin.getY() + offset.getY() - popupAlignmentPoint.getY());
            }
        },
        getPosition: function (placementTargetBounds, placementRectangle, mouseBounds, offset, popupSize, containerBounds) {
            var targetObjectRect = !placementTargetBounds.getIsEmpty() ? placementTargetBounds : containerBounds;

            var targetArea = this.getTargetArea(targetObjectRect, placementRectangle, mouseBounds, containerBounds);

            var targetOrigin = this.getTargetOrigin(targetArea);
            var popupAlignmentPoint = this.getPopupAlignmentPoint(popupSize);

            // calculate initial position
            var position = System.Windows.Controls.Primitives.Placement.PlacementBase.getPosition(targetOrigin, popupAlignmentPoint, offset);

            // check edges overflow and get alternative origin and alignment points
            if (position.getX() < containerBounds.getLeft()) {
                targetOrigin = this.getLeftEdgeTargetOrigin(targetArea, targetOrigin);
                popupAlignmentPoint = this.getLeftEdgePopupAlignmentPoint(popupSize, popupAlignmentPoint);
            }

            if (position.getY() < containerBounds.getTop()) {
                targetOrigin = this.getTopEdgeTargetOrigin(targetArea, targetOrigin);
                popupAlignmentPoint = this.getTopEdgePopupAlignmentPoint(popupSize, popupAlignmentPoint);
            }

            if (position.getX() + popupSize.getWidth() > containerBounds.getRight()) {
                targetOrigin = this.getRightEdgeTargetOrigin(targetArea, targetOrigin);
                popupAlignmentPoint = this.getRightEdgePopupAlignmentPoint(popupSize, popupAlignmentPoint);
            }

            if (position.getY() + popupSize.getHeight() > containerBounds.getBottom()) {
                targetOrigin = this.getBottomEdgeTargetOrigin(targetArea, targetOrigin);
                popupAlignmentPoint = this.getBottomEdgePopupAlignmentPoint(popupSize, popupAlignmentPoint);
            }

            // recalculate position with the alternative origin and alignment points
            position = System.Windows.Controls.Primitives.Placement.PlacementBase.getPosition(targetOrigin, popupAlignmentPoint, offset);

            // after the recalculation, overflow can occur from opposite edges if the containerBounds is too small, so apply bounds
            return System.Windows.PointExtensions.bounds(position, System.Windows.RectExtensions.getTopLeft(containerBounds), System.Windows.Point.op_Subtraction(System.Windows.RectExtensions.getBottomRight(containerBounds), System.Windows.Controls.Primitives.Placement.getBottomRight(popupSize)));
        },
        getTargetArea: function (targetObjectRect, placementRectangle, mouseBounds, containerBounds) {
            return !placementRectangle.getIsEmpty() ? System.Windows.RectExtensions.addOffset(placementRectangle, targetObjectRect.getLocation()) : targetObjectRect;
        },
        getTargetOrigin: function (targetArea) {
            return System.Windows.RectExtensions.getTopLeft(targetArea);
        },
        getPopupAlignmentPoint: function (popupSize) {
            return System.Windows.Controls.Primitives.Placement.getTopLeft(popupSize);
        },
        getLeftEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return currentTargetOrigin;
        },
        getRightEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return currentTargetOrigin;
        },
        getTopEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return currentTargetOrigin;
        },
        getBottomEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return currentTargetOrigin;
        },
        getLeftEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return currentAlignmentPoint;
        },
        getRightEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return currentAlignmentPoint;
        },
        getTopEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return currentAlignmentPoint;
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return currentAlignmentPoint;
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.PlacementMode", {
        $kind: "enum",
        statics: {
            Absolute: 0,
            Relative: 1,
            Bottom: 2,
            Center: 3,
            Right: 4,
            AbsolutePoint: 5,
            RelativePoint: 6,
            Mouse: 7,
            MousePoint: 8,
            Left: 9,
            Top: 10
        }
    });

    Bridge.define("System.Windows.Documents.IAdornerLayerHost", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Controls.Primitives.ScrollEventType", {
        $kind: "enum",
        statics: {
            EndScroll: 0,
            LargeDecrement: 1,
            LargeIncrement: 2,
            SmallDecrement: 3,
            SmallIncrement: 4,
            ThumbTrack: 5
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ScrollInfoExtensions", {
        statics: {
            ScrollLineDelta: 16,
            MouseWheelDelta: 48,
            lineUp: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta)));
            },
            lineDown: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta)));
            },
            lineLeft: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta, 0)));
            },
            lineRight: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta, 0)));
            },
            pageUp: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize().getHeight())));
            },
            pageDown: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize().getHeight())));
            },
            pageLeft: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize().getWidth(), 0)));
            },
            pageRight: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize().getWidth(), 0)));
            },
            mouseWheelUp: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, System.Windows.Controls.Primitives.ScrollInfoExtensions.MouseWheelDelta)));
            },
            mouseWheelDown: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(0, System.Windows.Controls.Primitives.ScrollInfoExtensions.MouseWheelDelta)));
            },
            mouseWheelLeft: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(System.Windows.Controls.Primitives.ScrollInfoExtensions.MouseWheelDelta, 0)));
            },
            mouseWheelRight: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.op_Addition(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), new System.Windows.Point.$ctor1(System.Windows.Controls.Primitives.ScrollInfoExtensions.MouseWheelDelta, 0)));
            },
            scrollToHome: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(System.Windows.Point.zero);
            },
            scrollToEnd: function (scrollInfo) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(new System.Windows.Point.$ctor1(0, System.Windows.Controls.Primitives.ScrollInfoExtensions.getScrollableSize(scrollInfo).getHeight()));
            },
            scrollToHorizontalOffset: function (scrollInfo, offset) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(new System.Windows.Point.$ctor1(Granular.Extensions.DoubleExtensions.bounds(offset, 0, System.Windows.Controls.Primitives.ScrollInfoExtensions.getScrollableSize(scrollInfo).getWidth()), scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset().getY()));
            },
            scrollToVerticalOffset: function (scrollInfo, offset) {
                scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(new System.Windows.Point.$ctor1(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset().getX(), Granular.Extensions.DoubleExtensions.bounds(offset, 0, System.Windows.Controls.Primitives.ScrollInfoExtensions.getScrollableSize(scrollInfo).getHeight())));
            },
            getScrollableSize: function (scrollInfo) {
                return System.Windows.SizeExtensions.max((System.Windows.Size.op_Subtraction(scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getExtentSize(), scrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize())), System.Windows.Size.zero);
            }
        }
    });

    Bridge.define("System.Windows.Controls.ScrollBarVisibility", {
        $kind: "enum",
        statics: {
            Disabled: 0,
            Auto: 1,
            Hidden: 2,
            Visible: 3
        }
    });

    Bridge.define("System.Windows.Controls.SelectionMode", {
        $kind: "enum",
        statics: {
            Single: 0,
            Multiple: 1,
            Extended: 2
        }
    });

    Bridge.define("System.Windows.Controls.SpellCheck", {
        statics: {
            isEnabledProperty: null,
            config: {
                init: function () {
                    this.isEnabledProperty = System.Windows.DependencyProperty.registerAttached("IsEnabled", Boolean, System.Windows.Controls.SpellCheck, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
                }
            },
            getIsEnabled: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.SpellCheck.isEnabledProperty), Boolean));
            },
            setIsEnabled: function (obj, value) {
                obj.setValue(System.Windows.Controls.SpellCheck.isEnabledProperty, value);
            }
        }
    });

    Bridge.define("System.Windows.Controls.StretchDirection", {
        $kind: "enum",
        statics: {
            UpOnly: 0,
            DownOnly: 1,
            Both: 2
        }
    });

    Bridge.define("System.Windows.Controls.VisualStates", {
        statics: {
            CommonStates: "CommonStates",
            DisabledState: "Disabled",
            PressedState: "Pressed",
            MouseOverState: "MouseOver",
            NormalState: "Normal",
            FocusStates: "FocusStates",
            FocusedState: "Focused",
            UnfocusedState: "Unfocused",
            CheckStates: "CheckStates",
            CheckedState: "Checked",
            UncheckedState: "Unchecked",
            IndeterminateState: "Indeterminate",
            ExpansionStates: "ExpansionStates",
            ExpandedState: "Expanded",
            CollapsedState: "Collapsed",
            SelectionStates: "SelectionStates",
            SelectedState: "Selected",
            SelectedUnfocusedState: "SelectedUnfocused",
            SelectedInactiveState: "SelectedInactive",
            UnselectedState: "Unselected"
        }
    });

    Bridge.define("System.Windows.CornerRadius", {
        statics: {
            zero: null,
            config: {
                init: function () {
                    this.zero = new System.Windows.CornerRadius.ctor(0);
                }
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.CornerRadius.f1).toArray();

                if (values.length === 1) {
                    return new System.Windows.CornerRadius.ctor(values[0]);
                }

                if (values.length === 4) {
                    return new System.Windows.CornerRadius.$ctor1(values[0], values[1], values[2], values[3]);
                }

                throw new Granular.Exception("Can't parse CornerRadius value \"{0}\"", [value]);
            },
            op_Equality: function (cornerRadius1, cornerRadius2) {
                return Bridge.equals(cornerRadius1, cornerRadius2);
            },
            op_Inequality: function (cornerRadius1, cornerRadius2) {
                return !(System.Windows.CornerRadius.op_Equality(cornerRadius1, cornerRadius2));
            }
        },
        config: {
            properties: {
                TopLeft: 0,
                TopRight: 0,
                BottomRight: 0,
                BottomLeft: 0,
                IsUniform: false
            }
        },
        ctor: function (uniformRadius) {
            System.Windows.CornerRadius.$ctor1.call(this, uniformRadius, uniformRadius, uniformRadius, uniformRadius);
            //
        },
        $ctor1: function (topLeft, topRight, bottomRight, bottomLeft) {
            this.$initialize();
            this.setTopLeft(topLeft);
            this.setTopRight(topRight);
            this.setBottomRight(bottomRight);
            this.setBottomLeft(bottomLeft);

            this.setIsUniform(this.getTopLeft() === this.getTopRight() && this.getTopLeft() === this.getBottomRight() && this.getTopLeft() === this.getBottomLeft());
        },
        toString: function () {
            return this.getIsUniform() ? System.String.format("CornerRadius({0})", this.getTopLeft()) : System.String.format("CornerRadius({0}, {1}, {2}, {3})", this.getTopLeft(), this.getTopRight(), this.getBottomRight(), this.getBottomLeft());
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.CornerRadius);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Granular.Compatibility.EqualityComparer.double.equals2(this.getTopLeft(), other.getTopLeft()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getTopRight(), other.getTopRight()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getBottomRight(), other.getBottomRight()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getBottomLeft(), other.getBottomLeft());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getTopLeft()) ^ Bridge.getHashCode(this.getTopRight()) ^ Bridge.getHashCode(this.getBottomRight()) ^ Bridge.getHashCode(this.getBottomLeft());
        }
    });

    Bridge.ns("System.Windows.CornerRadius", $asm.$);

    Bridge.apply($asm.$.System.Windows.CornerRadius, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.CornerRadiusExtensions", {
        statics: {
            defaultIfNull: function (cornerRadius, defaultValue) {
                if (defaultValue === void 0) { defaultValue = null; }
                return cornerRadius || defaultValue || System.Windows.CornerRadius.zero;
            }
        }
    });

    Bridge.define("System.Windows.Markup.ITypeConverter", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IExpressionProvider", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Data.IObservableValue", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Data.BindingMode", {
        $kind: "enum",
        statics: {
            TwoWay: 0,
            OneWay: 1,
            OneWayToSource: 2,
            Default: 3
        }
    });

    Bridge.define("System.Windows.Data.BindingStatus", {
        $kind: "enum",
        statics: {
            Inactive: 0,
            Active: 1,
            Detached: 2,
            UpdateTargetError: 3,
            UpdateSourceError: 4
        }
    });

    Bridge.define("System.Windows.Data.CollectionView", {
        inherits: [Granular.Collections.ICollectionView,System.IDisposable],
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Data.CollectionView.EmptyCollectionView();
                }
            },
            translateCollection: function (source, filterPredicate, sortKeySelector, sortDirection) {
                var collection = source;

                if (!Bridge.staticEquals(filterPredicate, null)) {
                    collection = System.Linq.Enumerable.from(collection).where(filterPredicate);
                }

                if (!Bridge.staticEquals(sortKeySelector, null)) {
                    collection = sortDirection === Granular.Collections.ListSortDirection.Ascending ? System.Linq.Enumerable.from(collection).orderBy(sortKeySelector) : System.Linq.Enumerable.from(collection).orderByDescending(sortKeySelector);
                }

                return collection;
            }
        },
        currentItem: null,
        currentItemIndex: 0,
        filterPredicate: null,
        sortKeySelector: null,
        sortDirection: 0,
        innerCollection: null,
        config: {
            events: {
                CollectionChanged: null,
                CurrentChanged: null
            },
            properties: {
                SourceCollection: null
            },
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "addCurrentChanged", "Granular$Collections$ICollectionView$addCurrentChanged",
            "removeCurrentChanged", "Granular$Collections$ICollectionView$removeCurrentChanged",
            "getSourceCollection", "Granular$Collections$ICollectionView$getSourceCollection",
            "setSourceCollection", "Granular$Collections$ICollectionView$setSourceCollection",
            "getCurrentItem", "Granular$Collections$ICollectionView$getCurrentItem",
            "setCurrentItem", "Granular$Collections$ICollectionView$setCurrentItem",
            "getCurrentItemIndex", "Granular$Collections$ICollectionView$getCurrentItemIndex",
            "setCurrentItemIndex", "Granular$Collections$ICollectionView$setCurrentItemIndex",
            "getCanFilter", "Granular$Collections$ICollectionView$getCanFilter",
            "getFilterPredicate", "Granular$Collections$ICollectionView$getFilterPredicate",
            "setFilterPredicate", "Granular$Collections$ICollectionView$setFilterPredicate",
            "getCanSort", "Granular$Collections$ICollectionView$getCanSort",
            "getSortKeySelector", "Granular$Collections$ICollectionView$getSortKeySelector",
            "setSortKeySelector", "Granular$Collections$ICollectionView$setSortKeySelector",
            "getSortDirection", "Granular$Collections$ICollectionView$getSortDirection",
            "setSortDirection", "Granular$Collections$ICollectionView$setSortDirection",
            "dispose", "System$IDisposable$dispose",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$Object$getEnumerator"
            ]
        },
        ctor: function (source) {
            this.$initialize();
            this.setSourceCollection(source);
            this.currentItemIndex = -1;

            if (Bridge.is(this.getSourceCollection(), Granular.Collections.INotifyCollectionChanged)) {
                Bridge.cast(this.getSourceCollection(), Granular.Collections.INotifyCollectionChanged).Granular$Collections$INotifyCollectionChanged$addCollectionChanged(Bridge.fn.cacheBind(this, this.onSourceCollectionChanged));
            }

            this.resetInnerCollection();
        },
        getCurrentItem: function () {
            return this.currentItem;
        },
        setCurrentItem: function (value) {
            this.setCurrent$1(value);
        },
        getCurrentItemIndex: function () {
            return this.currentItemIndex;
        },
        setCurrentItemIndex: function (value) {
            this.setCurrent(value);
        },
        getCanFilter: function () {
            return true;
        },
        getFilterPredicate: function () {
            return this.filterPredicate;
        },
        setFilterPredicate: function (value) {
            if (Bridge.staticEquals(this.filterPredicate, value)) {
                return;
            }

            this.filterPredicate = value;
            this.resetInnerCollection();
        },
        getCanSort: function () {
            return true;
        },
        getSortKeySelector: function () {
            return this.sortKeySelector;
        },
        setSortKeySelector: function (value) {
            if (Bridge.staticEquals(this.sortKeySelector, value)) {
                return;
            }

            this.sortKeySelector = value;
            this.resetInnerCollection();
        },
        getSortDirection: function () {
            return this.sortDirection;
        },
        setSortDirection: function (value) {
            if (this.sortDirection === value) {
                return;
            }

            this.sortDirection = value;
            this.resetInnerCollection();
        },
        dispose: function () {
            if (Bridge.is(this.getSourceCollection(), Granular.Collections.INotifyCollectionChanged)) {
                Bridge.cast(this.getSourceCollection(), Granular.Collections.INotifyCollectionChanged).Granular$Collections$INotifyCollectionChanged$removeCollectionChanged(Bridge.fn.cacheBind(this, this.onSourceCollectionChanged));
            }
        },
        setCurrent$1: function (item) {
            var itemIndex = Granular.Compatibility.Array.indexOf(Object, this.innerCollection, item);

            if (itemIndex !== -1) {
                this.setCurrent$2(item, itemIndex);
            } else if (this.currentItemIndex >= 0 && this.currentItemIndex < this.innerCollection.length) {
                this.setCurrent$2(this.innerCollection[this.currentItemIndex], this.currentItemIndex);
            } else {
                this.setCurrent$2(null, Math.min(this.currentItemIndex, this.innerCollection.length));
            }
        },
        setCurrent: function (itemIndex) {
            if (itemIndex >= 0 && itemIndex < this.innerCollection.length) {
                this.setCurrent$2(this.innerCollection[itemIndex], itemIndex);
            } else {
                this.setCurrent$2(null, Math.min(itemIndex, this.innerCollection.length));
            }
        },
        setCurrent$2: function (item, itemIndex) {
            if (Bridge.referenceEquals(this.currentItem, item) && this.currentItemIndex === itemIndex) {
                return;
            }

            this.currentItem = item;
            this.currentItemIndex = itemIndex;

            Granular.Extensions.EventHandlerExtensions.raise$2(this.CurrentChanged, this);
        },
        resetInnerCollection: function () {
            var oldInnerCollection = this.innerCollection || System.Array.init(0, null, Object);

            this.innerCollection = System.Linq.Enumerable.from(System.Windows.Data.CollectionView.translateCollection(System.Linq.Enumerable.from(this.getSourceCollection()).select(function(x) { return Bridge.cast(x, Object); }), this.filterPredicate, this.sortKeySelector, this.sortDirection)).toArray();

            if (System.Array.contains(this.innerCollection, this.getCurrentItem(), Object)) {
                this.setCurrent$1(this.getCurrentItem());
            } else {
                this.setCurrent(this.getCurrentItemIndex() >= oldInnerCollection.length ? this.innerCollection.length : this.getCurrentItemIndex());
            }

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.reset(oldInnerCollection, this.innerCollection));
        },
        onSourceCollectionChanged: function (sender, e) {
            var oldInnerCollection = this.innerCollection;

            this.innerCollection = System.Linq.Enumerable.from(System.Windows.Data.CollectionView.translateCollection(System.Linq.Enumerable.from(this.getSourceCollection()).select(function(x) { return Bridge.cast(x, Object); }), this.filterPredicate, this.sortKeySelector, this.sortDirection)).toArray();

            if (System.Array.contains(this.innerCollection, this.getCurrentItem(), Object)) {
                this.setCurrent$1(this.getCurrentItem());
            } else {
                this.setCurrent(this.getCurrentItemIndex() >= oldInnerCollection.length ? this.innerCollection.length : this.getCurrentItemIndex());
            }

            var oldItems = System.Linq.Enumerable.from(e.getOldItems()).intersect(oldInnerCollection).toArray();
            var newItems = System.Linq.Enumerable.from(e.getNewItems()).intersect(this.innerCollection).toArray();

            if (System.Linq.Enumerable.from(oldItems).count() > 1 || System.Linq.Enumerable.from(newItems).count() > 1) {
                Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.reset(oldInnerCollection, this.innerCollection));
                return;
            }

            var oldItem = System.Linq.Enumerable.from(e.getOldItems()).firstOrDefault(null, null);
            var oldIndex = Granular.Compatibility.Array.findIndex(Object, oldInnerCollection, function (item) {
                return Granular.Compatibility.EqualityComparer.default.equals2(item, oldItem);
            });

            var newItem = System.Linq.Enumerable.from(e.getNewItems()).firstOrDefault(null, null);
            var newIndex = Granular.Compatibility.Array.findIndex(Object, this.innerCollection, function (item) {
                return Granular.Compatibility.EqualityComparer.default.equals2(item, newItem);
            });

            if (oldIndex === -1 && newIndex === -1 || Bridge.referenceEquals(oldItem, newItem) && oldIndex === newIndex) {
                return;
            }

            if (Granular.Compatibility.EqualityComparer.default.equals2(oldItem, newItem)) {
                Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.move(newItem, oldIndex, newIndex));
            } else if (oldIndex === newIndex) {
                Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.replace(oldItem, newItem, newIndex));
            } else {
                if (oldIndex !== -1) {
                    Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.remove(oldItem, oldIndex));
                }

                if (newIndex !== -1) {
                    Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.add(newItem, newIndex));
                }
            }
        },
        getEnumerator: function () {
            return System.Linq.Enumerable.from(this.innerCollection).select(function(x) { return Bridge.cast(x, Object); }).getEnumerator();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.Data.CollectionView.EmptyCollectionView", {
        inherits: [Granular.Collections.ICollectionView],
        config: {
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "addCurrentChanged", "Granular$Collections$ICollectionView$addCurrentChanged",
            "removeCurrentChanged", "Granular$Collections$ICollectionView$removeCurrentChanged",
            "getSourceCollection", "Granular$Collections$ICollectionView$getSourceCollection",
            "getCurrentItem", "Granular$Collections$ICollectionView$getCurrentItem",
            "setCurrentItem", "Granular$Collections$ICollectionView$setCurrentItem",
            "getCurrentItemIndex", "Granular$Collections$ICollectionView$getCurrentItemIndex",
            "setCurrentItemIndex", "Granular$Collections$ICollectionView$setCurrentItemIndex",
            "getCanFilter", "Granular$Collections$ICollectionView$getCanFilter",
            "getFilterPredicate", "Granular$Collections$ICollectionView$getFilterPredicate",
            "setFilterPredicate", "Granular$Collections$ICollectionView$setFilterPredicate",
            "getCanSort", "Granular$Collections$ICollectionView$getCanSort",
            "getSortKeySelector", "Granular$Collections$ICollectionView$getSortKeySelector",
            "setSortKeySelector", "Granular$Collections$ICollectionView$setSortKeySelector",
            "getSortDirection", "Granular$Collections$ICollectionView$getSortDirection",
            "setSortDirection", "Granular$Collections$ICollectionView$setSortDirection",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$Object$getEnumerator"
            ]
        },
        addCollectionChanged: function (value) {
        },
        removeCollectionChanged: function (value) {
        },
        addCurrentChanged: function (value) {
        },
        removeCurrentChanged: function (value) {
        },
        getSourceCollection: function () {
            return this;
        },
        getCurrentItem: function () {
            return null;
        },
        setCurrentItem: function (value) {
        },
        getCurrentItemIndex: function () {
            return -1;
        },
        setCurrentItemIndex: function (value) {
        },
        getCanFilter: function () {
            return false;
        },
        getFilterPredicate: function () {
            return null;
        },
        setFilterPredicate: function (value) {
        },
        getCanSort: function () {
            return false;
        },
        getSortKeySelector: function () {
            return null;
        },
        setSortKeySelector: function (value) {
        },
        getSortDirection: function () {
            return Granular.Collections.ListSortDirection.Ascending;
        },
        setSortDirection: function (value) {
        },
        getEnumerator: function () {
            return System.Linq.Enumerable.empty().getEnumerator();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.Data.NamedObject", {
        name: null,
        ctor: function (name) {
            this.$initialize();
            this.name = name;
        },
        toString: function () {
            return System.String.format("{{{0}}}", this.name);
        }
    });

    Bridge.define("System.Windows.Data.ObservableValueChangedEventHandlerExtensions", {
        statics: {
            raise: function (handler, sender, oldValue, newValue) {
                if (!Bridge.staticEquals(handler, null)) {
                    handler(sender, oldValue, newValue);
                }
            }
        }
    });

    Bridge.define("System.Windows.Data.RelativeSourceMode", {
        $kind: "enum",
        statics: {
            TemplatedParent: 0,
            Self: 1,
            FindAncestor: 2
        }
    });

    Bridge.define("System.Windows.Data.UpdateSourceTrigger", {
        $kind: "enum",
        statics: {
            Default: 0,
            PropertyChanged: 1,
            LostFocus: 2,
            Explicit: 3
        }
    });

    Bridge.define("System.Windows.Markup.IDeferredValueKeyProvider", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IDataTriggerConditionProvider", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.ITrigger", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IDataTriggerCondition", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.DependencyProperty", {
        statics: {
            registeredProperties: null,
            registeredReadOnlyPropertiesKey: null,
            config: {
                init: function () {
                    this.registeredProperties = new (Granular.Collections.ConvertedStringDictionary$2(System.Windows.DependencyProperty.DependencyPropertyHashKey,System.Windows.DependencyProperty))($asm.$.System.Windows.DependencyProperty.f1);
                    this.registeredReadOnlyPropertiesKey = new (Granular.Collections.ConvertedStringDictionary$2(System.Windows.DependencyProperty.DependencyPropertyHashKey,System.Windows.DependencyPropertyKey))($asm.$.System.Windows.DependencyProperty.f1);
                }
            },
            register$1: function (key, propertyType, metadata, validateValueCallback, isAttached, isReadOnly) {
                if (metadata == null) {
                    metadata = new System.Windows.PropertyMetadata.ctor();
                }

                if (metadata.getDefaultValue() == null && System.TypeExtensions.getIsValueType(propertyType)) {
                    metadata.setDefaultValue(Bridge.createInstance(propertyType));
                }

                if (metadata.getDefaultValue() != null && !Bridge.Reflection.isInstanceOfType(metadata.getDefaultValue(), propertyType)) {
                    metadata.setDefaultValue(System.Windows.DependencyProperty.convertDefaultValue(key, metadata.getDefaultValue(), propertyType));
                }

                var property = new System.Windows.DependencyProperty(key, propertyType, metadata, validateValueCallback, isAttached, isReadOnly);

                if (!property.isValidValue(metadata.getDefaultValue())) {
                    throw new Granular.Exception("Default value validation of dependency property \"{0}.{1}\" failed", [Bridge.Reflection.getTypeName(key.getOwner()), key.getName()]);
                }

                System.Windows.DependencyProperty.addRegisteredProperty(key, property);

                return property;
            },
            register: function (name, propertyType, ownerType, metadata, validateValueCallback) {
                if (metadata === void 0) { metadata = null; }
                if (validateValueCallback === void 0) { validateValueCallback = null; }
                return System.Windows.DependencyProperty.register$1(new System.Windows.DependencyProperty.DependencyPropertyHashKey(ownerType, name), propertyType, metadata, validateValueCallback, false, false);
            },
            registerAttached: function (name, propertyType, ownerType, metadata, validateValueCallback) {
                if (metadata === void 0) { metadata = null; }
                if (validateValueCallback === void 0) { validateValueCallback = null; }
                return System.Windows.DependencyProperty.register$1(new System.Windows.DependencyProperty.DependencyPropertyHashKey(ownerType, name), propertyType, metadata, validateValueCallback, true, false);
            },
            registerReadOnly: function (name, propertyType, ownerType, metadata, validateValueCallback) {
                if (metadata === void 0) { metadata = null; }
                if (validateValueCallback === void 0) { validateValueCallback = null; }
                var hashKey = new System.Windows.DependencyProperty.DependencyPropertyHashKey(ownerType, name);
                var readOnlyKey = new System.Windows.DependencyPropertyKey(System.Windows.DependencyProperty.register$1(hashKey, propertyType, metadata, validateValueCallback, false, true));
                System.Windows.DependencyProperty.registeredReadOnlyPropertiesKey.add(hashKey, readOnlyKey);
                return readOnlyKey;
            },
            registerAttachedReadOnly: function (name, propertyType, ownerType, metadata, validateValueCallback) {
                if (metadata === void 0) { metadata = null; }
                if (validateValueCallback === void 0) { validateValueCallback = null; }
                var key = new System.Windows.DependencyProperty.DependencyPropertyHashKey(ownerType, name);
                var readOnlyKey = new System.Windows.DependencyPropertyKey(System.Windows.DependencyProperty.register$1(key, propertyType, metadata, validateValueCallback, true, true));
                System.Windows.DependencyProperty.registeredReadOnlyPropertiesKey.add(key, readOnlyKey);
                return readOnlyKey;
            },
            isValidReadOnlyKey: function (key) {
                var registeredKey = { };
                return System.Windows.DependencyProperty.registeredReadOnlyPropertiesKey.tryGetValue(key.getDependencyProperty().hashKey, registeredKey) && Bridge.referenceEquals(registeredKey.v, key);
            },
            isValidType: function (value, propertyType) {
                return value == null ? !System.TypeExtensions.getIsValueType(propertyType) || (propertyType.$genericTypeDefinition !== undefined) && Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(propertyType), System.Nullable$1) : Bridge.Reflection.isInstanceOfType(value, propertyType);
            },
            convertDefaultValue: function (key, defaultValue, propertyType) {
                try {
                    return Granular.Compatibility.Convert.changeType(defaultValue, propertyType);
                }
                catch (e) {
                    e = System.Exception.create(e);
                    throw new Granular.Exception("Dependency property \"{0}.{1}\" default value \"{2}\" cannot be converted to \"{3}\" ({4})", [Bridge.Reflection.getTypeName(key.getOwner()), key.getName(), defaultValue, propertyType, e.getMessage()]);
                }
            },
            addRegisteredProperty: function (key, dependencyProperty) {
                System.Windows.DependencyProperty.verifyNotRegistered(key, dependencyProperty);
                System.Windows.DependencyProperty.registeredProperties.add(key, dependencyProperty);
            },
            verifyNotRegistered: function (key, dependencyProperty) {
                var registeredDependencyProperty = { };
                if (System.Windows.DependencyProperty.registeredProperties.tryGetValue(key, registeredDependencyProperty)) {
                    throw new Granular.Exception("Can't register dependency property \"{0}\", Type \"{1}\" already has a dependency property with the same name \"{2}\"", [dependencyProperty, Bridge.Reflection.getTypeName(key.getOwner()), registeredDependencyProperty.v]);
                }
            },
            getProperty: function (containingType, propertyName) {
                var $t;
                var dependencyProperty = { };

                while (containingType != null && !Bridge.referenceEquals(containingType, System.Windows.DependencyObject)) {
                    ($t=System.TypeExtensions.getTypeHandle(containingType), $t.$staticInit && $t.$staticInit());

                    if (System.Windows.DependencyProperty.registeredProperties.tryGetValue(new System.Windows.DependencyProperty.DependencyPropertyHashKey(containingType, propertyName), dependencyProperty)) {
                        return dependencyProperty.v;
                    }

                    containingType = Bridge.Reflection.getBaseType(containingType);
                }

                return null;
            }
        },
        hashKey: null,
        typeMetadata: null,
        ownerMetadata: null,
        isMetadataOverridden: false,
        hashCode: 0,
        typeMetadataCache: null,
        typeContainsCache: null,
        orderedTypeMetadataCache: null,
        config: {
            properties: {
                Name: null,
                OwnerType: null,
                PropertyType: null,
                ValidateValueCallback: null,
                IsReadOnly: false,
                Inherits: false,
                IsAttached: false,
                StringKey: null
            }
        },
        ctor: function (hashKey, propertyType, metadata, validateValueCallback, isAttached, isReadOnly) {
            this.$initialize();
            this.hashKey = hashKey;
            this.setName(hashKey.getName());
            this.setOwnerType(hashKey.getOwner());
            this.setPropertyType(propertyType);
            this.setValidateValueCallback(validateValueCallback);
            this.setIsReadOnly(isReadOnly);
            this.setInherits(metadata.getInherits());
            this.setStringKey(hashKey.getStringKey());
            this.hashCode = hashKey.getHashCode();

            this.ownerMetadata = metadata;
            this.setIsAttached(isAttached);

            this.typeMetadata = new (Granular.Collections.ConvertedStringDictionary$2(Function,System.Windows.PropertyMetadata))($asm.$.System.Windows.DependencyProperty.f2);
            this.typeMetadata.Granular$Collections$IMinimalDictionary$2$Function$System$Windows$PropertyMetadata$add(this.getOwnerType(), this.ownerMetadata);

            this.typeMetadataCache = Granular.Collections.CacheDictionary$2(Function,System.Windows.PropertyMetadata).createUsingStringKeys(Bridge.fn.cacheBind(this, this.resolveTypeMetadata), $asm.$.System.Windows.DependencyProperty.f2);
            this.typeContainsCache = Granular.Collections.CacheDictionary$2(Function,Boolean).createUsingStringKeys(Bridge.fn.cacheBind(this, this.resolveTypeContains), $asm.$.System.Windows.DependencyProperty.f2);
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("{0}.{1}", Bridge.Reflection.getTypeFullName(this.getOwnerType()), this.getName());
        },
        isValidValue: function (value) {
            return System.Windows.DependencyProperty.isValidType(value, this.getPropertyType()) && (Bridge.staticEquals(this.getValidateValueCallback(), null) || this.getValidateValueCallback()(value));
        },
        overrideMetadata: function (forType, metadata) {
            if (this.typeMetadata.Granular$Collections$IMinimalDictionary$2$Function$System$Windows$PropertyMetadata$containsKey(forType)) {
                throw new Granular.Exception("DependencyProperty \"{0}\" already contains metadata for type \"{1}\"", [this, Bridge.Reflection.getTypeName(forType)]);
            }

            if (metadata.getDefaultValue() == null) {
                metadata.setDefaultValue(this.ownerMetadata.getDefaultValue());
            }

            if (Bridge.staticEquals(metadata.getCoerceValueCallback(), null)) {
                metadata.setCoerceValueCallback(this.ownerMetadata.getCoerceValueCallback());
            }

            if (this.getInherits() !== metadata.getInherits()) {
                throw new Granular.Exception("Overriding inheritance behavior is not supported, Overrides of \"{0}\" must declare \"inherits: {1}\"", [this, this.getInherits()]);
            }

            if (this.getInherits()) {
                if (metadata.getDefaultValue() != null && !Bridge.referenceEquals(metadata.getDefaultValue(), this.ownerMetadata.getDefaultValue())) {
                    throw new Granular.Exception("Overriding inherited properties metadata with different default value is not supported, Overrides of \"{0}\" cannot set a different default value other than \"{1}\"", [this, this.ownerMetadata.getDefaultValue()]);
                }

                metadata.setDefaultValue(this.ownerMetadata.getDefaultValue());
            }

            this.typeMetadata.Granular$Collections$IMinimalDictionary$2$Function$System$Windows$PropertyMetadata$add(forType, metadata);

            this.typeMetadataCache.clear();
            this.orderedTypeMetadataCache = null;

            this.isMetadataOverridden = true;
        },
        addOwner: function (ownerType, metadata) {
            if (metadata === void 0) { metadata = null; }
            System.Windows.DependencyProperty.addRegisteredProperty(new System.Windows.DependencyProperty.DependencyPropertyHashKey(ownerType, this.getName()), this);

            if (metadata != null) {
                this.overrideMetadata(ownerType, metadata);
            }

            this.typeContainsCache.clear();

            return this;
        },
        getMetadata: function (type) {
            if (!this.isMetadataOverridden) {
                return this.ownerMetadata;
            }

            return this.typeMetadataCache.getValue(type);
        },
        resolveTypeMetadata: function (type) {
            var closestBaseType = System.Linq.Enumerable.from(this.getOrderedTypeMetadata()).where(function (baseType) {
                    return Bridge.referenceEquals(type, baseType) || (type.prototype instanceof baseType);
                }).lastOrDefault(null, null);
            return closestBaseType != null ? Granular.Collections.MinimalDictionaryExtensions.getValue(Function, System.Windows.PropertyMetadata, this.typeMetadata, closestBaseType) : this.ownerMetadata;
        },
        isContainedBy: function (type) {
            return this.typeContainsCache.getValue(type);
        },
        resolveTypeContains: function (type) {
            return System.Linq.Enumerable.from(this.typeMetadata.Granular$Collections$IMinimalDictionary$2$Function$System$Windows$PropertyMetadata$getKeys()).any(function (baseType) {
                    return Bridge.referenceEquals(type, baseType) || (type.prototype instanceof baseType);
                });
        },
        raiseMetadataPropertyChangedCallback: function (dependencyObject, e) {
            var $t;
            // metadata's changed callback will be raised for
            // - the original owner metadata
            // - every attached property metadata
            // - every metadata that the currently changed object derives from its owner type

            $t = Bridge.getEnumerator(this.getOrderedTypeMetadata(), Function);
            while ($t.moveNext()) {
                var type = $t.getCurrent();
                if (!Bridge.Reflection.isInstanceOfType(dependencyObject, type) && (!this.getIsAttached() || !Bridge.referenceEquals(type, this.getOwnerType()))) {
                    continue;
                }

                var propertyMetadata = Granular.Collections.MinimalDictionaryExtensions.getValue(Function, System.Windows.PropertyMetadata, this.typeMetadata, type);

                if (!Bridge.staticEquals(propertyMetadata.getPropertyChangedCallback(), null)) {
                    propertyMetadata.getPropertyChangedCallback()(dependencyObject, e);
                }
            }
        },
        getOrderedTypeMetadata: function () {
            if (this.orderedTypeMetadataCache == null) {
                // topological sorting, with the original owner type first, and each base class before all of its subclasses
                var orderedTypes = Bridge.fn.bind(this, $asm.$.System.Windows.DependencyProperty.f3)(new (System.Collections.Generic.List$1(Function))());
                var remainingTypes = System.Linq.Enumerable.from(this.typeMetadata.Granular$Collections$IMinimalDictionary$2$Function$System$Windows$PropertyMetadata$getKeys()).where(Bridge.fn.bind(this, $asm.$.System.Windows.DependencyProperty.f4)).toList(Function);

                while (System.Linq.Enumerable.from(remainingTypes).any()) {
                    (function () {
                        var nextType = System.Linq.Enumerable.from(remainingTypes).firstOrDefault(function (type1) {
                                return System.Linq.Enumerable.from(remainingTypes).all(function (type2) {
                                        return !(type1.prototype instanceof type2);
                                    });
                            }, null);
                        remainingTypes.remove(nextType);
                        orderedTypes.add(nextType);
                    }).call(this);
                }

                this.orderedTypeMetadataCache = orderedTypes;
            }

            return this.orderedTypeMetadataCache;
        }
    });

    Bridge.ns("System.Windows.DependencyProperty", $asm.$);

    Bridge.apply($asm.$.System.Windows.DependencyProperty, {
        f1: function (hashKey) {
            return hashKey.getStringKey();
        },
        f2: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        },
        f3: function (_o1) {
            _o1.add(this.getOwnerType());
            return _o1;
        },
        f4: function (type) {
            return !Bridge.referenceEquals(type, this.getOwnerType());
        }
    });

    Bridge.define("System.Windows.DependencyProperty.DependencyPropertyHashKey", {
        config: {
            properties: {
                Owner: null,
                Name: null,
                StringKey: null
            }
        },
        ctor: function (owner, name) {
            this.$initialize();
            this.setOwner(owner);
            this.setName(name);
            this.setStringKey(System.String.concat(Bridge.Reflection.getTypeFullName(owner), ",", name));
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.DependencyProperty.DependencyPropertyHashKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getOwner(), other.getOwner()) && Bridge.equals(this.getName(), other.getName());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getStringKey());
        },
        toString: function () {
            return System.String.format("{0}.{1}", Bridge.Reflection.getTypeFullName(this.getOwner()), this.getName());
        }
    });

    Bridge.define("System.Windows.DependencyPropertyChangedEventArgs", {
        config: {
            properties: {
                Property: null,
                NewValue: null,
                OldValue: null,
                IsSubPropertyChange: false
            }
        },
        $ctor1: function (property, oldValue, newValue) {
            System.Windows.DependencyPropertyChangedEventArgs.$ctor2.call(this, property, oldValue, newValue, false);
            //
        },
        ctor: function (property, value) {
            System.Windows.DependencyPropertyChangedEventArgs.$ctor2.call(this, property, value, value, true);
            //
        },
        $ctor2: function (property, oldValue, newValue, isSubPropertyChange) {
            this.$initialize();
            this.setProperty(property);
            this.setOldValue(oldValue);
            this.setNewValue(newValue);
            this.setIsSubPropertyChange(isSubPropertyChange);
        }
    });

    Bridge.define("System.Windows.DependencyPropertyChangedEventHandlerExtensions", {
        statics: {
            raise: function (handler, sender, e) {
                if (!Bridge.staticEquals(handler, null)) {
                    handler(sender, e);
                }
            }
        }
    });

    Bridge.define("System.Windows.DependencyPropertyKey", {
        config: {
            properties: {
                DependencyProperty: null
            }
        },
        ctor: function (dependencyProperty) {
            this.$initialize();
            this.setDependencyProperty(dependencyProperty);
        }
    });

    Bridge.define("System.Windows.IPropertyPathElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IDependencyPropertyValueEntry", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.DependencyPropertyValueEntryExtensions", {
        statics: {
            getBaseValue: function (entry, flattened) {
                return entry.System$Windows$IDependencyPropertyValueEntry$getValue$1(entry.System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority(), flattened);
            },
            getBaseValue$1: function (entry, priority, flattened) {
                return entry.System$Windows$IDependencyPropertyValueEntry$getValue$1(priority, flattened);
            },
            setBaseValue: function (entry, priority, value) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(priority, value);
            },
            clearBaseValue: function (entry, priority) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(priority, System.Windows.Data.ObservableValue.unsetValue);
            },
            getCurrentValue: function (entry, flattened) {
                return entry.System$Windows$IDependencyPropertyValueEntry$getValue$1(System.Windows.DependencyPropertyValueEntry.CurrentValuePriority, flattened);
            },
            setCurrentValue: function (entry, value) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(System.Windows.DependencyPropertyValueEntry.CurrentValuePriority, value);
            },
            clearCurrentValue: function (entry) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(System.Windows.DependencyPropertyValueEntry.CurrentValuePriority, System.Windows.Data.ObservableValue.unsetValue);
            },
            getAnimationValue: function (entry, flattened) {
                return entry.System$Windows$IDependencyPropertyValueEntry$getValue$1(System.Windows.DependencyPropertyValueEntry.AnimationValuePriority, flattened);
            },
            setAnimationValue: function (entry, value) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(System.Windows.DependencyPropertyValueEntry.AnimationValuePriority, value);
            },
            clearAnimationValue: function (entry) {
                entry.System$Windows$IDependencyPropertyValueEntry$setValue(System.Windows.DependencyPropertyValueEntry.AnimationValuePriority, System.Windows.Data.ObservableValue.unsetValue);
            }
        }
    });

    Bridge.define("System.Windows.Duration", {
        statics: {
            automatic: null,
            forever: null,
            config: {
                init: function () {
                    this.automatic = new System.Windows.Duration.$ctor1(System.Windows.Duration.DurationType.Automatic, System.TimeSpan.zero);
                    this.forever = new System.Windows.Duration.$ctor1(System.Windows.Duration.DurationType.Forever, System.TimeSpan.zero);
                }
            },
            parse: function (value) {
                value = value.trim();

                if (Bridge.referenceEquals(value, "Automatic")) {
                    return System.Windows.Duration.automatic;
                }

                if (Bridge.referenceEquals(value, "Forever")) {
                    return System.Windows.Duration.forever;
                }

                var timeSpan = { };
                if (Granular.Compatibility.TimeSpan.tryParse(value, timeSpan)) {
                    return new System.Windows.Duration.ctor(timeSpan.v);
                }

                throw new Granular.Exception("Can't parse Duration value \"{0}\"", [value]);
            }
        },
        durationType: 0,
        config: {
            properties: {
                TimeSpan: null
            },
            init: function () {
                this.TimeSpan = new System.TimeSpan();
            }
        },
        ctor: function (timeSpan) {
            System.Windows.Duration.$ctor1.call(this, System.Windows.Duration.DurationType.TimeSpan, timeSpan);
            //
        },
        $ctor1: function (durationType, timeSpan) {
            this.$initialize();
            this.setTimeSpan(timeSpan);
            this.durationType = durationType;
        },
        getIsAutomatic: function () {
            return this.durationType === System.Windows.Duration.DurationType.Automatic;
        },
        getIsForever: function () {
            return this.durationType === System.Windows.Duration.DurationType.Forever;
        },
        getHasTimeSpan: function () {
            return this.durationType === System.Windows.Duration.DurationType.TimeSpan;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Duration);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && this.durationType === other.durationType && System.TimeSpan.eq(this.getTimeSpan(), other.getTimeSpan());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.durationType) ^ Bridge.getHashCode(this.getTimeSpan());
        },
        toString: function () {
            if (this.getIsAutomatic()) {
                return "Automatic";
            }

            if (this.getIsForever()) {
                return "Forever";
            }

            return this.getTimeSpan().toString();
        }
    });

    Bridge.define("System.Windows.Duration.DurationType", {
        $kind: "enum",
        statics: {
            Automatic: 0,
            TimeSpan: 1,
            Forever: 2
        }
    });

    Bridge.define("System.Windows.EmbeddedResourceLoader", {
        statics: {
            resourceUriRegex: null,
            ResourceUriAssemblyNameGroupIndex: 1,
            ResourceUriPathGroupIndex: 2,
            resourceDataCache: null,
            resourceElementCache: null,
            config: {
                init: function () {
                    this.resourceUriRegex = new RegExp("/([^;]*);component/(.*)");
                    this.resourceDataCache = Granular.Collections.CacheDictionary$2(System.Uri,System.Array.type(System.Byte)).createUsingStringKeys(System.Windows.EmbeddedResourceLoader.resolveResourceData, $asm.$.System.Windows.EmbeddedResourceLoader.f1);
                    this.resourceElementCache = Granular.Collections.CacheDictionary$2(System.Uri,Object).createUsingStringKeys(System.Windows.EmbeddedResourceLoader.resolveResourceElement, $asm.$.System.Windows.EmbeddedResourceLoader.f1);
                }
            },
            loadResourceData: function (resourceUri) {
                System.Windows.EmbeddedResourceLoader.verifyResourceUri(resourceUri);

                return System.Windows.EmbeddedResourceLoader.resourceDataCache.getValue(resourceUri);
            },
            resolveResourceData: function (resourceUri) {
                var assemblyName = { };
                var resourcePath = { };
                if (!System.Windows.EmbeddedResourceLoader.tryParseAbsolutePath(System.UriExtensions.getAbsolutePath(resourceUri), assemblyName, resourcePath)) {
                    throw new Granular.Exception("Resource \"{0}\" absolute path is invalid", [System.UriExtensions.getAbsoluteUri(resourceUri)]);
                }

                var assembly = System.Linq.Enumerable.from(Object.keys(System.Reflection.Assembly.assemblies).map(function(n) { return System.Reflection.Assembly.assemblies[n]; })).where(function (a) {
                        return Bridge.referenceEquals(System.AssemblyExtensions.getName(a).getName(), assemblyName.v);
                    }).firstOrDefault(null, null);

                if (assembly == null) {
                    assembly = Bridge.Reflection.load(assemblyName.v);
                }

                var resourceName = System.String.format("{0}.{1}", assemblyName.v, System.String.replaceAll(System.String.trimStart(resourcePath.v, [47]), String.fromCharCode(47), String.fromCharCode(46)));

                var resourceData = assembly != null ? assembly.getManifestResourceData(resourceName) : null;

                if (resourceData == null) {
                    throw new Granular.Exception("Resource \"{0}\" was not found", [System.UriExtensions.getAbsoluteUri(resourceUri)]);
                }

                return resourceData;
            },
            loadResourceElement: function (resourceUri) {
                System.Windows.EmbeddedResourceLoader.verifyResourceUri(resourceUri);

                return System.Windows.EmbeddedResourceLoader.resourceElementCache.getValue(resourceUri);
            },
            resolveResourceElement: function (resourceUri) {
                var resourceString = Granular.Compatibility.String.fromByteArray(System.Windows.EmbeddedResourceLoader.resourceDataCache.getValue(resourceUri));
                return System.Windows.Markup.XamlLoader.load(System.Windows.Markup.XamlParser.parse(resourceString, resourceUri));
            },
            tryParseAbsolutePath: function (absolutePath, assemblyName, resourcePath) {
                var matches = System.Windows.EmbeddedResourceLoader.resourceUriRegex.exec(absolutePath);

                if (matches == null) {
                    assemblyName.v = null;
                    resourcePath.v = null;
                    return false;
                }

                assemblyName.v = matches[System.Windows.EmbeddedResourceLoader.ResourceUriAssemblyNameGroupIndex];
                resourcePath.v = matches[System.Windows.EmbeddedResourceLoader.ResourceUriPathGroupIndex];
                return true;
            },
            verifyResourceUri: function (resourceUri) {
                if (!System.UriExtensions.getIsAbsoluteUri(resourceUri)) {
                    throw new Granular.Exception("Resource uri \"{0}\" must be an absolute uri", [System.UriExtensions.getOriginalString(resourceUri)]);
                }

                if (!Bridge.referenceEquals(System.UriExtensions.getScheme(resourceUri), "pack")) {
                    throw new Granular.Exception("Resource uri \"{0}\" must be a pack uri", [System.UriExtensions.getAbsoluteUri(resourceUri)]);
                }
            }
        }
    });

    Bridge.ns("System.Windows.EmbeddedResourceLoader", $asm.$);

    Bridge.apply($asm.$.System.Windows.EmbeddedResourceLoader, {
        f1: function (uri) {
            return System.UriExtensions.getAbsoluteUri(uri);
        }
    });

    Bridge.define("System.Windows.EmbeddedResourceLoader.UriEqualityComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Uri)],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.EmbeddedResourceLoader.UriEqualityComparer();
                }
            }
        },
        config: {
            alias: [
            "equals2", "System$Collections$Generic$IEqualityComparer$1$System$Uri$equals2",
            "getHashCode2", "System$Collections$Generic$IEqualityComparer$1$System$Uri$getHashCode2"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        equals2: function (x, y) {
            return Bridge.equals(System.UriExtensions.getAbsoluteUri(x), System.UriExtensions.getAbsoluteUri(y));
        },
        getHashCode2: function (obj) {
            return Bridge.getHashCode(System.UriExtensions.getAbsoluteUri(obj));
        }
    });

    Bridge.define("System.Windows.EventManager", {
        statics: {
            registeredEvents: null,
            config: {
                init: function () {
                    this.registeredEvents = new (Granular.Collections.ConvertedStringDictionary$2(System.Windows.EventManager.RoutedEventHashKey,System.Windows.RoutedEvent))($asm.$.System.Windows.EventManager.f1);
                }
            },
            registerRoutedEvent: function (name, routingStrategy, handlerType, ownerType) {
                var key = new System.Windows.EventManager.RoutedEventHashKey(ownerType, name);

                if (System.Windows.EventManager.registeredEvents.containsKey(key)) {
                    throw new Granular.Exception("RoutedEvent {0}.{1} is already registered", [Bridge.Reflection.getTypeName(ownerType), name]);
                }

                var routedEvent = new System.Windows.RoutedEvent(name, routingStrategy, handlerType, ownerType);

                System.Windows.EventManager.registeredEvents.add(key, routedEvent);

                return routedEvent;
            },
            addOwner: function (routedEvent, ownerType) {
                var key = new System.Windows.EventManager.RoutedEventHashKey(ownerType, routedEvent.getName());

                if (System.Windows.EventManager.registeredEvents.containsKey(key)) {
                    throw new Granular.Exception("Type \"{0}\" is already an owner of RoutedEvent \"{1}\"", [Bridge.Reflection.getTypeName(key.getOwner()), routedEvent]);
                }

                System.Windows.EventManager.registeredEvents.add(key, routedEvent);
            },
            registerClassHandler: function (classType, routedEvent, handler, handledEventsToo) {
                routedEvent.registerClassHandler(classType, new System.Windows.RoutedEventHandlerItem(handler, handledEventsToo));
            },
            getEvent: function (containingType, eventName) {
                var $t;
                var routedEvent = { };

                while (containingType != null && !Bridge.referenceEquals(containingType, System.Windows.Media.Visual)) {
                    ($t=System.TypeExtensions.getTypeHandle(containingType), $t.$staticInit && $t.$staticInit());

                    if (System.Windows.EventManager.registeredEvents.tryGetValue(new System.Windows.EventManager.RoutedEventHashKey(containingType, eventName), routedEvent)) {
                        return routedEvent.v;
                    }

                    containingType = Bridge.Reflection.getBaseType(containingType);
                }

                return null;
            }
        }
    });

    Bridge.ns("System.Windows.EventManager", $asm.$);

    Bridge.apply($asm.$.System.Windows.EventManager, {
        f1: function (hashKey) {
            return hashKey.getKeyString();
        }
    });

    Bridge.define("System.Windows.EventManager.RoutedEventHashKey", {
        config: {
            properties: {
                Owner: null,
                Name: null,
                KeyString: null
            }
        },
        ctor: function (owner, name) {
            this.$initialize();
            this.setOwner(owner);
            this.setName(name);
            this.setKeyString(System.String.concat(Bridge.Reflection.getTypeFullName(owner), ",", name));
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.EventManager.RoutedEventHashKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getOwner(), other.getOwner()) && Bridge.equals(this.getName(), other.getName());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getKeyString());
        },
        toString: function () {
            return System.String.format("{0}.{1}", Bridge.Reflection.getTypeFullName(this.getOwner()), this.getName());
        }
    });

    Bridge.define("System.Windows.EventRoute", {
        routedEvent: null,
        items: null,
        ctor: function (routedEvent, items) {
            this.$initialize();
            this.routedEvent = routedEvent;
            this.items = items;
        },
        invokeHandlers: function (e) {
            var $t;
            $t = Bridge.getEnumerator(this.items, System.Windows.EventRouteItem);
            while ($t.moveNext()) {
                var item = $t.getCurrent();
                item.invokeHandler(e);
            }
        }
    });

    Bridge.define("System.Windows.EventRouteItem", {
        handler: null,
        originalSource: null,
        source: null,
        target: null,
        ctor: function (handler, originalSource, source, target) {
            this.$initialize();
            this.handler = handler;
            this.originalSource = originalSource;
            this.source = source;
            this.target = target;
        },
        invokeHandler: function (e) {
            if (!e.getHandled() || this.handler.getHandledEventsToo()) {
                e.setSource(this.source);
                e.invokeEventHandler(this.handler.getHandler(), this.target);
            }
        }
    });

    Bridge.define("System.Windows.ITriggerAction", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IEventTriggerCondition", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.FlowDirection", {
        $kind: "enum",
        statics: {
            LeftToRight: 0,
            TopDown: 1,
            RightToLeft: 2,
            BottomUp: 3
        }
    });

    Bridge.define("System.Windows.FontStretch", {
        $kind: "enum",
        statics: {
            Normal: 0,
            Condensed: 1,
            Expanded: 2,
            ExtraCondensed: 3,
            ExtraExpanded: 4,
            Medium: 5,
            SemiCondensed: 6,
            SemiExpanded: 7,
            UltraCondensed: 8,
            UltraExpanded: 9
        }
    });

    Bridge.define("System.Windows.FontStyle", {
        $kind: "enum",
        statics: {
            Normal: 0,
            Italic: 1,
            Oblique: 2
        }
    });

    Bridge.define("System.Windows.FontWeight", {
        $kind: "enum",
        statics: {
            Normal: 0,
            Black: 1,
            Bold: 2,
            DemiBold: 3,
            ExtraBlack: 4,
            ExtraBold: 5,
            ExtraLight: 6,
            Heavy: 7,
            Light: 8,
            Medium: 9,
            Regular: 10,
            SemiBold: 11,
            Thin: 12,
            UltraBlack: 13,
            UltraBold: 14,
            UltraLight: 15
        }
    });

    Bridge.define("System.Windows.IFrameworkElementFactory", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.PropertyMetadata", {
        config: {
            properties: {
                DefaultValue: null,
                PropertyChangedCallback: null,
                CoerceValueCallback: null,
                Inherits: false
            }
        },
        ctor: function () {
            System.Windows.PropertyMetadata.$ctor3.call(this, null, null, null);
            //
        },
        $ctor1: function (defaultValue) {
            System.Windows.PropertyMetadata.$ctor3.call(this, defaultValue, null, null);
            //
        },
        $ctor4: function (propertyChangedCallback) {
            System.Windows.PropertyMetadata.$ctor3.call(this, null, propertyChangedCallback, null);
            //
        },
        $ctor2: function (defaultValue, propertyChangedCallback) {
            System.Windows.PropertyMetadata.$ctor3.call(this, defaultValue, propertyChangedCallback, null);
            //
        },
        $ctor3: function (defaultValue, propertyChangedCallback, coerceValueCallback) {
            this.$initialize();
            this.setDefaultValue(defaultValue);
            this.setPropertyChangedCallback(propertyChangedCallback);
            this.setCoerceValueCallback(coerceValueCallback);
        }
    });

    Bridge.define("System.Windows.FrameworkPropertyMetadataOptions", {
        $kind: "enum",
        statics: {
            None: 0,
            AffectsMeasure: 1,
            AffectsArrange: 2,
            AffectsParentMeasure: 4,
            AffectsParentArrange: 8,
            Inherits: 32,
            BindsTwoWayByDefault: 256,
            AffectsVisualState: 2048
        }
    });

    Bridge.define("System.Windows.FrameworkTemplateExtensions", {
        statics: {
            findName: function (frameworkTemplate, name, templatedParent) {
                return System.Windows.NameScope.getNameScope(templatedParent.getTemplateChild()).System$Windows$INameScope$findName(name);
            }
        }
    });

    Bridge.define("System.Windows.GridLength", {
        statics: {
            auto: null,
            star: null,
            config: {
                init: function () {
                    this.auto = new System.Windows.GridLength(System.Windows.GridUnitType.Auto, 0);
                    this.star = new System.Windows.GridLength(System.Windows.GridUnitType.Star, 1);
                }
            },
            fromPixles: function (pixels) {
                return new System.Windows.GridLength(System.Windows.GridUnitType.Pixel, pixels);
            },
            fromStars: function (stars) {
                return new System.Windows.GridLength(System.Windows.GridUnitType.Star, stars);
            }
        },
        config: {
            properties: {
                GridUnitType: 0,
                Value: 0
            }
        },
        ctor: function (gridUnitType, value) {
            this.$initialize();
            this.setGridUnitType(gridUnitType);
            this.setValue(value);
        },
        getIsAuto: function () {
            return this.getGridUnitType() === System.Windows.GridUnitType.Auto;
        },
        getIsAbsolute: function () {
            return this.getGridUnitType() === System.Windows.GridUnitType.Pixel;
        },
        getIsStar: function () {
            return this.getGridUnitType() === System.Windows.GridUnitType.Star;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.GridLength);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && this.getGridUnitType() === other.getGridUnitType() && Granular.Compatibility.EqualityComparer.double.equals2(this.getValue(), other.getValue());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getGridUnitType()) ^ Bridge.getHashCode(this.getValue());
        },
        toString: function () {
            return this.getIsAuto() ? "Auto" : System.String.format("{0}{1}", this.getValue(), this.getIsAbsolute() ? "px" : "*");
        }
    });

    Bridge.define("System.Windows.GridUnitType", {
        $kind: "enum",
        statics: {
            Auto: 0,
            Pixel: 1,
            Star: 2
        }
    });

    Bridge.define("System.Windows.HorizontalAlignment", {
        $kind: "enum",
        statics: {
            Left: 0,
            Center: 1,
            Right: 2,
            Stretch: 3
        }
    });

    Bridge.define("System.Windows.IApplicationHost", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IInputElementExtensions", {
        statics: {
            raiseEvents: function (element, previewEventArgs, eventArgs) {
                element.System$Windows$IInputElement$raiseEvent(previewEventArgs);

                eventArgs.setHandled(previewEventArgs.getHandled());
                element.System$Windows$IInputElement$raiseEvent(eventArgs);

                return eventArgs.getHandled();
            }
        }
    });

    Bridge.define("System.Windows.INameScope", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(String,Object))],
        $kind: "interface"
    });

    Bridge.define("System.Windows.Input.Cursor", {
        config: {
            properties: {
                CursorType: 0,
                ImageSource: null,
                Hotspot: null
            }
        },
        ctor: function (cursorType) {
            System.Windows.Input.Cursor.$ctor1.call(this, cursorType, null, null);
            //
        },
        $ctor2: function (imageSource, hotspot) {
            if (hotspot === void 0) { hotspot = null; }

            System.Windows.Input.Cursor.$ctor1.call(this, System.Windows.Input.CursorType.None, imageSource, hotspot);
            //
        },
        $ctor1: function (cursorType, imageSource, hotspot) {
            this.$initialize();
            this.setCursorType(cursorType);
            this.setImageSource(imageSource);
            this.setHotspot(hotspot);
        },
        toString: function () {
            var $t;
            return System.String.format("Cursor({0})", this.getImageSource() != null ? this.getImageSource().toString() : ($t=this.getCursorType(), System.Enum.toString(System.Windows.Input.CursorType, $t)));
        }
    });

    Bridge.define("System.Windows.Input.Cursors", {
        statics: {
            cursors: null,
            config: {
                init: function () {
                    this.cursors = Granular.Collections.CacheDictionary$2(System.Windows.Input.CursorType,System.Windows.Input.Cursor).create($asm.$.System.Windows.Input.Cursors.f1);
                }
            },
            getNone: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.None);
            },
            getNo: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.No);
            },
            getArrow: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Arrow);
            },
            getAppStarting: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.AppStarting);
            },
            getCross: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Cross);
            },
            getHelp: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Help);
            },
            getIBeam: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.IBeam);
            },
            getSizeAll: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.SizeAll);
            },
            getSizeNESW: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.SizeNESW);
            },
            getSizeNS: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.SizeNS);
            },
            getSizeNWSE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.SizeNWSE);
            },
            getSizeWE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.SizeWE);
            },
            getUpArrow: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.UpArrow);
            },
            getWait: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Wait);
            },
            getHand: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Hand);
            },
            getPen: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.Pen);
            },
            getScrollNS: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollNS);
            },
            getScrollWE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollWE);
            },
            getScrollAll: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollAll);
            },
            getScrollN: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollN);
            },
            getScrollS: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollS);
            },
            getScrollW: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollW);
            },
            getScrollE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollE);
            },
            getScrollNW: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollNW);
            },
            getScrollNE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollNE);
            },
            getScrollSW: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollSW);
            },
            getScrollSE: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ScrollSE);
            },
            getArrowCD: function () {
                return System.Windows.Input.Cursors.cursors.getValue(System.Windows.Input.CursorType.ArrowCD);
            }
        }
    });

    Bridge.ns("System.Windows.Input.Cursors", $asm.$);

    Bridge.apply($asm.$.System.Windows.Input.Cursors, {
        f1: function (cursorType) {
            return new System.Windows.Input.Cursor.ctor(cursorType);
        }
    });

    Bridge.define("System.Windows.Input.CursorType", {
        $kind: "enum",
        statics: {
            None: 0,
            No: 1,
            Arrow: 2,
            AppStarting: 3,
            Cross: 4,
            Help: 5,
            IBeam: 6,
            SizeAll: 7,
            SizeNESW: 8,
            SizeNS: 9,
            SizeNWSE: 10,
            SizeWE: 11,
            UpArrow: 12,
            Wait: 13,
            Hand: 14,
            Pen: 15,
            ScrollNS: 16,
            ScrollWE: 17,
            ScrollAll: 18,
            ScrollN: 19,
            ScrollS: 20,
            ScrollW: 21,
            ScrollE: 22,
            ScrollNW: 23,
            ScrollNE: 24,
            ScrollSW: 25,
            ScrollSE: 26,
            ArrowCD: 27
        }
    });

    Bridge.define("System.Windows.Input.FocusManager", {
        statics: {
            gotFocusEvent: null,
            lostFocusEvent: null,
            focusedElementProperty: null,
            isFocusScopeProperty: null,
            config: {
                init: function () {
                    this.gotFocusEvent = System.Windows.EventManager.registerRoutedEvent("GotFocus", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.FocusManager);
                    this.lostFocusEvent = System.Windows.EventManager.registerRoutedEvent("LostFocus", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.FocusManager);
                    this.focusedElementProperty = System.Windows.DependencyProperty.registerAttached("FocusedElement", System.Windows.IInputElement, System.Windows.Input.FocusManager, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, System.Windows.Input.FocusManager.onFocusedElementChanged));
                    this.isFocusScopeProperty = System.Windows.DependencyProperty.registerAttached("IsFocusScope", Boolean, System.Windows.Input.FocusManager, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            getFocusedElement: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Input.FocusManager.focusedElementProperty), System.Windows.IInputElement);
            },
            setFocusedElement: function (obj, value) {
                obj.setValue(System.Windows.Input.FocusManager.focusedElementProperty, value);
            },
            getIsFocusScope: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.FocusManager.isFocusScopeProperty), Boolean));
            },
            setIsFocusScope: function (obj, value) {
                obj.setValue(System.Windows.Input.FocusManager.isFocusScopeProperty, value);
            },
            getFocusScope: function (element) {
                while (element != null && !System.Windows.Input.FocusManager.getIsFocusScope(element)) {
                    element = Bridge.cast((element.getLogicalParent() || element.getVisualParent()), System.Windows.UIElement);
                }

                return element;
            },
            focus: function (element) {
                if (!element.getFocusable()) {
                    return null;
                }

                var focusScope = System.Windows.Input.FocusManager.getFocusScope(element);

                if (focusScope != null) {
                    System.Windows.Input.FocusManager.setFocusedElement(focusScope, element);
                    return new Granular.Disposable(function () {
                        if (Bridge.referenceEquals(System.Windows.Input.FocusManager.getFocusedElement(focusScope), element)) {
                            System.Windows.Input.FocusManager.setFocusedElement(focusScope, null);
                        }
                    });
                }

                return null;
            },
            onFocusedElementChanged: function (d, e) {
                var oldElement = Bridge.cast(e.getOldValue(), System.Windows.FrameworkElement);
                var newElement = Bridge.cast(e.getNewValue(), System.Windows.FrameworkElement);

                if (oldElement != null) {
                    oldElement.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Input.FocusManager.lostFocusEvent, oldElement));
                }

                if (newElement != null) {
                    newElement.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Input.FocusManager.gotFocusEvent, newElement));
                }
            }
        }
    });

    Bridge.define("System.Windows.Input.FocusNavigationDirection", {
        $kind: "enum",
        statics: {
            Next: 0,
            Previous: 1,
            First: 2,
            Last: 3,
            Left: 4,
            Right: 5,
            Up: 6,
            Down: 7
        }
    });

    Bridge.define("System.Windows.Input.IInputDevice", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Input.Key", {
        $kind: "enum",
        statics: {
            None: 0,
            Cancel: 1,
            Back: 2,
            Tab: 3,
            LineFeed: 4,
            Clear: 5,
            Return: 6,
            Enter: 6,
            Pause: 7,
            CapsLock: 8,
            Capital: 8,
            HangulMode: 9,
            KanaMode: 9,
            JunjaMode: 10,
            FinalMode: 11,
            KanjiMode: 12,
            HanjaMode: 12,
            Escape: 13,
            ImeConvert: 14,
            ImeNonConvert: 15,
            ImeAccept: 16,
            ImeModeChange: 17,
            Space: 18,
            PageUp: 19,
            Prior: 19,
            PageDown: 20,
            Next: 20,
            End: 21,
            Home: 22,
            Left: 23,
            Up: 24,
            Right: 25,
            Down: 26,
            Select: 27,
            Print: 28,
            Execute: 29,
            Snapshot: 30,
            PrintScreen: 30,
            Insert: 31,
            Delete: 32,
            Help: 33,
            D0: 34,
            D1: 35,
            D2: 36,
            D3: 37,
            D4: 38,
            D5: 39,
            D6: 40,
            D7: 41,
            D8: 42,
            D9: 43,
            A: 44,
            B: 45,
            C: 46,
            D: 47,
            E: 48,
            F: 49,
            G: 50,
            H: 51,
            I: 52,
            J: 53,
            K: 54,
            L: 55,
            M: 56,
            N: 57,
            O: 58,
            P: 59,
            Q: 60,
            R: 61,
            S: 62,
            T: 63,
            U: 64,
            V: 65,
            W: 66,
            X: 67,
            Y: 68,
            Z: 69,
            LWin: 70,
            RWin: 71,
            Apps: 72,
            Sleep: 73,
            NumPad0: 74,
            NumPad1: 75,
            NumPad2: 76,
            NumPad3: 77,
            NumPad4: 78,
            NumPad5: 79,
            NumPad6: 80,
            NumPad7: 81,
            NumPad8: 82,
            NumPad9: 83,
            Multiply: 84,
            Add: 85,
            Separator: 86,
            Subtract: 87,
            Decimal: 88,
            Divide: 89,
            F1: 90,
            F2: 91,
            F3: 92,
            F4: 93,
            F5: 94,
            F6: 95,
            F7: 96,
            F8: 97,
            F9: 98,
            F10: 99,
            F11: 100,
            F12: 101,
            F13: 102,
            F14: 103,
            F15: 104,
            F16: 105,
            F17: 106,
            F18: 107,
            F19: 108,
            F20: 109,
            F21: 110,
            F22: 111,
            F23: 112,
            F24: 113,
            NumLock: 114,
            Scroll: 115,
            LeftShift: 116,
            RightShift: 117,
            LeftCtrl: 118,
            RightCtrl: 119,
            LeftAlt: 120,
            RightAlt: 121,
            BrowserBack: 122,
            BrowserForward: 123,
            BrowserRefresh: 124,
            BrowserStop: 125,
            BrowserSearch: 126,
            BrowserFavorites: 127,
            BrowserHome: 128,
            VolumeMute: 129,
            VolumeDown: 130,
            VolumeUp: 131,
            MediaNextTrack: 132,
            MediaPreviousTrack: 133,
            MediaStop: 134,
            MediaPlayPause: 135,
            LaunchMail: 136,
            SelectMedia: 137,
            LaunchApplication1: 138,
            LaunchApplication2: 139,
            OemSemicolon: 140,
            Oem1: 140,
            OemPlus: 141,
            OemComma: 142,
            OemMinus: 143,
            OemPeriod: 144,
            OemQuestion: 145,
            Oem2: 145,
            OemTilde: 146,
            Oem3: 146,
            AbntC1: 147,
            AbntC2: 148,
            OemOpenBrackets: 149,
            Oem4: 149,
            OemPipe: 150,
            Oem5: 150,
            OemCloseBrackets: 151,
            Oem6: 151,
            OemQuotes: 152,
            Oem7: 152,
            Oem8: 153,
            OemBackslash: 154,
            Oem102: 154,
            ImeProcessed: 155,
            System: 156,
            OemAttn: 157,
            DbeAlphanumeric: 157,
            OemFinish: 158,
            DbeKatakana: 158,
            DbeHiragana: 159,
            OemCopy: 159,
            DbeSbcsChar: 160,
            OemAuto: 160,
            DbeDbcsChar: 161,
            OemEnlw: 161,
            OemBackTab: 162,
            DbeRoman: 162,
            DbeNoRoman: 163,
            Attn: 163,
            CrSel: 164,
            DbeEnterWordRegisterMode: 164,
            ExSel: 165,
            DbeEnterImeConfigureMode: 165,
            EraseEof: 166,
            DbeFlushString: 166,
            Play: 167,
            DbeCodeInput: 167,
            DbeNoCodeInput: 168,
            Zoom: 168,
            NoName: 169,
            DbeDetermineString: 169,
            DbeEnterDialogConversionMode: 170,
            Pa1: 170,
            OemClear: 171,
            DeadCharProcessed: 172
        }
    });

    Bridge.define("System.Windows.Input.Keyboard", {
        statics: {
            previewKeyDownEvent: null,
            previewKeyUpEvent: null,
            previewGotKeyboardFocusEvent: null,
            previewLostKeyboardFocusEvent: null,
            keyDownEvent: null,
            keyUpEvent: null,
            gotKeyboardFocusEvent: null,
            lostKeyboardFocusEvent: null,
            config: {
                init: function () {
                    this.previewKeyDownEvent = System.Windows.EventManager.registerRoutedEvent("PreviewKeyDown", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Keyboard);
                    this.previewKeyUpEvent = System.Windows.EventManager.registerRoutedEvent("PreviewKeyUp", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Keyboard);
                    this.previewGotKeyboardFocusEvent = System.Windows.EventManager.registerRoutedEvent("PreviewGotKeyboardFocus", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Keyboard);
                    this.previewLostKeyboardFocusEvent = System.Windows.EventManager.registerRoutedEvent("PreviewLostKeyboardFocus", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Keyboard);
                    this.keyDownEvent = System.Windows.EventManager.registerRoutedEvent("KeyDown", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Keyboard);
                    this.keyUpEvent = System.Windows.EventManager.registerRoutedEvent("KeyUp", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Keyboard);
                    this.gotKeyboardFocusEvent = System.Windows.EventManager.registerRoutedEvent("GotKeyboardFocus", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Keyboard);
                    this.lostKeyboardFocusEvent = System.Windows.EventManager.registerRoutedEvent("LostKeyboardFocus", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Keyboard);
                }
            },
            focus: function (element) {
                var keyboardDevice = System.Windows.ApplicationHostExtensions.getKeyboardDeviceFromElement(System.Windows.ApplicationHost.getCurrent(), Bridge.cast(element, System.Windows.FrameworkElement));
                return keyboardDevice != null ? keyboardDevice.focus(element) : null;
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigation", {
        inherits: [System.IDisposable],
        statics: {
            tabNavigationProperty: null,
            controlTabNavigationProperty: null,
            directionalNavigationProperty: null,
            isTabStopProperty: null,
            tabIndexProperty: null,
            navigationFocusElementProperty: null,
            config: {
                init: function () {
                    this.tabNavigationProperty = System.Windows.DependencyProperty.registerAttached("TabNavigation", System.Windows.Input.KeyboardNavigationMode, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Continue));
                    this.controlTabNavigationProperty = System.Windows.DependencyProperty.registerAttached("ControlTabNavigation", System.Windows.Input.KeyboardNavigationMode, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Continue));
                    this.directionalNavigationProperty = System.Windows.DependencyProperty.registerAttached("DirectionalNavigation", System.Windows.Input.KeyboardNavigationMode, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Continue));
                    this.isTabStopProperty = System.Windows.DependencyProperty.registerAttached("IsTabStop", Boolean, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
                    this.tabIndexProperty = System.Windows.DependencyProperty.registerAttached("TabIndex", System.Int32, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.$ctor1(2147483647));
                    this.navigationFocusElementProperty = System.Windows.DependencyProperty.registerAttached("NavigationFocusElement", System.Windows.Media.VisualWeakReference, System.Windows.Input.KeyboardNavigation, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            getTabNavigation: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.tabNavigationProperty), System.Int32));
            },
            setTabNavigation: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.tabNavigationProperty, value);
            },
            getControlTabNavigation: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.controlTabNavigationProperty), System.Int32));
            },
            setControlTabNavigation: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.controlTabNavigationProperty, value);
            },
            getDirectionalNavigation: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.directionalNavigationProperty), System.Int32));
            },
            setDirectionalNavigation: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.directionalNavigationProperty, value);
            },
            getIsTabStop: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.isTabStopProperty), Boolean));
            },
            setIsTabStop: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.isTabStopProperty, value);
            },
            getTabIndex: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.tabIndexProperty), System.Int32));
            },
            setTabIndex: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.tabIndexProperty, value);
            },
            getNavigationFocusElement: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Input.KeyboardNavigation.navigationFocusElementProperty), System.Windows.Media.VisualWeakReference);
            },
            setNavigationFocusElement: function (obj, value) {
                obj.setValue(System.Windows.Input.KeyboardNavigation.navigationFocusElementProperty, value);
            },
            setNavigationFocusElement$1: function (focusedElement) {
                var navigationScope = System.Windows.Input.KeyboardNavigation.getNavigationScope(focusedElement);
                if (navigationScope != null) {
                    var visualWeakReference = System.Windows.Input.KeyboardNavigation.getNavigationFocusElement(focusedElement);
                    System.Windows.Input.KeyboardNavigation.setNavigationFocusElement(navigationScope, new System.Windows.Media.VisualWeakReference(focusedElement, navigationScope));
                }
            },
            tryGetNavigationMode: function (e, navigationModeProperty, navigationDirection) {
                navigationModeProperty.v = null;
                navigationDirection.v = System.Windows.Input.FocusNavigationDirection.Next;

                if (!e.getIsDown()) {
                    return false;
                }

                if (e.getKey() === System.Windows.Input.Key.Tab) {
                    navigationModeProperty.v = (e.getKeyboardDevice().getModifiers() & System.Windows.Input.ModifierKeys.Control) === 0 ? System.Windows.Input.KeyboardNavigation.tabNavigationProperty : System.Windows.Input.KeyboardNavigation.controlTabNavigationProperty;
                    navigationDirection.v = (e.getKeyboardDevice().getModifiers() & System.Windows.Input.ModifierKeys.Shift) === 0 ? System.Windows.Input.FocusNavigationDirection.Next : System.Windows.Input.FocusNavigationDirection.Previous;
                    return true;
                }

                if (e.getKey() === System.Windows.Input.Key.Left) {
                    navigationModeProperty.v = System.Windows.Input.KeyboardNavigation.directionalNavigationProperty;
                    navigationDirection.v = System.Windows.Input.FocusNavigationDirection.Left;
                    return true;
                }

                if (e.getKey() === System.Windows.Input.Key.Right) {
                    navigationModeProperty.v = System.Windows.Input.KeyboardNavigation.directionalNavigationProperty;
                    navigationDirection.v = System.Windows.Input.FocusNavigationDirection.Right;
                    return true;
                }

                if (e.getKey() === System.Windows.Input.Key.Up) {
                    navigationModeProperty.v = System.Windows.Input.KeyboardNavigation.directionalNavigationProperty;
                    navigationDirection.v = System.Windows.Input.FocusNavigationDirection.Up;
                    return true;
                }

                if (e.getKey() === System.Windows.Input.Key.Down) {
                    navigationModeProperty.v = System.Windows.Input.KeyboardNavigation.directionalNavigationProperty;
                    navigationDirection.v = System.Windows.Input.FocusNavigationDirection.Down;
                    return true;
                }

                return false;
            },
            isNavigationScope: function (keyboardNavigationMode) {
                return keyboardNavigationMode === System.Windows.Input.KeyboardNavigationMode.Once;
            },
            getNavigationScope: function (element) {
                while (element != null && !System.Windows.Input.KeyboardNavigation.isNavigationScope(System.Windows.Input.KeyboardNavigation.getTabNavigation(element)) && !System.Windows.Input.KeyboardNavigation.isNavigationScope(System.Windows.Input.KeyboardNavigation.getControlTabNavigation(element))) {
                    element = element.getVisualParent();
                }

                return element;
            }
        },
        presentationSource: null,
        focusVisualAdorner: null,
        config: {
            alias: [
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (presentationSource) {
            this.$initialize();
            this.presentationSource = presentationSource;

            presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().addTargetChanged(Bridge.fn.cacheBind(this, this.onTargetChanged));
            presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().addPostProcessKey(Bridge.fn.cacheBind(this, this.onPostProcessKey));
        },
        dispose: function () {
            this.presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().removeTargetChanged(Bridge.fn.cacheBind(this, this.onTargetChanged));
            this.presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().removePostProcessKey(Bridge.fn.cacheBind(this, this.onPostProcessKey));
        },
        onTargetChanged: function (sender, e) {
            if (this.focusVisualAdorner != null) {
                this.focusVisualAdorner.dispose();
                this.focusVisualAdorner = null;
            }

            var focusedElement = Bridge.cast(this.presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().getTarget(), System.Windows.FrameworkElement);

            if (focusedElement != null) {
                this.focusVisualAdorner = System.Windows.Input.KeyboardNavigation.FocusVisualAdorner.attach(focusedElement);
                System.Windows.Input.KeyboardNavigation.setNavigationFocusElement$1(focusedElement);
            }
        },
        onPostProcessKey: function (sender, e) {
            if (e.getHandled()) {
                return;
            }

            var navigationDirection = { v : new System.Windows.Input.FocusNavigationDirection() };
            var navigationModeProperty = { };

            if (System.Windows.Input.KeyboardNavigation.tryGetNavigationMode(e, navigationModeProperty, navigationDirection)) {
                var currentTarget = Bridge.cast(this.presentationSource.System$Windows$IPresentationSource$getKeyboardDevice().getTarget(), System.Windows.UIElement) || this.presentationSource.System$Windows$IPresentationSource$getRootElement();

                var newTarget = Bridge.cast(System.Windows.Input.KeyboardNavigationTarget.findTarget(currentTarget, navigationDirection.v, navigationModeProperty.v), System.Windows.UIElement);

                if (!Bridge.referenceEquals(currentTarget, newTarget) && newTarget != null) {
                    newTarget.focus();
                }

                e.setHandled(true);
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigation.FocusVisualAdorner", {
        inherits: [System.IDisposable],
        statics: {
            attach: function (element) {
                return new System.Windows.Input.KeyboardNavigation.FocusVisualAdorner(element);
            }
        },
        adornerLayer: null,
        adorner: null,
        config: {
            alias: [
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (element) {
            this.$initialize();
            this.adornerLayer = System.Windows.Documents.AdornerLayer.getAdornerLayer(element);
            this.adorner = Bridge.merge(new System.Windows.Documents.Adorner(element), {
                setChild: Bridge.merge(new System.Windows.Controls.Control(), {
                    setStyle: element.getFocusVisualStyle(),
                    setFocusable: false
                } )
            } );

            this.adornerLayer.add(this.adorner);
        },
        dispose: function () {
            this.adornerLayer.remove(this.adorner);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationMode", {
        $kind: "enum",
        statics: {
            Continue: 0,
            Once: 1,
            Cycle: 2,
            None: 3,
            Contained: 4,
            Local: 5
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget", {
        statics: {
            tabStopComparerProvider: null,
            leftBoundStopComparerProvider: null,
            rightBoundStopComparerProvider: null,
            topBoundStopComparerProvider: null,
            bottomBoundStopComparerProvider: null,
            config: {
                init: function () {
                    this.tabStopComparerProvider = new System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider($asm.$.System.Windows.Input.KeyboardNavigationTarget.f1);
                    this.leftBoundStopComparerProvider = new System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider($asm.$.System.Windows.Input.KeyboardNavigationTarget.f2);
                    this.rightBoundStopComparerProvider = new System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider($asm.$.System.Windows.Input.KeyboardNavigationTarget.f3);
                    this.topBoundStopComparerProvider = new System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider($asm.$.System.Windows.Input.KeyboardNavigationTarget.f4);
                    this.bottomBoundStopComparerProvider = new System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider($asm.$.System.Windows.Input.KeyboardNavigationTarget.f5);
                }
            },
            findTarget: function (currentElement, direction, navigationModeProperty) {
                var currentStop = new System.Windows.Input.KeyboardNavigationTarget.Stop.ctor(currentElement);

                switch (direction) {
                    case System.Windows.Input.FocusNavigationDirection.Next: 
                        return System.Windows.Input.KeyboardNavigationTarget.findNextTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.tabStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Previous: 
                        return System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.tabStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.First: 
                        return System.Windows.Input.KeyboardNavigationTarget.findFirstTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.tabStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Last: 
                        return System.Windows.Input.KeyboardNavigationTarget.findLastTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.tabStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Left: 
                        return System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.leftBoundStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Right: 
                        return System.Windows.Input.KeyboardNavigationTarget.findNextTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.rightBoundStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Up: 
                        return System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.topBoundStopComparerProvider);
                    case System.Windows.Input.FocusNavigationDirection.Down: 
                        return System.Windows.Input.KeyboardNavigationTarget.findNextTarget(currentStop.getElement(), currentStop, navigationModeProperty, System.Windows.Input.KeyboardNavigationTarget.bottomBoundStopComparerProvider);
                }

                throw new Granular.Exception("Unexpected navigation direction \"{0}\"", [direction]);
            },
            getNavigation: function (scope, navigationModeProperty) {
                var scopeNavigationMode = System.Nullable.getValue(Bridge.cast(scope.getValue(navigationModeProperty), System.Int32));

                switch (scopeNavigationMode) {
                    case System.Windows.Input.KeyboardNavigationMode.Continue: 
                        return System.Windows.Input.KeyboardNavigationTarget.ContinueNavigation.default;
                    case System.Windows.Input.KeyboardNavigationMode.Once: 
                        return System.Windows.Input.KeyboardNavigationTarget.OnceNavigation.default;
                    case System.Windows.Input.KeyboardNavigationMode.Cycle: 
                        return System.Windows.Input.KeyboardNavigationTarget.CycleNavigation.default;
                    case System.Windows.Input.KeyboardNavigationMode.None: 
                        return System.Windows.Input.KeyboardNavigationTarget.NoneNavigation.default;
                    case System.Windows.Input.KeyboardNavigationMode.Contained: 
                        return System.Windows.Input.KeyboardNavigationTarget.ContainedNavigation.default;
                    case System.Windows.Input.KeyboardNavigationMode.Local: 
                        return System.Windows.Input.KeyboardNavigationTarget.LocalNavigation.default;
                }

                throw new Granular.Exception("Unexpected KeyboardNavigationMode \"{0}\"", [scopeNavigationMode]);
            },
            findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                return System.Windows.Input.KeyboardNavigationTarget.getNavigation(scope, navigationModeProperty).System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
            },
            findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                return System.Windows.Input.KeyboardNavigationTarget.getNavigation(scope, navigationModeProperty).System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
            },
            findFirstTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                return System.Windows.Input.KeyboardNavigationTarget.getNavigation(scope, navigationModeProperty).System$Windows$Input$KeyboardNavigationTarget$INavigation$findFirstTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
            },
            findLastTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                return System.Windows.Input.KeyboardNavigationTarget.getNavigation(scope, navigationModeProperty).System$Windows$Input$KeyboardNavigationTarget$INavigation$findLastTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
            },
            findNextContainedTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                var $t;
                var stopComparer = stopComparerProvider.System$Windows$Input$KeyboardNavigationTarget$IStopComparerProvider$createComparer(currentStop);

                var passedCurrentStop = false;

                var targetStop = null;

                $t = Bridge.getEnumerator(System.Windows.Input.KeyboardNavigationTarget.getContainedStops(scope, currentStop.getElement(), navigationModeProperty), System.Windows.Input.KeyboardNavigationTarget.Stop);
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    if (Bridge.referenceEquals(stop.getElement(), currentStop.getElement())) {
                        passedCurrentStop = true;
                        continue;
                    }

                    var compareResult = stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(currentStop, stop);
                    if ((compareResult < 0 || compareResult === 0 && passedCurrentStop) && (targetStop == null || stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(targetStop, stop) > 0)) {
                        targetStop = stop;
                    }
                }

                return targetStop != null ? targetStop.getElement() : null;
            },
            findPreviousContainedTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                var $t;
                var stopComparer = stopComparerProvider.System$Windows$Input$KeyboardNavigationTarget$IStopComparerProvider$createComparer(currentStop);

                var passedCurrentStop = false;

                var targetStop = null;

                $t = Bridge.getEnumerator(System.Windows.Input.KeyboardNavigationTarget.getContainedStops(scope, currentStop.getElement(), navigationModeProperty), System.Windows.Input.KeyboardNavigationTarget.Stop);
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    if (Bridge.referenceEquals(stop.getElement(), currentStop.getElement())) {
                        passedCurrentStop = true;
                        continue;
                    }

                    var compareResult = stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(currentStop, stop);
                    if ((compareResult > 0 || compareResult === 0 && !passedCurrentStop) && (targetStop == null || stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(targetStop, stop) <= 0)) {
                        targetStop = stop;
                    }
                }

                return targetStop != null ? targetStop.getElement() : null;
            },
            findFirstContainedTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                var $t;
                var stopComparer = stopComparerProvider.System$Windows$Input$KeyboardNavigationTarget$IStopComparerProvider$createComparer(currentStop);

                var targetStop = null;

                $t = Bridge.getEnumerator(System.Windows.Input.KeyboardNavigationTarget.getContainedStops(scope, currentStop.getElement(), navigationModeProperty), System.Windows.Input.KeyboardNavigationTarget.Stop);
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    if (targetStop == null || stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(targetStop, stop) > 0) {
                        targetStop = stop;
                    }
                }

                return targetStop != null ? targetStop.getElement() : null;
            },
            findLastContainedTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
                var $t;
                var stopComparer = stopComparerProvider.System$Windows$Input$KeyboardNavigationTarget$IStopComparerProvider$createComparer(currentStop);

                var targetStop = null;

                $t = Bridge.getEnumerator(System.Windows.Input.KeyboardNavigationTarget.getContainedStops(scope, currentStop.getElement(), navigationModeProperty), System.Windows.Input.KeyboardNavigationTarget.Stop);
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    if (targetStop == null || stopComparer.System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare(targetStop, stop) <= 0) {
                        targetStop = stop;
                    }
                }

                return targetStop != null ? targetStop.getElement() : null;
            },
            isStop: function (element) {
                return System.Windows.Input.KeyboardNavigation.getIsTabStop(element) && element.getIsVisible() && element.getIsEnabled() && element.getFocusable();
            },
            getGlobalStops: function (scope, currentElement, navigationModeProperty) {
                return System.Windows.Input.KeyboardNavigationTarget.getNavigation(scope, navigationModeProperty).System$Windows$Input$KeyboardNavigationTarget$INavigation$getGlobalStops(scope, currentElement, navigationModeProperty);
            },
            getContainedStops: function (scope, currentElement, navigationModeProperty) {
                var $t;
                var $yield = [];
                if (System.Windows.Input.KeyboardNavigationTarget.isStop(Bridge.cast(scope, System.Windows.UIElement)) || Bridge.referenceEquals(scope, currentElement)) {
                    $yield.push(new System.Windows.Input.KeyboardNavigationTarget.Stop.ctor(scope));
                }

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(scope.getVisualChildren()).selectMany(function (child) {
                        return System.Windows.Input.KeyboardNavigationTarget.getGlobalStops(child, currentElement, navigationModeProperty);
                    }));
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    $yield.push(stop);
                }
                return System.Array.toEnumerable($yield);
            },
            getAbsoluteBounds: function (element) {
                return System.Windows.Media.MatrixExtensions.getApproximatedRect$1(element.transformToAncestor(null), element.getVisualBounds().getSize());
            },
            getLeftBoundPosition: function (bounds) {
                return System.Windows.Point.op_Addition(bounds.getLocation(), new System.Windows.Point.$ctor1(0, bounds.getHeight() / 2));
            },
            getRightBoundPosition: function (bounds) {
                return System.Windows.Point.op_Addition(bounds.getLocation(), new System.Windows.Point.$ctor1(bounds.getWidth(), bounds.getHeight() / 2));
            },
            getTopBoundPosition: function (bounds) {
                return System.Windows.Point.op_Addition(bounds.getLocation(), new System.Windows.Point.$ctor1(bounds.getWidth() / 2, 0));
            },
            getBottomBoundPosition: function (bounds) {
                return System.Windows.Point.op_Addition(bounds.getLocation(), new System.Windows.Point.$ctor1(bounds.getWidth() / 2, bounds.getHeight()));
            }
        }
    });

    Bridge.ns("System.Windows.Input.KeyboardNavigationTarget", $asm.$);

    Bridge.apply($asm.$.System.Windows.Input.KeyboardNavigationTarget, {
        f1: function (currentStop) {
            return System.Windows.Input.KeyboardNavigationTarget.TabStopComparer.default;
        },
        f2: function (currentStop) {
            return new System.Windows.Input.KeyboardNavigationTarget.LeftBoundStopComparer(currentStop);
        },
        f3: function (currentStop) {
            return new System.Windows.Input.KeyboardNavigationTarget.RightBoundStopComparer(currentStop);
        },
        f4: function (currentStop) {
            return new System.Windows.Input.KeyboardNavigationTarget.TopBoundStopComparer(currentStop);
        },
        f5: function (currentStop) {
            return new System.Windows.Input.KeyboardNavigationTarget.BottomBoundStopComparer(currentStop);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.INavigation", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.Stop", {
        config: {
            properties: {
                Element: null,
                TabIndex: 0
            }
        },
        ctor: function (element) {
            System.Windows.Input.KeyboardNavigationTarget.Stop.$ctor1.call(this, element, System.Windows.Input.KeyboardNavigation.getTabIndex(element));
            //
        },
        $ctor1: function (element, tabIndex) {
            this.$initialize();
            this.setElement(element);
            this.setTabIndex(tabIndex);
        },
        toString: function () {
            return System.String.format("Stop({0}, {1})", this.getElement(), this.getTabIndex());
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.IStopComparerProvider", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.TabStopComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Windows.Input.KeyboardNavigationTarget.Stop)],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.TabStopComparer();
                }
            }
        },
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        compare: function (x, y) {
            return Bridge.compare(x.getTabIndex(), y.getTabIndex());
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.TopBoundStopComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Windows.Input.KeyboardNavigationTarget.Stop)],
        currentPosition: null,
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare"
            ]
        },
        ctor: function (currentStop) {
            this.$initialize();
            this.currentPosition = System.Windows.Input.KeyboardNavigationTarget.getTopBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(currentStop.getElement()));
        },
        compare: function (x, y) {
            var relativePosition1 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getBottomBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(x.getElement())), this.currentPosition);
            var relativePosition2 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getBottomBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(y.getElement())), this.currentPosition);

            var distance1 = relativePosition1.getY() <= 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition1) : System.Windows.PointExtensions.getLengthSqr(relativePosition1);
            var distance2 = relativePosition2.getY() <= 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition2) : System.Windows.PointExtensions.getLengthSqr(relativePosition2);

            return Bridge.compare(distance1, distance2);
        }
    });

    Bridge.define("System.Windows.Input.KeyEventHandlerExtensions", {
        statics: {
            raise: function (handler, sender, e) {
                if (!Bridge.staticEquals(handler, null)) {
                    handler(sender, e);
                }
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyStates", {
        $kind: "enum",
        statics: {
            None: 0,
            Down: 1
        }
    });

    Bridge.define("System.Windows.Input.ModifierKeys", {
        $kind: "enum",
        statics: {
            None: 0,
            Alt: 1,
            Control: 2,
            Shift: 4,
            Windows: 8
        }
    });

    Bridge.define("System.Windows.Input.Mouse", {
        statics: {
            previewMouseMoveEvent: null,
            previewMouseDownEvent: null,
            previewMouseUpEvent: null,
            previewMouseWheelEvent: null,
            mouseMoveEvent: null,
            mouseDownEvent: null,
            mouseUpEvent: null,
            mouseWheelEvent: null,
            mouseEnterEvent: null,
            mouseLeaveEvent: null,
            queryCursorEvent: null,
            config: {
                init: function () {
                    this.previewMouseMoveEvent = System.Windows.EventManager.registerRoutedEvent("PreviewMouseMove", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Mouse);
                    this.previewMouseDownEvent = System.Windows.EventManager.registerRoutedEvent("PreviewMouseDown", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Mouse);
                    this.previewMouseUpEvent = System.Windows.EventManager.registerRoutedEvent("PreviewMouseUp", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Mouse);
                    this.previewMouseWheelEvent = System.Windows.EventManager.registerRoutedEvent("PreviewMouseWheel", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Input.Mouse);
                    this.mouseMoveEvent = System.Windows.EventManager.registerRoutedEvent("MouseMove", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Mouse);
                    this.mouseDownEvent = System.Windows.EventManager.registerRoutedEvent("MouseDown", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Mouse);
                    this.mouseUpEvent = System.Windows.EventManager.registerRoutedEvent("MouseUp", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Mouse);
                    this.mouseWheelEvent = System.Windows.EventManager.registerRoutedEvent("MouseWheel", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Mouse);
                    this.mouseEnterEvent = System.Windows.EventManager.registerRoutedEvent("MouseEnter", System.Windows.RoutingStrategy.Direct, Function, System.Windows.Input.Mouse);
                    this.mouseLeaveEvent = System.Windows.EventManager.registerRoutedEvent("MouseLeave", System.Windows.RoutingStrategy.Direct, Function, System.Windows.Input.Mouse);
                    this.queryCursorEvent = System.Windows.EventManager.registerRoutedEvent("QueryCursor", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Input.Mouse);
                }
            }
        }
    });

    Bridge.define("System.Windows.Input.MouseButton", {
        $kind: "enum",
        statics: {
            Left: 0,
            Middle: 1,
            Right: 2,
            XButton1: 3,
            XButton2: 4
        }
    });

    Bridge.define("System.Windows.Input.MouseButtonState", {
        $kind: "enum",
        statics: {
            Released: 0,
            Pressed: 1
        }
    });

    Bridge.define("System.Windows.Input.RawEventArgs", {
        config: {
            properties: {
                Timestamp: 0
            }
        },
        ctor: function (timestamp) {
            this.$initialize();
            this.setTimestamp(timestamp);
        }
    });

    Bridge.define("System.Windows.IPresentationSource", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IPresentationSourceFactory", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.IRenderImageSourceFactory", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.ITextMeasurementService", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.LayoutManager", {
        statics: {
            current: null,
            config: {
                init: function () {
                    this.current = new System.Windows.LayoutManager();
                }
            },
            getElementPath: function (element) {
                var $yield = [];
                while (element != null) {
                    $yield.push(element);
                    element = Bridge.cast(element.getVisualParent(), System.Windows.UIElement);
                }
                return System.Array.toEnumerable($yield);
            }
        },
        measureQueue: null,
        arrangeQueue: null,
        updatedElements: null,
        updateLayoutOperation: null,
        ctor: function () {
            this.$initialize();
            this.measureQueue = new (System.Collections.Generic.HashSet$1(System.Windows.UIElement))();
            this.arrangeQueue = new (System.Collections.Generic.HashSet$1(System.Windows.UIElement))();
            this.updatedElements = new (System.Collections.Generic.HashSet$1(System.Windows.UIElement))();
        },
        addMeasure: function (element) {
            this.measureQueue.add(element);
            this.beginUpdateLayout();
        },
        removeMeasure: function (element) {
            this.measureQueue.remove(element);
        },
        addArrange: function (element) {
            this.arrangeQueue.add(element);
            this.beginUpdateLayout();
        },
        removeArrange: function (element) {
            this.arrangeQueue.remove(element);
        },
        addUpdatedElement: function (element) {
            var $t;
            if (this.updateLayoutOperation == null || this.updateLayoutOperation.getStatus() !== System.Windows.Threading.DispatcherOperationStatus.Executing) {
                // element was updated manually (not through the UpdateLayout loop)
                $t = Bridge.getEnumerator(System.Windows.LayoutManager.getElementPath(element), System.Windows.UIElement);
                while ($t.moveNext()) {
                    var pathElement = $t.getCurrent();
                    pathElement.raiseLayoutUpdated();
                }

                return;
            }
            Granular.Extensions.CollectionExtensions.addRange(System.Windows.UIElement, this.updatedElements, System.Windows.LayoutManager.getElementPath(element));
        },
        beginUpdateLayout: function () {
            if (this.updateLayoutOperation == null || this.updateLayoutOperation.getStatus() === System.Windows.Threading.DispatcherOperationStatus.Completed) {
                this.updateLayoutOperation = System.Windows.Threading.Dispatcher.currentDispatcher.invokeAsync(Bridge.fn.cacheBind(this, this.updateLayout));
            }
        },
        updateLayout: function () {
            while (this.measureQueue.getCount() > 0 || this.arrangeQueue.getCount() > 0) {
                while (this.measureQueue.getCount() > 0) {
                    var element = this.getTopElement(this.measureQueue);
                    var previousDesiredSize = element.getDesiredSize();

                    element.measure(element.getPreviousAvailableSize());

                    if (System.Windows.Size.op_Inequality(previousDesiredSize, element.getDesiredSize())) {
                        element.invalidateArrange();
                        element.invalidateParentMeasure();
                    }
                }

                while (this.arrangeQueue.getCount() > 0) {
                    var element1 = this.getTopElement(this.arrangeQueue);
                    element1.arrange(element1.getPreviousFinalRect());
                }

                while (this.updatedElements.getCount() > 0 && this.measureQueue.getCount() === 0 && this.arrangeQueue.getCount() === 0) {
                    var element2 = System.Linq.Enumerable.from(this.updatedElements).first();
                    this.updatedElements.remove(element2);

                    element2.raiseLayoutUpdated();
                }
            }
        },
        getTopElement: function (measureQueue) {
            var $t;
            var topElement = null;

            $t = Bridge.getEnumerator(measureQueue, System.Windows.UIElement);
            while ($t.moveNext()) {
                var element = $t.getCurrent();
                if (topElement == null || topElement.getVisualLevel() > element.getVisualLevel()) {
                    topElement = element;
                }
            }

            return topElement;
        }
    });

    Bridge.define("System.Windows.Markup.IEventAdapter", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.IPropertyAdapter", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.IElementFactory", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.PropertyAttribute", {
        inherits: [System.Attribute],
        statics: {
            resolvePropertyName: function (T, type) {
                return Granular.Compatibility.Linq.Enumerable.firstOrDefault(String, Granular.Compatibility.Linq.Enumerable.select(T, String, Granular.Compatibility.Linq.Enumerable.ofType(T, Bridge.Reflection.getAttributes(type, null, true)), $asm.$.System.Windows.Markup.PropertyAttribute.f1));
            }
        },
        config: {
            properties: {
                Name: null
            }
        },
        ctor: function (name) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setName(name);
        }
    });

    Bridge.ns("System.Windows.Markup.PropertyAttribute", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.PropertyAttribute, {
        f1: function (attribute) {
            return attribute.getName();
        }
    });

    Bridge.define("System.Windows.Markup.DeferredValueKeyProviderAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                ProviderType: null
            }
        },
        ctor: function (providerType) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setProviderType(providerType);
        }
    });

    Bridge.define("System.Windows.Markup.DeferredValueKeyProviders", {
        statics: {
            deferredValueKeyProviderCache: null,
            config: {
                init: function () {
                    this.deferredValueKeyProviderCache = Granular.Collections.CacheDictionary$2(Function,System.Windows.Markup.IDeferredValueKeyProvider).createUsingStringKeys(System.Windows.Markup.DeferredValueKeyProviders.resolveDeferredValueKeyProvider, $asm.$.System.Windows.Markup.DeferredValueKeyProviders.f1);
                }
            },
            getDeferredValueKeyProvider: function (type) {
                return System.Windows.Markup.DeferredValueKeyProviders.deferredValueKeyProviderCache.getValue(type);
            },
            resolveDeferredValueKeyProvider: function (type) {
                var deferredValueKeyProviderAttribute = Bridge.as(System.Linq.Enumerable.from(Bridge.Reflection.getAttributes(type, System.Windows.Markup.DeferredValueKeyProviderAttribute, false)).firstOrDefault(null, null), System.Windows.Markup.DeferredValueKeyProviderAttribute);
                if (deferredValueKeyProviderAttribute != null) {
                    return Bridge.as(Bridge.createInstance(deferredValueKeyProviderAttribute.getProviderType()), System.Windows.Markup.IDeferredValueKeyProvider);
                }

                return null;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.DeferredValueKeyProviders", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.DeferredValueKeyProviders, {
        f1: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.ElementCollectionContentInitailizer", {
        statics: {
            isCollectionTypeCache: null,
            config: {
                init: function () {
                    this.isCollectionTypeCache = Granular.Collections.CacheDictionary$2(Function,Boolean).createUsingStringKeys(System.Windows.Markup.ElementCollectionContentInitailizer.resolveIsCollectionType, $asm.$.System.Windows.Markup.ElementCollectionContentInitailizer.f1);
                }
            },
            create: function (values, containingType) {
                var keyType = { };
                var valueType = { };

                if (System.Windows.Markup.ElementCollectionContentInitailizer.tryGetDictionaryGenericArguments(containingType, keyType, valueType)) {
                    return new System.Windows.Markup.ElementDictionaryContentInitializer(containingType, keyType.v, valueType.v, values);
                }

                if (System.Windows.Markup.ElementCollectionContentInitailizer.tryGetCollectionGenericArgument(containingType, valueType)) {
                    return new System.Windows.Markup.ElementCollectionContentInitializer(valueType.v, values);
                }

                throw new Granular.Exception("Can't initialize type \"{0}\" content", [Bridge.Reflection.getTypeName(containingType)]);
            },
            isCollectionType: function (type) {
                return System.Windows.Markup.ElementCollectionContentInitailizer.isCollectionTypeCache.getValue(type);
            },
            resolveIsCollectionType: function (type) {
                var keyType = { };
                var valueType = { };

                return System.Windows.Markup.ElementCollectionContentInitailizer.tryGetDictionaryGenericArguments(type, keyType, valueType) || System.Windows.Markup.ElementCollectionContentInitailizer.tryGetCollectionGenericArgument(type, valueType);
            },
            tryGetDictionaryGenericArguments: function (type, keyType, valueType) {
                var interfaceType = Granular.Extensions.TypeExtensions.getInterfaceType(type, System.Collections.Generic.IDictionary$2);

                if (interfaceType != null) {
                    var $arguments = Granular.Compatibility.Linq.Enumerable.toArray(Function, Granular.Compatibility.Type.getTypeInterfaceGenericArguments(type, interfaceType));
                    keyType.v = $arguments[0];
                    valueType.v = $arguments[1];
                    return true;
                }

                valueType.v = null;
                keyType.v = null;
                return false;
            },
            tryGetCollectionGenericArgument: function (type, valueType) {
                var interfaceType = Granular.Extensions.TypeExtensions.getInterfaceType(type, System.Collections.Generic.ICollection$1);

                if (interfaceType != null) {
                    valueType.v = Granular.Compatibility.Linq.Enumerable.first(Function, Granular.Compatibility.Type.getTypeInterfaceGenericArguments(type, interfaceType));
                    return true;
                }

                valueType.v = null;
                return false;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.ElementCollectionContentInitailizer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.ElementCollectionContentInitailizer, {
        f1: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.IElementInitializer", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory", {
        statics: {
            getKeyDirectiveFactory: function (element, keyType) {
                var keyDirective = Granular.Compatibility.Linq.Enumerable.firstOrDefault$1(System.Windows.Markup.XamlMember, element.getDirectives(), $asm.$.System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory.f1);
                return keyDirective != null ? System.Windows.Markup.ElementFactory.fromValue(System.Windows.Markup.XamlMemberExtensions.getSingleValue(keyDirective), keyType, element.getNamespaces(), element.getSourceUri()) : null;
            },
            getKeyProperty: function (type) {
                var propertyName = System.Windows.Markup.DictionaryKeyPropertyAttribute.getPropertyName(type);
                return !Granular.Extensions.StringExtensions.isNullOrWhiteSpace(propertyName) ? System.Windows.Markup.PropertyAdapter.createAdapter(type, propertyName) : null;
            },
            getDeferredKeyFactory: function (xamlElement) {
                var elementType = System.Windows.Markup.XamlElementExtensions.getElementType(xamlElement);

                var provider = System.Windows.Markup.DeferredValueKeyProviders.getDeferredValueKeyProvider(elementType);
                if (provider != null) {
                    return new System.Windows.Markup.ElementDictionaryContentInitializer.DeferredKeyFactory(provider, xamlElement);
                }

                var keyPropertyName = System.Windows.Markup.DictionaryKeyPropertyAttribute.getPropertyName(elementType);
                if (!Granular.Extensions.StringExtensions.isNullOrWhiteSpace(keyPropertyName)) {
                    var keyMember = Granular.Compatibility.Linq.Enumerable.firstOrDefault$1(System.Windows.Markup.XamlMember, xamlElement.getMembers(), function (member) {
                        return Bridge.referenceEquals(member.getName().getLocalName(), keyPropertyName);
                    });
                    if (keyMember != null) {
                        var keyProperty = System.Windows.Markup.PropertyAdapter.createAdapter(elementType, keyPropertyName);
                        return System.Windows.Markup.ElementFactory.fromValue(Granular.Compatibility.Linq.Enumerable.single(Object, keyMember.getValues()), keyProperty.System$Windows$Markup$IPropertyAdapter$getPropertyType(), xamlElement.getNamespaces(), xamlElement.getSourceUri());
                    }
                }

                return null;
            }
        },
        valueFactory: null,
        keyDirectiveFactory: null,
        deferredKeyFactory: null,
        keyProperty: null,
        ctor: function (keyType, valueFactory, xamlElement, isValueDeferred) {
            this.$initialize();
            this.valueFactory = valueFactory;

            this.keyDirectiveFactory = System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory.getKeyDirectiveFactory(xamlElement, keyType);
            this.deferredKeyFactory = isValueDeferred && this.keyDirectiveFactory == null ? System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory.getDeferredKeyFactory(xamlElement) : null;
            this.keyProperty = System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory.getKeyProperty(valueFactory.System$Windows$Markup$IElementFactory$getElementType());

            if (this.keyDirectiveFactory == null && this.deferredKeyFactory == null && this.keyProperty == null) {
                throw new Granular.Exception("Dictionary item \"{0}\" must have a key", [xamlElement.getName()]);
            }
        },
        createElement: function (context) {
            var element = this.valueFactory.System$Windows$Markup$IElementFactory$createElement(context);

            var key = null;

            if (this.keyDirectiveFactory != null) {
                key = this.keyDirectiveFactory.System$Windows$Markup$IElementFactory$createElement(context);

                if (this.keyProperty != null) {
                    this.keyProperty.System$Windows$Markup$IPropertyAdapter$setValue(element, key, context.getValueSource());
                }
            } else if (this.deferredKeyFactory != null) {
                key = this.deferredKeyFactory.System$Windows$Markup$IElementFactory$createElement(context);
            } else {
                key = this.keyProperty.System$Windows$Markup$IPropertyAdapter$getValue(element);
            }

            return new (System.Collections.Generic.KeyValuePair$2(Object,Object))(key, element);
        }
    });

    Bridge.ns("System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory, {
        f1: function (directive) {
            return System.Windows.Markup.XamlName.op_Equality(directive.getName(), System.Windows.Markup.XamlLanguage.keyDirective);
        }
    });

    Bridge.define("System.Windows.Markup.ElementMemberInitializer", {
        statics: {
            create: function (containingType, memberName, values, namespaces, sourceUri) {
                var propertyAdapter = System.Windows.Markup.PropertyAdapter.createAdapter(containingType, memberName);
                if (propertyAdapter != null) {
                    return System.Windows.Markup.ElementPropertyMemberInitializer.create(propertyAdapter, values, namespaces, sourceUri);
                }

                var eventAdapter = System.Windows.Markup.EventAdapter.createAdapter(containingType, memberName);
                if (eventAdapter != null) {
                    return new System.Windows.Markup.ElementEventMemberInitializer(eventAdapter, System.Windows.Markup.ElementMemberInitializer.getEventHandlerName(memberName, values));
                }

                throw new Granular.Exception("Type \"{0}\" does not contain a member named \"{1}\"", [Bridge.Reflection.getTypeName(containingType), memberName]);
            },
            getEventHandlerName: function (memberName, values) {
                if (!Granular.Compatibility.Linq.Enumerable.any(Object, values)) {
                    throw new Granular.Exception("Member \"{0}\" doesn't have values", [memberName]);
                }

                if (Granular.Compatibility.Linq.Enumerable.count(Object, values) > 1) {
                    throw new Granular.Exception("Member \"{0}\" cannot have multiple values", [memberName]);
                }

                if (!(Bridge.is(Granular.Compatibility.Linq.Enumerable.first(Object, values), String))) {
                    throw new Granular.Exception("Member \"{0}\" value is not an event handler name", [memberName]);
                }

                return Bridge.cast(Granular.Compatibility.Linq.Enumerable.first(Object, values), String);
            }
        }
    });

    Bridge.define("System.Windows.Markup.EventAdapter", {
        statics: {
            adaptersCache: null,
            config: {
                init: function () {
                    this.adaptersCache = Granular.Collections.CacheDictionary$2(System.Windows.Markup.TypeMemberKey,System.Windows.Markup.IEventAdapter).createUsingStringKeys$1(System.Windows.Markup.EventAdapter.tryCreateAdapter, $asm.$.System.Windows.Markup.EventAdapter.f1);
                }
            },
            createAdapter: function (targetType, eventName) {
                var eventAdapter = { };
                return System.Windows.Markup.EventAdapter.adaptersCache.tryGetValue(new System.Windows.Markup.TypeMemberKey(targetType, eventName), eventAdapter) ? eventAdapter.v : null;
            },
            tryCreateAdapter: function (key, adapter) {
                adapter.v = null;

                var routedEvent = System.Windows.Markup.EventAdapter.getRoutedEvent(key.getType(), key.getMemberName());
                if (routedEvent != null) {
                    adapter.v = new System.Windows.Markup.RoutedEventAdapter(routedEvent);
                    return true;
                }

                var clrEvent = System.Windows.Markup.EventAdapter.getClrEvent(key.getType(), key.getMemberName());
                if (clrEvent != null) {
                    adapter.v = new System.Windows.Markup.ClrEventAdapter(clrEvent);
                    return true;
                }

                var eventProperty = System.Windows.Markup.EventAdapter.getEventProperty(key.getType(), key.getMemberName());
                if (eventProperty != null) {
                    adapter.v = new System.Windows.Markup.EventPropertyAdapter(eventProperty);
                    return true;
                }

                return false;
            },
            getRoutedEvent: function (containingType, eventName) {
                return System.Windows.EventManager.getEvent(containingType, eventName);
            },
            getClrEvent: function (containingType, eventName) {
                return Bridge.Reflection.getMembers(containingType, 2, 84 | 256, eventName);
            },
            getEventProperty: function (containingType, eventName) {
                var eventProperty = Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, eventName);
                return eventProperty != null && System.Reflection.PropertyInfoExtensions.isDelegate(eventProperty) ? eventProperty : null;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.EventAdapter", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.EventAdapter, {
        f1: function (typeMemberKey) {
            return typeMemberKey.getStringKey();
        }
    });

    Bridge.define("System.Windows.Markup.InitializeContext", {
        config: {
            properties: {
                Target: null,
                ParentContext: null,
                ValueSource: 0,
                NameScope: null,
                TemplatedParent: null,
                Root: null
            }
        },
        ctor: function () {
            System.Windows.Markup.InitializeContext.$ctor1.call(this, null, null, new System.Windows.NameScope(), null, System.Windows.BaseValueSource.Local);
            //
        },
        $ctor1: function (target, parentContext, nameScope, templatedParent, valueSource) {
            this.$initialize();
            this.setTarget(target);
            this.setParentContext(parentContext);

            this.setNameScope(nameScope);
            this.setTemplatedParent(templatedParent);
            this.setValueSource(valueSource);

            this.setRoot(parentContext != null && parentContext.getRoot() != null ? parentContext.getRoot() : this.getTarget());
        }
    });

    Bridge.define("System.Windows.Markup.InitializeContextExtensions", {
        statics: {
            setTarget: function (context, target) {
                return new System.Windows.Markup.InitializeContext.$ctor1(target, context.getParentContext(), context.getNameScope(), context.getTemplatedParent(), context.getValueSource());
            },
            setNameScope: function (context, nameScope) {
                return new System.Windows.Markup.InitializeContext.$ctor1(context.getTarget(), context.getParentContext(), nameScope, context.getTemplatedParent(), context.getValueSource());
            },
            createChildContext: function (context, child) {
                return new System.Windows.Markup.InitializeContext.$ctor1(child, context, context.getNameScope(), context.getTemplatedParent(), context.getValueSource());
            }
        }
    });

    Bridge.define("System.Windows.Markup.ISupportInitialize", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.IValueProvider", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Markup.KnownTypes", {
        statics: {
            typeConverterCache: null,
            config: {
                init: function () {
                    this.typeConverterCache = Granular.Collections.CacheDictionary$2(Function,System.Windows.Markup.ITypeConverter).createUsingStringKeys(System.Windows.Markup.KnownTypes.resolveTypeConverter, $asm.$.System.Windows.Markup.KnownTypes.f1);
                }
            },
            getTypeConverter: function (type) {
                return System.Windows.Markup.KnownTypes.typeConverterCache.getValue(type);
            },
            resolveTypeConverter: function (type) {
                if (Bridge.referenceEquals(type, Object)) {
                    return System.Windows.Markup.ObjectTypeConverter.default;
                }

                if (Bridge.referenceEquals(type, String)) {
                    return System.Windows.Markup.StringTypeConverter.default;
                }

                if (Bridge.referenceEquals(type, Boolean)) {
                    return System.Windows.Markup.BooleanTypeConverter.default;
                }

                if (Bridge.referenceEquals(type, System.Int32)) {
                    return System.Windows.Markup.Int32TypeConverter.default;
                }

                if (Bridge.referenceEquals(type, System.Double)) {
                    return System.Windows.Markup.DoubleTypeConverter.default;
                }

                if (Bridge.referenceEquals(type, System.TimeSpan)) {
                    return System.Windows.Markup.TimeSpanTypeConverter.default;
                }

                if (Bridge.Reflection.isEnum(type)) {
                    return new System.Windows.Markup.EnumTypeConverter(type);
                }

                if (Bridge.referenceEquals(type, Function)) {
                    return System.Windows.Markup.TypeTypeConverter.default;
                }

                if (Bridge.referenceEquals(type, System.Uri)) {
                    return System.Windows.Markup.UriTypeConverter.default;
                }

                if ((type.$genericTypeDefinition !== undefined) && Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type), System.Nullable$1)) {
                    return System.Windows.Markup.KnownTypes.getTypeConverter(Granular.Compatibility.Linq.Enumerable.first(Function, Bridge.Reflection.getGenericArguments(type)));
                }

                var typeConverterAttribute = Bridge.as(Granular.Compatibility.Linq.Enumerable.firstOrDefault(Object, Bridge.Reflection.getAttributes(type, System.Windows.Markup.TypeConverterAttribute, false)), System.Windows.Markup.TypeConverterAttribute);
                if (typeConverterAttribute != null) {
                    return Bridge.as(Bridge.createInstance(typeConverterAttribute.getConverterType()), System.Windows.Markup.ITypeConverter);
                }

                return null;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.KnownTypes", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.KnownTypes, {
        f1: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.PropertyAdapter", {
        statics: {
            adaptersCache: null,
            config: {
                init: function () {
                    this.adaptersCache = Granular.Collections.CacheDictionary$2(System.Windows.Markup.TypeMemberKey,System.Windows.Markup.IPropertyAdapter).createUsingStringKeys$1(System.Windows.Markup.PropertyAdapter.tryCreateAdapter, $asm.$.System.Windows.Markup.PropertyAdapter.f1);
                }
            },
            createAdapter: function (targetType, propertyName) {
                var propertyAdapter = { };
                return System.Windows.Markup.PropertyAdapter.adaptersCache.tryGetValue(new System.Windows.Markup.TypeMemberKey(targetType, propertyName), propertyAdapter) ? propertyAdapter.v : null;
            },
            tryCreateAdapter: function (key, adapter) {
                adapter.v = null;

                var dependencyProperty = System.Windows.DependencyProperty.getProperty(key.getType(), key.getMemberName());
                if (dependencyProperty != null) {
                    adapter.v = new System.Windows.Markup.DependencyPropertyAdapter(dependencyProperty);
                    return true;
                }

                var clrProperty = System.Windows.Markup.PropertyAdapter.getClrProperty(key.getType(), key.getMemberName());
                if (clrProperty != null) {
                    adapter.v = new System.Windows.Markup.ClrPropertyAdapter(clrProperty);
                    return true;
                }

                return false;
            },
            getClrProperty: function (containingType, propertyName) {
                var propertyInfo = Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, propertyName);
                return propertyInfo != null && !System.Reflection.PropertyInfoExtensions.isDelegate(propertyInfo) ? propertyInfo : null;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.PropertyAdapter", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.PropertyAdapter, {
        f1: function (typeMemberKey) {
            return typeMemberKey.getStringKey();
        }
    });

    Bridge.define("System.Windows.Markup.PropertyPathParser", {
        statics: {
            lexer: null,
            config: {
                init: function () {
                    this.lexer = new System.Windows.Markup.Lexer([new System.Windows.Markup.RegexTokenDefinition(System.Windows.Markup.PropertyPathParser.TokenType.Terminal, new RegExp("^[\\(\\)\\[\\]\\.,]")), new System.Windows.Markup.RegexTokenDefinition(System.Windows.Markup.PropertyPathParser.TokenType.Value, new RegExp("^[^\\(\\)\\[\\]\\.\\,]*"))]);
                }
            }
        },
        text: null,
        namespaces: null,
        sourceUri: null,
        tokens: null,
        ctor: function (text, namespaces, sourceUri) {
            this.$initialize();
            this.text = text;
            this.namespaces = namespaces;
            this.sourceUri = sourceUri;
        },
        parse: function () {
            this.tokens = new (Granular.Collections.ReadOnlyStack$1(System.Windows.Markup.Token))(System.Windows.Markup.PropertyPathParser.lexer.getTokens(this.text));

            var elements = new (System.Collections.Generic.List$1(System.Windows.IPropertyPathElement))();

            elements.add(this.matchElement(this.namespaces, this.sourceUri));

            while (!this.tokens.getIsEmpty()) {
                this.matchTerminal(".");
                elements.add(this.matchElement(this.namespaces, this.sourceUri));
            }

            return elements;
        },
        matchElement: function (namespaces, sourceUri) {
            this.verifyTokensExists();

            var propertyName = this.tryMatchPropertyName(namespaces);
            var indexRawValues = this.tryMatchIndexRawValues();

            if (propertyName.getIsEmpty() && !System.Linq.Enumerable.from(indexRawValues).any()) {
                throw new Granular.Exception("Can't parse \"{0}\", Property name or Index parameters were expected, \"{1}\" was found at index {2}", [this.text, this.tokens.peek().getValue(), this.tokens.peek().getStart()]);
            }

            return System.Linq.Enumerable.from(indexRawValues).any() ? Bridge.cast(new System.Windows.IndexPropertyPathElement(propertyName, indexRawValues, namespaces, sourceUri), System.Windows.IPropertyPathElement) : new System.Windows.PropertyPathElement(propertyName);
        },
        tryMatchPropertyName: function (namespaces) {
            if (!this.tokens.getIsEmpty() && Bridge.referenceEquals(this.tokens.peek().getValue(), "(")) {
                this.matchTerminal("(");

                var propertyName = this.matchValue();

                if (!this.tokens.getIsEmpty() && Bridge.referenceEquals(this.tokens.peek().getValue(), ".")) {
                    this.matchTerminal(".");
                    propertyName = System.String.format("{0}.{1}", propertyName, this.matchValue());
                }

                this.matchTerminal(")");

                var xamlName = System.Windows.Markup.XamlName.fromPrefixedName(propertyName, namespaces);

                if (xamlName.getIsEmpty()) {
                    throw new Granular.Exception("Can't parse \"{0}\", Can't parse property name \"{1}\" at index {2}, is namespace missing?", [this.text, propertyName, ((((this.tokens.peek().getStart() - propertyName.length) | 0) - 1) | 0)]);
                }

                return xamlName;
            }

            if (!this.tokens.getIsEmpty() && System.Nullable.getValue(Bridge.cast(this.tokens.peek().getId(), System.Int32)) === System.Windows.Markup.PropertyPathParser.TokenType.Value) {
                return new System.Windows.Markup.XamlName(this.matchValue());
            }

            return System.Windows.Markup.XamlName.empty;
        },
        tryMatchIndexRawValues: function () {
            var values = new (System.Collections.Generic.List$1(String))();

            if (!this.tokens.getIsEmpty() && Bridge.referenceEquals(this.tokens.peek().getValue(), "[")) {
                this.matchTerminal("[");
                values.add(this.matchValue());

                while (!this.tokens.getIsEmpty() && Bridge.referenceEquals(this.tokens.peek().getValue(), ",")) {
                    this.matchTerminal(",");
                    values.add(this.matchValue());
                }

                this.matchTerminal("]");
            }

            return values;
        },
        matchValue: function () {
            this.verifyTokensExists();

            var token = this.tokens.pop();

            if (System.Nullable.getValue(Bridge.cast(token.getId(), System.Int32)) !== System.Windows.Markup.PropertyPathParser.TokenType.Value) {
                throw new Granular.Exception("Can't parse \"{0}\", \"{1}\" was not expected at index {2}", [this.text, token.getValue(), token.getStart()]);
            }

            return token.getValue();
        },
        matchTerminal: function (terminal) {
            this.verifyTokensExists();

            var token = this.tokens.pop();

            if (System.Nullable.getValue(Bridge.cast(token.getId(), System.Int32)) !== System.Windows.Markup.PropertyPathParser.TokenType.Terminal || !Bridge.referenceEquals(token.getValue(), terminal)) {
                throw new Granular.Exception("Can't parse \"{0}\", \"{1}\" is expected, \"{2}\" was found at index {3}", [this.text, terminal, token.getValue(), token.getStart()]);
            }

            return token;
        },
        verifyTokensExists: function () {
            if (this.tokens.getIsEmpty()) {
                throw new Granular.Exception("Can't parse \"{0}\", stream was terminated unexpectedly", [this.text]);
            }
        }
    });

    Bridge.define("System.Windows.Markup.PropertyPathParser.TokenType", {
        $kind: "enum",
        statics: {
            Terminal: 0,
            Value: 1
        }
    });

    Bridge.define("System.Windows.Markup.SupportsValueProviderAttribute", {
        inherits: [System.Attribute]
    });

    Bridge.define("System.Windows.Markup.TypeConverter", {
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Markup.TypeConverter.EmptyTypeConverter();
                }
            },
            tryGetTypeConverter: function (sourceType, targetType, typeConverter) {
                if (Bridge.Reflection.isAssignableFrom(targetType, sourceType)) {
                    typeConverter.v = System.Windows.Markup.TypeConverter.empty;
                    return true;
                }

                typeConverter.v = System.Windows.Markup.KnownTypes.getTypeConverter(targetType);
                return typeConverter.v != null;
            },
            getTypeConverter: function (sourceType, targetType) {
                var typeConverter = { };

                if (!System.Windows.Markup.TypeConverter.tryGetTypeConverter(sourceType, targetType, typeConverter)) {
                    throw new Granular.Exception("Can't create type converter from \"{0}\" to \"{1}\"", [Bridge.Reflection.getTypeName(sourceType), Bridge.Reflection.getTypeName(targetType)]);
                }

                return typeConverter.v;
            },
            tryConvertValue: function (value, type, namespaces, sourceUri, result) {
                var typeConverter = { };

                if (System.Windows.Markup.TypeConverter.tryGetTypeConverter(Bridge.getType(value), type, typeConverter)) {
                    result.v = typeConverter.v.System$Windows$Markup$ITypeConverter$convertFrom(namespaces, sourceUri, value);
                    return true;
                }

                result.v = null;
                return false;
            },
            convertValue: function (value, type, namespaces, sourceUri) {
                var result = { };

                if (!System.Windows.Markup.TypeConverter.tryConvertValue(value, type, namespaces, sourceUri, result)) {
                    throw new Granular.Exception("Can't convert \"{0}\" to {1}", [value, Bridge.Reflection.getTypeName(type)]);
                }

                return result.v;
            }
        }
    });

    Bridge.define("System.Windows.Markup.TypeConverterAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                ConverterType: null
            }
        },
        ctor: function (converterType) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setConverterType(converterType);
        }
    });

    Bridge.define("System.Windows.Markup.TypeMemberKey", {
        hashCode: 0,
        config: {
            properties: {
                Type: null,
                MemberName: null,
                StringKey: null
            }
        },
        ctor: function (type, memberName) {
            this.$initialize();
            this.setType(type);
            this.setMemberName(memberName);
            this.setStringKey(System.String.concat(Bridge.Reflection.getTypeFullName(this.getType()), ",", this.getMemberName()));

            this.hashCode = Bridge.getHashCode(this.getStringKey());
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Markup.TypeMemberKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getType(), other.getType()) && Bridge.equals(this.getMemberName(), other.getMemberName());
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("{0}.{1}", Bridge.Reflection.getTypeFullName(this.getType()), this.getMemberName());
        }
    });

    Bridge.define("System.Windows.Markup.TypeParser", {
        statics: {
            clrNamespacePrefix: "clr-namespace:",
            assemblyQualifier: ";assembly=",
            resolvedTypesCache: null,
            xmlnsDefinitionAttributesCache: null,
            config: {
                init: function () {
                    this.resolvedTypesCache = Granular.Collections.CacheDictionary$2(System.Windows.Markup.XamlName,Function).createUsingStringKeys$1(System.Windows.Markup.TypeParser.tryResolveType, $asm.$.System.Windows.Markup.TypeParser.f1);
                }
            },
            parseType: function (prefixedTypeName, namespaces) {
                return System.Windows.Markup.TypeParser.parseType$1(System.Windows.Markup.XamlName.fromPrefixedName(prefixedTypeName, namespaces));
            },
            parseType$1: function (name) {
                var type = { };

                if (!System.Windows.Markup.TypeParser.tryParseType$1(name, type)) {
                    throw new Granular.Exception("Type \"{0}\" wasn't found", [name]);
                }

                return type.v;
            },
            tryParseType: function (prefixedTypeName, namespaces, type) {
                return System.Windows.Markup.TypeParser.tryParseType$1(System.Windows.Markup.XamlName.fromPrefixedName(prefixedTypeName, namespaces), type);
            },
            tryParseType$1: function (name, type) {
                return System.Windows.Markup.TypeParser.resolvedTypesCache.tryGetValue(name, type);
            },
            tryResolveType: function (name, type) {
                if (System.Windows.Markup.XamlTypes.tryParseXamlType(name, type)) {
                    return true;
                }

                var extensionName = new System.Windows.Markup.XamlName(System.String.format("{0}Extension", name.getLocalName()), name.getNamespaceName());

                return System.Windows.Markup.TypeParser.tryGetType$2(name, type) || System.Windows.Markup.TypeParser.tryGetType$2(extensionName, type);
            },
            tryGetType$2: function (xamlName, type) {
                var $t;
                if (Granular.Compatibility.String.startsWith$1(xamlName.getNamespaceName(), System.Windows.Markup.TypeParser.clrNamespacePrefix)) {
                    var clrNamespace = System.Windows.Markup.TypeParser.getClrNamespace(xamlName.getNamespaceName().substr(System.Windows.Markup.TypeParser.clrNamespacePrefix.length));
                    var assemblyName = System.Windows.Markup.TypeParser.getAssemblyName(xamlName.getNamespaceName().substr(System.Windows.Markup.TypeParser.clrNamespacePrefix.length));

                    if (System.Windows.Markup.TypeParser.tryGetType(xamlName.getLocalName(), clrNamespace, assemblyName, type)) {
                        return true;
                    }

                    return false;
                }

                $t = Bridge.getEnumerator(System.Windows.Markup.TypeParser.getXmlnsDefinitionAttributes(), System.Windows.Markup.XmlnsDefinitionAttribute);
                while ($t.moveNext()) {
                    var xmlnsDefinition = $t.getCurrent();
                    if (Bridge.referenceEquals(xmlnsDefinition.getXmlNamespace(), xamlName.getNamespaceName()) && System.Windows.Markup.TypeParser.tryGetType(xamlName.getLocalName(), xmlnsDefinition.getClrNamespace(), xmlnsDefinition.getAssemblyName(), type)) {
                        return true;
                    }
                }

                type.v = null;
                return false;
            },
            tryGetType: function (localName, clrNamespace, assemblyName, type) {
                var $t;
                if (!Granular.Extensions.StringExtensions.isNullOrEmpty(assemblyName)) {
                    return System.Windows.Markup.TypeParser.tryGetType$1(System.String.format("{0}.{1}, {2}", clrNamespace, localName, assemblyName), type);
                }

                if (System.Windows.Markup.TypeParser.tryGetType$1(System.String.format("{0}.{1}", clrNamespace, localName), type)) {
                    return true;
                }

                $t = Bridge.getEnumerator(Object.keys(System.Reflection.Assembly.assemblies).map(function(n) { return System.Reflection.Assembly.assemblies[n]; }), System.Reflection.Assembly);
                while ($t.moveNext()) {
                    var assembly = $t.getCurrent();
                    if (System.Windows.Markup.TypeParser.tryGetType$1(System.String.format("{0}.{1}, {2}", clrNamespace, localName, System.AssemblyExtensions.getName(assembly).getName()), type)) {
                        return true;
                    }
                }

                type.v = null;
                return false;
            },
            tryGetType$1: function (qualifiedTypeName, type) {
                type.v = Granular.Compatibility.Type.getType(qualifiedTypeName);
                return type.v != null;
            },
            getClrNamespace: function (qualifiedNamespace) {
                var assemblyQualifierIndex = System.String.indexOf(qualifiedNamespace, System.Windows.Markup.TypeParser.assemblyQualifier);
                return assemblyQualifierIndex === -1 ? qualifiedNamespace : qualifiedNamespace.substr(0, assemblyQualifierIndex);
            },
            getAssemblyName: function (qualifiedNamespace) {
                var assemblyQualifierIndex = System.String.indexOf(qualifiedNamespace, System.Windows.Markup.TypeParser.assemblyQualifier);
                return assemblyQualifierIndex === -1 ? "" : qualifiedNamespace.substr(((assemblyQualifierIndex + System.Windows.Markup.TypeParser.assemblyQualifier.length) | 0));
            },
            getXmlnsDefinitionAttributes: function () {
                if (System.Windows.Markup.TypeParser.xmlnsDefinitionAttributesCache == null) {
                    System.Windows.Markup.TypeParser.xmlnsDefinitionAttributesCache = System.Linq.Enumerable.from(Object.keys(System.Reflection.Assembly.assemblies).map(function(n) { return System.Reflection.Assembly.assemblies[n]; })).selectMany($asm.$.System.Windows.Markup.TypeParser.f2).toArray();
                }

                return System.Windows.Markup.TypeParser.xmlnsDefinitionAttributesCache;
            }
        }
    });

    Bridge.ns("System.Windows.Markup.TypeParser", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.TypeParser, {
        f1: function (xamlName) {
            return xamlName.getFullName();
        },
        f2: function (assembly) {
            return Granular.Extensions.AssemblyExtensions.getCustomAttributesCached(System.Windows.Markup.XmlnsDefinitionAttribute, assembly);
        }
    });

    Bridge.define("System.Windows.Markup.XamlElementExtensions", {
        statics: {
            getElementType: function (element) {
                return System.Windows.Markup.TypeParser.parseType$1(element.getName());
            }
        }
    });

    Bridge.define("System.Windows.Markup.XamlLoader", {
        statics: {
            load: function (resource) {
                var factory = System.Windows.Markup.ElementFactory.fromXamlElement(resource, null);
                return factory.System$Windows$Markup$IElementFactory$createElement(new System.Windows.Markup.InitializeContext.ctor());
            },
            load$1: function (target, resource) {
                var initializer = new System.Windows.Markup.ElementInitializer(resource);
                initializer.System$Windows$Markup$IElementInitializer$initializeElement(target, new System.Windows.Markup.InitializeContext.ctor());
            }
        }
    });

    Bridge.define("System.Windows.Markup.XamlNameExtensions", {
        statics: {
            resolveContainingType: function (name, defaultContainingType) {
                return name.getHasContainingTypeName() ? System.Windows.Markup.TypeParser.parseType$1(new System.Windows.Markup.XamlName(name.getContainingTypeName(), name.getNamespaceName())) : defaultContainingType;
            }
        }
    });

    Bridge.define("System.Windows.Markup.XamlTypes", {
        statics: {
            tryParseXamlType: function (name, type) {
                if (System.Windows.Markup.XamlName.op_Equality(name, System.Windows.Markup.XamlLanguage.nullTypeName)) {
                    type.v = System.Windows.Markup.XamlTypes.NullProvider;
                    return true;
                }

                if (System.Windows.Markup.XamlName.op_Equality(name, System.Windows.Markup.XamlLanguage.typeTypeName)) {
                    type.v = System.Windows.Markup.XamlTypes.TypeProvider;
                    return true;
                }

                type.v = null;
                return false;
            },
            parseXamlType: function (xamlName) {
                var type = { };

                if (!System.Windows.Markup.XamlTypes.tryParseXamlType(xamlName, type)) {
                    throw new Granular.Exception("Type {0} wasn't found", [xamlName]);
                }

                return type.v;
            }
        }
    });

    Bridge.define("System.Windows.Markup.XmlnsDefinitionAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                XmlNamespace: null,
                ClrNamespace: null,
                AssemblyName: null
            }
        },
        ctor: function (xmlNamespace, clrNamespace, assemblyName) {
            if (assemblyName === void 0) { assemblyName = null; }

            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setXmlNamespace(xmlNamespace);
            this.setClrNamespace(clrNamespace);
            this.setAssemblyName(assemblyName);
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimatableExtensions", {
        statics: {
            clearAnimationClocks: function (animatable, dependencyProperty, layerOwner) {
                if (layerOwner === void 0) { layerOwner = null; }
                animatable.System$Windows$Media$Animation$IAnimatable$setAnimationClocks(dependencyProperty, System.Array.init(0, null, System.Windows.Media.Animation.AnimationTimelineClock), layerOwner);
            },
            applyAnimationClock: function (animatable, dependencyProperty, animationClock, handoffBehavior, layerOwner) {
                if (handoffBehavior === void 0) { handoffBehavior = 0; }
                if (layerOwner === void 0) { layerOwner = null; }
                var animationClocks = animationClock != null ? System.Array.init([animationClock], System.Windows.Media.Animation.AnimationTimelineClock) : System.Array.init(0, null, System.Windows.Media.Animation.AnimationTimelineClock);
                System.Windows.Media.Animation.AnimatableExtensions.applyAnimationClocks(animatable, dependencyProperty, animationClocks, handoffBehavior, layerOwner);
            },
            applyAnimationClocks: function (animatable, dependencyProperty, animationClocks, handoffBehavior, layerOwner) {
                if (handoffBehavior === void 0) { handoffBehavior = 0; }
                if (layerOwner === void 0) { layerOwner = null; }
                if (handoffBehavior === System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace) {
                    animatable.System$Windows$Media$Animation$IAnimatable$setAnimationClocks(dependencyProperty, animationClocks, layerOwner);
                } else {
                    animatable.System$Windows$Media$Animation$IAnimatable$addAnimationClocks(dependencyProperty, animationClocks, layerOwner);
                }
            },
            beginAnimation: function (animatable, dependencyProperty, animation, handoffBehavior, layerOwner) {
                if (handoffBehavior === void 0) { handoffBehavior = 0; }
                if (layerOwner === void 0) { layerOwner = null; }
                var animationClock = Bridge.cast(animation.createClock(), System.Windows.Media.Animation.AnimationTimelineClock);
                System.Windows.Media.Animation.AnimatableExtensions.applyAnimationClock(animatable, dependencyProperty, animationClock, handoffBehavior, layerOwner);
                animationClock.begin(animatable.System$Windows$Media$Animation$IAnimatable$getRootClock());
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.IRootClock", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Animation.IClock", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Animation.AnimationLayer", {
        inherits: [System.IDisposable],
        statics: {
            unsetValue: null,
            config: {
                init: function () {
                    this.unsetValue = new System.Windows.Data.NamedObject("AnimationLayer.UnsetValue");
                }
            }
        },
        clocks: null,
        snapshotValue: null,
        config: {
            events: {
                ClockInvalidated: null
            },
            alias: [
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.clocks = System.Array.init(0, null, System.Windows.Media.Animation.AnimationTimelineClock);
            this.snapshotValue = System.Windows.Media.Animation.AnimationLayer.unsetValue;
        },
        getHasValue: function () {
            return System.Linq.Enumerable.from(this.clocks).any($asm.$.System.Windows.Media.Animation.AnimationLayer.f1);
        },
        getIsEmpty: function () {
            return !System.Linq.Enumerable.from(this.clocks).any();
        },
        getValue: function (defaultDestinationValue) {
            var $t;
            var defaultOriginValue = Bridge.referenceEquals(this.snapshotValue, System.Windows.Media.Animation.AnimationLayer.unsetValue) ? defaultDestinationValue : this.snapshotValue;

            $t = Bridge.getEnumerator(this.clocks, System.Windows.Media.Animation.AnimationTimelineClock);
            while ($t.moveNext()) {
                var clock = $t.getCurrent();
                if (clock.getCurrentState().getProgressState() === System.Windows.Media.Animation.ClockProgressState.Active || clock.getIsFilling()) {
                    defaultOriginValue = clock.getValue(defaultOriginValue, defaultDestinationValue);
                }
            }

            return defaultOriginValue;
        },
        setClocks: function (newClocks, defaultDestinationValue) {
            this.detachClocks(this.clocks);

            this.snapshotValue = System.Linq.Enumerable.from(newClocks).any() ? this.getValue(defaultDestinationValue) : System.Windows.Media.Animation.AnimationLayer.unsetValue;
            this.clocks = System.Linq.Enumerable.from(newClocks).toArray();

            this.attachClocks(this.clocks);
        },
        addClocks: function (newClocks) {
            if (System.Linq.Enumerable.from(newClocks).except(this.clocks).count() !== System.Linq.Enumerable.from(newClocks).count()) {
                throw new Granular.Exception("Can't add clocks that already exist on the animation layer");
            }

            this.attachClocks(newClocks);

            this.clocks = System.Linq.Enumerable.from(this.clocks).concat(newClocks).toArray();
        },
        removeClocks: function (oldClocks) {
            if (System.Linq.Enumerable.from(oldClocks).except(this.clocks).count() !== 0) {
                throw new Granular.Exception("Can't remove clocks that don't exist on the animation layer");
            }

            this.detachClocks(oldClocks);

            this.clocks = System.Linq.Enumerable.from(this.clocks).except(oldClocks).toArray();
        },
        attachClocks: function (newClocks) {
            var $t;
            $t = Bridge.getEnumerator(newClocks, System.Windows.Media.Animation.AnimationTimelineClock);
            while ($t.moveNext()) {
                var clock = $t.getCurrent();
                clock.addInvalidated(Bridge.fn.cacheBind(this, this.onClockInvalidated));
            }
        },
        detachClocks: function (oldClocks) {
            var $t;
            $t = Bridge.getEnumerator(oldClocks, System.Windows.Media.Animation.AnimationTimelineClock);
            while ($t.moveNext()) {
                var clock = $t.getCurrent();
                clock.removeInvalidated(Bridge.fn.cacheBind(this, this.onClockInvalidated));
            }
        },
        onClockInvalidated: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.ClockInvalidated, this);
        },
        dispose: function () {
            this.detachClocks(this.clocks);
        }
    });

    Bridge.ns("System.Windows.Media.Animation.AnimationLayer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.AnimationLayer, {
        f1: function (clock) {
            return clock.getCurrentState().getProgressState() === System.Windows.Media.Animation.ClockProgressState.Active || clock.getIsFilling();
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationLayerCollection", {
        defaultLayer: null,
        layers: null,
        config: {
            events: {
                LayerInvalidated: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.defaultLayer = new System.Windows.Media.Animation.AnimationLayer();
            this.defaultLayer.addClockInvalidated(Bridge.fn.cacheBind(this, this.onAnimationLayerClockInvalidated));

            this.layers = new (System.Collections.Generic.Dictionary$2(System.Windows.Media.Animation.AnimationLayerKey,System.Windows.Media.Animation.AnimationLayer))();
        },
        getHasValue: function () {
            return this.defaultLayer.getHasValue() || System.Linq.Enumerable.from(this.layers.getValues()).any($asm.$.System.Windows.Media.Animation.AnimationLayerCollection.f1);
        },
        getValue: function (defaultDestinationValue) {
            var $t;
            $t = Bridge.getEnumerator(this.layers.getValues(), System.Windows.Media.Animation.AnimationLayer);
            while ($t.moveNext()) {
                var layer = $t.getCurrent();
                defaultDestinationValue = layer.getValue(defaultDestinationValue);
            }

            return this.defaultLayer.getValue(defaultDestinationValue);
        },
        setClocks: function (newClocks, defaultDestinationValue, key) {
            if (System.Linq.Enumerable.from(newClocks).any() || Bridge.referenceEquals(key, System.Windows.Media.Animation.AnimationLayerKey.default)) {
                this.getAnimationLayer(key).setClocks(newClocks, defaultDestinationValue);
            } else {
                this.removeAnimationLayer(key);
            }

            Granular.Extensions.EventHandlerExtensions.raise$2(this.LayerInvalidated, this);
        },
        addClocks: function (newClocks, key) {
            this.getAnimationLayer(key).addClocks(newClocks);
            Granular.Extensions.EventHandlerExtensions.raise$2(this.LayerInvalidated, this);
        },
        removeClocks: function (newClocks, key) {
            var animationLayer = this.getAnimationLayer(key);

            animationLayer.removeClocks(newClocks);

            if (!Bridge.referenceEquals(key, System.Windows.Media.Animation.AnimationLayerKey.default) && animationLayer.getIsEmpty()) {
                this.removeAnimationLayer(key);
            }

            Granular.Extensions.EventHandlerExtensions.raise$2(this.LayerInvalidated, this);
        },
        getAnimationLayer: function (key) {
            if (Bridge.referenceEquals(key, System.Windows.Media.Animation.AnimationLayerKey.default)) {
                return this.defaultLayer;
            }

            var layer = { };

            if (!this.layers.tryGetValue(key, layer)) {
                layer.v = new System.Windows.Media.Animation.AnimationLayer();
                layer.v.addClockInvalidated(Bridge.fn.cacheBind(this, this.onAnimationLayerClockInvalidated));

                this.layers.add(key, layer.v);
            }

            return layer.v;
        },
        removeAnimationLayer: function (key) {
            var layer = { };

            if (Bridge.referenceEquals(key, System.Windows.Media.Animation.AnimationLayerKey.default)) {
                throw new Granular.Exception("Can't remove default animation layer");
            }

            if (this.layers.tryGetValue(key, layer)) {
                layer.v.removeClockInvalidated(Bridge.fn.cacheBind(this, this.onAnimationLayerClockInvalidated));
                layer.v.dispose();

                this.layers.remove(key);
            }
        },
        onAnimationLayerClockInvalidated: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.LayerInvalidated, this);
        }
    });

    Bridge.ns("System.Windows.Media.Animation.AnimationLayerCollection", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.AnimationLayerCollection, {
        f1: function (layer) {
            return layer.getHasValue();
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationLayerKey", {
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.Animation.AnimationLayerKey(null);
                }
            },
            fromLayerOwner: function (layerOwner) {
                return layerOwner == null ? System.Windows.Media.Animation.AnimationLayerKey.default : new System.Windows.Media.Animation.AnimationLayerKey(layerOwner);
            }
        },
        layerOwner: null,
        ctor: function (layerOwner) {
            this.$initialize();
            this.layerOwner = layerOwner;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Media.Animation.AnimationLayerKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.layerOwner, other.layerOwner);
        },
        getHashCode: function () {
            return this.layerOwner == null ? 0 : Bridge.getHashCode(this.layerOwner);
        }
    });

    Bridge.define("System.Windows.Media.Animation.IEasingFunction", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Animation.ClockProgressState", {
        $kind: "enum",
        statics: {
            BeforeStarted: 0,
            Active: 1,
            AfterEnded: 2
        }
    });

    Bridge.define("System.Windows.Media.Animation.ClockState", {
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Media.Animation.ClockState(System.Windows.Media.Animation.ClockProgressState.BeforeStarted, 0, 0, Granular.Compatibility.TimeSpan.minValue, Granular.Compatibility.TimeSpan.maxValue);
                }
            }
        },
        config: {
            properties: {
                ProgressState: 0,
                Progress: 0,
                Iteration: 0,
                PreviousTick: null,
                NextTick: null
            },
            init: function () {
                this.PreviousTick = new System.TimeSpan();
                this.NextTick = new System.TimeSpan();
            }
        },
        ctor: function (progressState, progress, iteration, previousTick, nextTick) {
            this.$initialize();
            this.setProgressState(progressState);
            this.setProgress(progress);
            this.setIteration(iteration);
            this.setPreviousTick(previousTick);
            this.setNextTick(nextTick);
        }
    });

    Bridge.define("System.Windows.Media.Color", {
        statics: {
            fromArgb: function (a, r, g, b) {
                return new System.Windows.Media.Color(a, r, g, b);
            },
            fromRgb: function (r, g, b) {
                return new System.Windows.Media.Color(255, r, g, b);
            },
            fromUInt32: function (argb) {
                return new System.Windows.Media.Color((((((argb & 4278190080) >>> 0)) >>> 24) & 255), (((((argb & 16711680) >>> 0)) >>> 16) & 255), (((((argb & 65280) >>> 0)) >>> 8) & 255), ((((argb & 255) >>> 0)) & 255));
            },
            op_Equality: function (color1, color2) {
                return Bridge.equals(color1, color2);
            },
            op_Inequality: function (color1, color2) {
                return !(System.Windows.Media.Color.op_Equality(color1, color2));
            },
            op_Addition: function (color1, color2) {
                return new System.Windows.Media.Color(((Granular.Extensions.IntExtensions.bounds((((color1.getA() + color2.getA()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getR() + color2.getR()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getG() + color2.getG()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getB() + color2.getB()) | 0)), 0, 255)) & 255));
            },
            op_Subtraction: function (color1, color2) {
                return new System.Windows.Media.Color(((Granular.Extensions.IntExtensions.bounds((((color1.getA() - color2.getA()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getR() - color2.getR()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getG() - color2.getG()) | 0)), 0, 255)) & 255), ((Granular.Extensions.IntExtensions.bounds((((color1.getB() - color2.getB()) | 0)), 0, 255)) & 255));
            },
            op_Multiply$1: function (color, scalar) {
                return new System.Windows.Media.Color(Bridge.Int.clipu8(Granular.Extensions.DoubleExtensions.bounds((scalar * color.getA()), 0, 255)), Bridge.Int.clipu8(Granular.Extensions.DoubleExtensions.bounds((scalar * color.getR()), 0, 255)), Bridge.Int.clipu8(Granular.Extensions.DoubleExtensions.bounds((scalar * color.getG()), 0, 255)), Bridge.Int.clipu8(Granular.Extensions.DoubleExtensions.bounds((scalar * color.getB()), 0, 255)));
            },
            op_Multiply: function (scalar, color) {
                return System.Windows.Media.Color.op_Multiply$1(color, scalar);
            }
        },
        hashCode: 0,
        config: {
            properties: {
                A: 0,
                R: 0,
                G: 0,
                B: 0
            }
        },
        ctor: function (a, r, g, b) {
            this.$initialize();
            this.setA(a);
            this.setR(r);
            this.setG(g);
            this.setB(b);

            this.hashCode = this.getA() ^ this.getR() ^ this.getG() ^ this.getB();
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Media.Color);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && this.getA() === other.getA() && this.getR() === other.getR() && this.getG() === other.getG() && this.getB() === other.getB();
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("#{0:X2}{1:X2}{2:X2}{3:X2}", this.getA(), this.getR(), this.getG(), this.getB());
        },
        isClose: function (color) {
            return Math.abs(((this.getA() - color.getA()) | 0)) <= 1 && Math.abs(((this.getR() - color.getR()) | 0)) <= 1 && Math.abs(((this.getG() - color.getG()) | 0)) <= 1 && Math.abs(((this.getB() - color.getB()) | 0)) <= 1;
        }
    });

    Bridge.definei("System.Windows.Media.Animation.IAnimationOperations$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("System.Windows.Rect", {
        statics: {
            empty: null,
            zero: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Rect.$ctor2(System.Windows.Point.empty, System.Windows.Size.empty);
                    this.zero = new System.Windows.Rect.$ctor3(System.Windows.Size.zero);
                }
            },
            isNullOrEmpty: function (rect) {
                return Bridge.referenceEquals(rect, null) || rect.getIsEmpty();
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Rect.f1).toArray();

                if (values.length === 2) {
                    return new System.Windows.Rect.ctor(values[0], values[1]);
                }

                if (values.length === 4) {
                    return new System.Windows.Rect.$ctor1(values[0], values[1], values[2], values[3]);
                }

                throw new Granular.Exception("Can't parse Rect value \"{0}\"", [value]);
            },
            op_Equality: function (rect1, rect2) {
                return Bridge.equals(rect1, rect2);
            },
            op_Inequality: function (rect1, rect2) {
                return !(System.Windows.Rect.op_Equality(rect1, rect2));
            }
        },
        config: {
            properties: {
                Location: null,
                Size: null,
                Left: 0,
                Top: 0,
                Right: 0,
                Bottom: 0,
                Width: 0,
                Height: 0,
                IsEmpty: false
            }
        },
        ctor: function (width, height) {
            System.Windows.Rect.$ctor2.call(this, System.Windows.Point.zero, new System.Windows.Size(width, height));
            //
        },
        $ctor1: function (left, top, width, height) {
            System.Windows.Rect.$ctor2.call(this, new System.Windows.Point.$ctor1(left, top), new System.Windows.Size(width, height));
            //
        },
        $ctor3: function (size) {
            System.Windows.Rect.$ctor2.call(this, System.Windows.Point.zero, size);
            //
        },
        $ctor2: function (location, size) {
            this.$initialize();
            if (System.Windows.PointExtensions.isNullOrEmpty(location) || System.Windows.SizeExtensions.isNullOrEmpty(size)) {
                this.setIsEmpty(true);

                this.setLocation(System.Windows.Point.empty);
                this.setSize(System.Windows.Size.empty);

                this.setLeft(Number.NaN);
                this.setTop(Number.NaN);
                this.setRight(Number.NaN);
                this.setBottom(Number.NaN);
                this.setWidth(Number.NaN);
                this.setHeight(Number.NaN);
            } else {
                if (size.getIsPartiallyEmpty()) {
                    throw new Granular.Exception("Can't create Rect with a size with an empty dimension");
                }

                this.setIsEmpty(false);

                this.setLocation(location);
                this.setSize(size);

                this.setLeft(this.getLocation().getX());
                this.setTop(this.getLocation().getY());
                this.setRight(this.getSize().getWidth() + this.getLocation().getX());
                this.setBottom(this.getSize().getHeight() + this.getLocation().getY());
                this.setWidth(this.getSize().getWidth());
                this.setHeight(this.getSize().getHeight());
            }
        },
        toString: function () {
            return System.String.format("Rect({0}, {1}, {2}, {3})", this.getLeft(), this.getTop(), this.getWidth(), this.getHeight());
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Rect);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getLocation(), other.getLocation()) && Bridge.equals(this.getSize(), other.getSize());
        },
        getHashCode: function () {
            return this.getLocation().getHashCode() ^ this.getSize().getHashCode();
        }
    });

    Bridge.ns("System.Windows.Rect", $asm.$);

    Bridge.apply($asm.$.System.Windows.Rect, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.Thickness", {
        statics: {
            zero: null,
            config: {
                init: function () {
                    this.zero = new System.Windows.Thickness.ctor();
                }
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Thickness.f1).toArray();

                if (values.length === 1) {
                    return new System.Windows.Thickness.$ctor1(values[0]);
                }

                if (values.length === 2) {
                    return new System.Windows.Thickness.$ctor2(values[0], values[1]);
                }

                if (values.length === 4) {
                    return new System.Windows.Thickness.$ctor3(values[0], values[1], values[2], values[3]);
                }

                throw new Granular.Exception("Can't parse Thickness value \"{0}\"", [value]);
            },
            op_Equality: function (thickness1, thickness2) {
                return Bridge.equals(thickness1, thickness2);
            },
            op_Inequality: function (thickness1, thickness2) {
                return !(System.Windows.Thickness.op_Equality(thickness1, thickness2));
            },
            op_UnaryNegation: function (thickness) {
                if (System.Windows.Thickness.op_Equality(thickness, System.Windows.Thickness.zero)) {
                    return thickness;
                }

                return new System.Windows.Thickness.$ctor3(-thickness.getLeft(), -thickness.getTop(), -thickness.getRight(), -thickness.getBottom());
            },
            op_Addition: function (thickness1, thickness2) {
                if (System.Windows.Thickness.op_Equality(thickness1, System.Windows.Thickness.zero)) {
                    return thickness2;
                }

                if (System.Windows.Thickness.op_Equality(thickness2, System.Windows.Thickness.zero)) {
                    return thickness1;
                }

                return new System.Windows.Thickness.$ctor3(thickness1.getLeft() + thickness2.getLeft(), thickness1.getTop() + thickness2.getTop(), thickness1.getRight() + thickness2.getRight(), thickness1.getBottom() + thickness2.getBottom());
            },
            op_Subtraction: function (thickness1, thickness2) {
                if (System.Windows.Thickness.op_Equality(thickness1, System.Windows.Thickness.zero)) {
                    return System.Windows.Thickness.op_UnaryNegation(thickness2);
                }

                if (System.Windows.Thickness.op_Equality(thickness2, System.Windows.Thickness.zero)) {
                    return thickness1;
                }

                return new System.Windows.Thickness.$ctor3(thickness1.getLeft() - thickness2.getLeft(), thickness1.getTop() - thickness2.getTop(), thickness1.getRight() - thickness2.getRight(), thickness1.getBottom() - thickness2.getBottom());
            },
            op_Multiply$1: function (thickness, scalar) {
                if (scalar === 1 || Bridge.referenceEquals(thickness, System.Windows.Thickness.zero)) {
                    return thickness;
                }

                return new System.Windows.Thickness.$ctor3(thickness.getLeft() * scalar, thickness.getTop() * scalar, thickness.getRight() * scalar, thickness.getBottom() * scalar);
            },
            op_Multiply: function (scalar, thickness) {
                return System.Windows.Thickness.op_Multiply$1(thickness, scalar);
            },
            op_Implicit: function (uniformLength) {
                return new System.Windows.Thickness.$ctor1(uniformLength);
            }
        },
        config: {
            properties: {
                Left: 0,
                Top: 0,
                Right: 0,
                Bottom: 0,
                Location: null,
                Size: null
            }
        },
        ctor: function () {
            System.Windows.Thickness.$ctor3.call(this, 0, 0, 0, 0);
            //
        },
        $ctor1: function (uniformLength) {
            System.Windows.Thickness.$ctor3.call(this, uniformLength, uniformLength, uniformLength, uniformLength);
            //
        },
        $ctor2: function (leftRight, topBottom) {
            System.Windows.Thickness.$ctor3.call(this, leftRight, topBottom, leftRight, topBottom);
            //
        },
        $ctor3: function (left, top, right, bottom) {
            this.$initialize();
            this.setLeft(left);
            this.setTop(top);
            this.setRight(right);
            this.setBottom(bottom);

            this.setLocation(left === 0 && top === 0 ? System.Windows.Point.zero : new System.Windows.Point.$ctor1(left, top));
            this.setSize(left + right === 0 && top + bottom === 0 ? System.Windows.Size.zero : new System.Windows.Size(left + right, top + bottom));
        },
        getIsUniform: function () {
            return this.getLeft() === this.getTop() && this.getLeft() === this.getRight() && this.getLeft() === this.getBottom();
        },
        toString: function () {
            return this.getIsUniform() ? System.String.format("Thickness({0})", this.getLeft()) : System.String.format("Thickness({0}, {1}, {2}, {3})", this.getTop(), this.getRight(), this.getBottom(), this.getLeft());
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Thickness);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Granular.Compatibility.EqualityComparer.double.equals2(this.getLeft(), other.getLeft()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getTop(), other.getTop()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getRight(), other.getRight()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getBottom(), other.getBottom());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getLeft()) ^ Bridge.getHashCode(this.getTop()) ^ Bridge.getHashCode(this.getRight()) ^ Bridge.getHashCode(this.getBottom());
        }
    });

    Bridge.ns("System.Windows.Thickness", $asm.$);

    Bridge.apply($asm.$.System.Windows.Thickness, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingMode", {
        $kind: "enum",
        statics: {
            EaseIn: 0,
            EaseOut: 1,
            EaseInOut: 2
        }
    });

    Bridge.define("System.Windows.Media.Animation.FillBehavior", {
        $kind: "enum",
        statics: {
            HoldEnd: 0,
            Stop: 1
        }
    });

    Bridge.define("System.Windows.Media.Animation.HandoffBehavior", {
        $kind: "enum",
        statics: {
            SnapshotAndReplace: 0,
            Compose: 1
        }
    });

    Bridge.define("System.Windows.Media.Animation.KeyTime", {
        statics: {
            paced: null,
            uniform: null,
            config: {
                init: function () {
                    this.paced = new System.Windows.Media.Animation.KeyTime(System.Windows.Media.Animation.KeyTimeType.Paced, System.TimeSpan.zero, Number.NaN);
                    this.uniform = new System.Windows.Media.Animation.KeyTime(System.Windows.Media.Animation.KeyTimeType.Uniform, System.TimeSpan.zero, Number.NaN);
                }
            },
            fromTimeSpan: function (timeSpan) {
                return new System.Windows.Media.Animation.KeyTime(System.Windows.Media.Animation.KeyTimeType.TimeSpan, timeSpan, Number.NaN);
            },
            fromPercent: function (percent) {
                return new System.Windows.Media.Animation.KeyTime(System.Windows.Media.Animation.KeyTimeType.Percent, System.TimeSpan.zero, percent);
            },
            parse: function (value) {
                value = value.trim();

                if (Bridge.referenceEquals(value, "Paced")) {
                    return System.Windows.Media.Animation.KeyTime.paced;
                }

                if (Bridge.referenceEquals(value, "Uniform")) {
                    return System.Windows.Media.Animation.KeyTime.uniform;
                }

                if (System.String.endsWith(value, "%")) {
                    var percent = { };
                    if (Granular.Compatibility.Double.tryParse(value.substr(0, ((value.length - 1) | 0)), percent)) {
                        return System.Windows.Media.Animation.KeyTime.fromPercent(percent.v / 100);
                    }
                }

                var timeSpan = { };
                if (Granular.Compatibility.TimeSpan.tryParse(value, timeSpan)) {
                    return System.Windows.Media.Animation.KeyTime.fromTimeSpan(timeSpan.v);
                }

                throw new Granular.Exception("Can't parse KeyTime value \"{0}\"", [value]);
            }
        },
        config: {
            properties: {
                Type: 0,
                TimeSpan: null,
                Percent: 0
            },
            init: function () {
                this.TimeSpan = new System.TimeSpan();
            }
        },
        ctor: function (type, timeSpan, percent) {
            this.$initialize();
            this.setType(type);
            this.setTimeSpan(timeSpan);
            this.setPercent(percent);
        },
        getHasTimeSpan: function () {
            return this.getType() === System.Windows.Media.Animation.KeyTimeType.TimeSpan;
        },
        getHasPercent: function () {
            return this.getType() === System.Windows.Media.Animation.KeyTimeType.Percent;
        },
        getIsPaced: function () {
            return this.getType() === System.Windows.Media.Animation.KeyTimeType.Paced;
        },
        getIsUniform: function () {
            return this.getType() === System.Windows.Media.Animation.KeyTimeType.Uniform;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Media.Animation.KeyTime);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getType(), other.getType()) && Bridge.equals(this.getTimeSpan(), other.getTimeSpan()) && Bridge.equals(this.getPercent(), other.getPercent());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getType()) ^ Bridge.getHashCode(this.getTimeSpan()) ^ Bridge.getHashCode(this.getPercent());
        }
    });

    Bridge.define("System.Windows.Media.Animation.KeyTimeType", {
        $kind: "enum",
        statics: {
            Uniform: 0,
            Percent: 1,
            TimeSpan: 2,
            Paced: 3
        }
    });

    Bridge.define("System.Windows.Media.Animation.RepeatBehavior", {
        statics: {
            forever: null,
            oneTime: null,
            config: {
                init: function () {
                    this.forever = new System.Windows.Media.Animation.RepeatBehavior(Number.POSITIVE_INFINITY, System.TimeSpan.zero);
                    this.oneTime = new System.Windows.Media.Animation.RepeatBehavior(1, System.TimeSpan.zero);
                }
            },
            fromRepeatCount: function (count) {
                return new System.Windows.Media.Animation.RepeatBehavior(count, System.TimeSpan.zero);
            },
            fromTimeSpan: function (timeSpan) {
                return new System.Windows.Media.Animation.RepeatBehavior(Number.NaN, timeSpan);
            },
            parse: function (value) {
                value = value.trim();

                if (Bridge.referenceEquals(value, "Forever")) {
                    return System.Windows.Media.Animation.RepeatBehavior.forever;
                }

                if (Bridge.referenceEquals(value, "OneTime")) {
                    return System.Windows.Media.Animation.RepeatBehavior.oneTime;
                }

                if (System.String.endsWith(value, "x")) {
                    var count = { };
                    if (Granular.Compatibility.Double.tryParse(value.substr(0, ((value.length - 1) | 0)), count)) {
                        return System.Windows.Media.Animation.RepeatBehavior.fromRepeatCount(count.v);
                    }
                }

                var timeSpan = { };
                if (Granular.Compatibility.TimeSpan.tryParse(value, timeSpan)) {
                    return System.Windows.Media.Animation.RepeatBehavior.fromTimeSpan(timeSpan.v);
                }

                throw new Granular.Exception("Can't parse RepeatBehavior value \"{0}\"", [value]);
            }
        },
        config: {
            properties: {
                Count: 0,
                Duration: null
            },
            init: function () {
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (count, duration) {
            this.$initialize();
            this.setCount(count);
            this.setDuration(duration);
        }
    });

    Bridge.define("System.Windows.Media.Animation.RootClock.ClockSchedule", {
        config: {
            properties: {
                Clock: null,
                NextTick: null
            },
            init: function () {
                this.NextTick = new System.TimeSpan();
            }
        },
        ctor: function (clock) {
            this.$initialize();
            this.setClock(clock);
            this.setNextTick(clock.System$Windows$Media$Animation$IClock$getFirstTick());
        },
        tick: function (time) {
            var state = this.getClock().System$Windows$Media$Animation$IClock$tick(time);
            this.setNextTick(state.getNextTick());
        }
    });

    Bridge.define("System.Windows.Media.Animation.Storyboard.TargetKey", {
        hashCode: 0,
        config: {
            properties: {
                Target: null,
                TargetProperty: null
            }
        },
        ctor: function (target, targetProperty) {
            this.$initialize();
            this.setTarget(target);
            this.setTargetProperty(targetProperty);
            this.hashCode = Bridge.getHashCode(this.getTarget()) ^ this.getTargetProperty().getHashCode();
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Media.Animation.Storyboard.TargetKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getTarget(), other.getTarget()) && Bridge.equals(this.getTargetProperty(), other.getTargetProperty());
        },
        getHashCode: function () {
            return this.hashCode;
        }
    });

    Bridge.define("System.Windows.Media.Brushes", {
        statics: {
            brushes: null,
            config: {
                init: function () {
                    this.brushes = Granular.Collections.CacheDictionary$2(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush).create(System.Windows.Media.Brushes.createBrush);
                }
            },
            getAliceBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getAliceBlue());
            },
            getAntiqueWhite: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getAntiqueWhite());
            },
            getAqua: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getAqua());
            },
            getAquamarine: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getAquamarine());
            },
            getAzure: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getAzure());
            },
            getBeige: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBeige());
            },
            getBisque: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBisque());
            },
            getBlack: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBlack());
            },
            getBlanchedAlmond: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBlanchedAlmond());
            },
            getBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBlue());
            },
            getBlueViolet: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBlueViolet());
            },
            getBrown: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBrown());
            },
            getBurlyWood: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getBurlyWood());
            },
            getCadetBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCadetBlue());
            },
            getChartreuse: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getChartreuse());
            },
            getChocolate: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getChocolate());
            },
            getCoral: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCoral());
            },
            getCornflowerBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCornflowerBlue());
            },
            getCornsilk: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCornsilk());
            },
            getCrimson: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCrimson());
            },
            getCyan: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getCyan());
            },
            getDarkBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkBlue());
            },
            getDarkCyan: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkCyan());
            },
            getDarkGoldenrod: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkGoldenrod());
            },
            getDarkGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkGray());
            },
            getDarkGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkGreen());
            },
            getDarkKhaki: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkKhaki());
            },
            getDarkMagenta: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkMagenta());
            },
            getDarkOliveGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkOliveGreen());
            },
            getDarkOrange: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkOrange());
            },
            getDarkOrchid: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkOrchid());
            },
            getDarkRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkRed());
            },
            getDarkSalmon: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkSalmon());
            },
            getDarkSeaGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkSeaGreen());
            },
            getDarkSlateBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkSlateBlue());
            },
            getDarkSlateGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkSlateGray());
            },
            getDarkTurquoise: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkTurquoise());
            },
            getDarkViolet: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDarkViolet());
            },
            getDeepPink: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDeepPink());
            },
            getDeepSkyBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDeepSkyBlue());
            },
            getDimGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDimGray());
            },
            getDodgerBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getDodgerBlue());
            },
            getFirebrick: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getFirebrick());
            },
            getFloralWhite: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getFloralWhite());
            },
            getForestGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getForestGreen());
            },
            getFuchsia: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getFuchsia());
            },
            getGainsboro: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGainsboro());
            },
            getGhostWhite: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGhostWhite());
            },
            getGold: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGold());
            },
            getGoldenrod: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGoldenrod());
            },
            getGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGray());
            },
            getGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGreen());
            },
            getGreenYellow: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getGreenYellow());
            },
            getHoneydew: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getHoneydew());
            },
            getHotPink: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getHotPink());
            },
            getIndianRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getIndianRed());
            },
            getIndigo: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getIndigo());
            },
            getIvory: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getIvory());
            },
            getKhaki: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getKhaki());
            },
            getLavender: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLavender());
            },
            getLavenderBlush: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLavenderBlush());
            },
            getLawnGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLawnGreen());
            },
            getLemonChiffon: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLemonChiffon());
            },
            getLightBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightBlue());
            },
            getLightCoral: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightCoral());
            },
            getLightCyan: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightCyan());
            },
            getLightGoldenrodYellow: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightGoldenrodYellow());
            },
            getLightGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightGray());
            },
            getLightGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightGreen());
            },
            getLightPink: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightPink());
            },
            getLightSalmon: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightSalmon());
            },
            getLightSeaGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightSeaGreen());
            },
            getLightSkyBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightSkyBlue());
            },
            getLightSlateGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightSlateGray());
            },
            getLightSteelBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightSteelBlue());
            },
            getLightYellow: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLightYellow());
            },
            getLime: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLime());
            },
            getLimeGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLimeGreen());
            },
            getLinen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getLinen());
            },
            getMagenta: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMagenta());
            },
            getMaroon: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMaroon());
            },
            getMediumAquamarine: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumAquamarine());
            },
            getMediumBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumBlue());
            },
            getMediumOrchid: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumOrchid());
            },
            getMediumPurple: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumPurple());
            },
            getMediumSeaGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumSeaGreen());
            },
            getMediumSlateBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumSlateBlue());
            },
            getMediumSpringGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumSpringGreen());
            },
            getMediumTurquoise: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumTurquoise());
            },
            getMediumVioletRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMediumVioletRed());
            },
            getMidnightBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMidnightBlue());
            },
            getMintCream: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMintCream());
            },
            getMistyRose: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMistyRose());
            },
            getMoccasin: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getMoccasin());
            },
            getNavajoWhite: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getNavajoWhite());
            },
            getNavy: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getNavy());
            },
            getOldLace: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOldLace());
            },
            getOlive: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOlive());
            },
            getOliveDrab: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOliveDrab());
            },
            getOrange: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOrange());
            },
            getOrangeRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOrangeRed());
            },
            getOrchid: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getOrchid());
            },
            getPaleGoldenrod: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPaleGoldenrod());
            },
            getPaleGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPaleGreen());
            },
            getPaleTurquoise: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPaleTurquoise());
            },
            getPaleVioletRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPaleVioletRed());
            },
            getPapayaWhip: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPapayaWhip());
            },
            getPeachPuff: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPeachPuff());
            },
            getPeru: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPeru());
            },
            getPink: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPink());
            },
            getPlum: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPlum());
            },
            getPowderBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPowderBlue());
            },
            getPurple: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getPurple());
            },
            getRed: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getRed());
            },
            getRosyBrown: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getRosyBrown());
            },
            getRoyalBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getRoyalBlue());
            },
            getSaddleBrown: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSaddleBrown());
            },
            getSalmon: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSalmon());
            },
            getSandyBrown: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSandyBrown());
            },
            getSeaGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSeaGreen());
            },
            getSeaShell: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSeaShell());
            },
            getSienna: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSienna());
            },
            getSilver: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSilver());
            },
            getSkyBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSkyBlue());
            },
            getSlateBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSlateBlue());
            },
            getSlateGray: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSlateGray());
            },
            getSnow: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSnow());
            },
            getSpringGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSpringGreen());
            },
            getSteelBlue: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getSteelBlue());
            },
            getTan: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getTan());
            },
            getTeal: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getTeal());
            },
            getThistle: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getThistle());
            },
            getTomato: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getTomato());
            },
            getTransparent: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getTransparent());
            },
            getTurquoise: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getTurquoise());
            },
            getViolet: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getViolet());
            },
            getWheat: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getWheat());
            },
            getWhite: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getWhite());
            },
            getWhiteSmoke: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getWhiteSmoke());
            },
            getYellow: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getYellow());
            },
            getYellowGreen: function () {
                return System.Windows.Media.Brushes.brushes.getValue(System.Windows.Media.Colors.getYellowGreen());
            },
            createBrush: function (color) {
                var solidColorBrush = new System.Windows.Media.SolidColorBrush.$ctor1(color);
                solidColorBrush.freeze();
                return solidColorBrush;
            }
        }
    });

    Bridge.define("System.Windows.Media.BrushMappingMode", {
        $kind: "enum",
        statics: {
            Absolute: 0,
            RelativeToBoundingBox: 1
        }
    });

    Bridge.define("System.Windows.Media.ColorExtensions", {
        statics: {
            applyOpacity: function (color, opacity) {
                return opacity === 1 ? color : System.Windows.Media.Color.fromArgb(Bridge.Int.clipu8(opacity * color.getA()), color.getR(), color.getG(), color.getB());
            }
        }
    });

    Bridge.define("System.Windows.Media.Colors", {
        statics: {
            getAliceBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4293982463);
            },
            getAntiqueWhite: function () {
                return System.Windows.Media.Color.fromUInt32(4294634455);
            },
            getAqua: function () {
                return System.Windows.Media.Color.fromUInt32(4278255615);
            },
            getAquamarine: function () {
                return System.Windows.Media.Color.fromUInt32(4286578644);
            },
            getAzure: function () {
                return System.Windows.Media.Color.fromUInt32(4293984255);
            },
            getBeige: function () {
                return System.Windows.Media.Color.fromUInt32(4294309340);
            },
            getBisque: function () {
                return System.Windows.Media.Color.fromUInt32(4294960324);
            },
            getBlack: function () {
                return System.Windows.Media.Color.fromUInt32(4278190080);
            },
            getBlanchedAlmond: function () {
                return System.Windows.Media.Color.fromUInt32(4294962125);
            },
            getBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4278190335);
            },
            getBlueViolet: function () {
                return System.Windows.Media.Color.fromUInt32(4287245282);
            },
            getBrown: function () {
                return System.Windows.Media.Color.fromUInt32(4289014314);
            },
            getBurlyWood: function () {
                return System.Windows.Media.Color.fromUInt32(4292786311);
            },
            getCadetBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4284456608);
            },
            getChartreuse: function () {
                return System.Windows.Media.Color.fromUInt32(4286578432);
            },
            getChocolate: function () {
                return System.Windows.Media.Color.fromUInt32(4291979550);
            },
            getCoral: function () {
                return System.Windows.Media.Color.fromUInt32(4294934352);
            },
            getCornflowerBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4284782061);
            },
            getCornsilk: function () {
                return System.Windows.Media.Color.fromUInt32(4294965468);
            },
            getCrimson: function () {
                return System.Windows.Media.Color.fromUInt32(4292613180);
            },
            getCyan: function () {
                return System.Windows.Media.Color.fromUInt32(4278255615);
            },
            getDarkBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4278190219);
            },
            getDarkCyan: function () {
                return System.Windows.Media.Color.fromUInt32(4278225803);
            },
            getDarkGoldenrod: function () {
                return System.Windows.Media.Color.fromUInt32(4290283019);
            },
            getDarkGray: function () {
                return System.Windows.Media.Color.fromUInt32(4289309097);
            },
            getDarkGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4278215680);
            },
            getDarkKhaki: function () {
                return System.Windows.Media.Color.fromUInt32(4290623339);
            },
            getDarkMagenta: function () {
                return System.Windows.Media.Color.fromUInt32(4287299723);
            },
            getDarkOliveGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4283788079);
            },
            getDarkOrange: function () {
                return System.Windows.Media.Color.fromUInt32(4294937600);
            },
            getDarkOrchid: function () {
                return System.Windows.Media.Color.fromUInt32(4288230092);
            },
            getDarkRed: function () {
                return System.Windows.Media.Color.fromUInt32(4287299584);
            },
            getDarkSalmon: function () {
                return System.Windows.Media.Color.fromUInt32(4293498490);
            },
            getDarkSeaGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4287609999);
            },
            getDarkSlateBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4282924427);
            },
            getDarkSlateGray: function () {
                return System.Windows.Media.Color.fromUInt32(4281290575);
            },
            getDarkTurquoise: function () {
                return System.Windows.Media.Color.fromUInt32(4278243025);
            },
            getDarkViolet: function () {
                return System.Windows.Media.Color.fromUInt32(4287889619);
            },
            getDeepPink: function () {
                return System.Windows.Media.Color.fromUInt32(4294907027);
            },
            getDeepSkyBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4278239231);
            },
            getDimGray: function () {
                return System.Windows.Media.Color.fromUInt32(4285098345);
            },
            getDodgerBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4280193279);
            },
            getFirebrick: function () {
                return System.Windows.Media.Color.fromUInt32(4289864226);
            },
            getFloralWhite: function () {
                return System.Windows.Media.Color.fromUInt32(4294966000);
            },
            getForestGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4280453922);
            },
            getFuchsia: function () {
                return System.Windows.Media.Color.fromUInt32(4294902015);
            },
            getGainsboro: function () {
                return System.Windows.Media.Color.fromUInt32(4292664540);
            },
            getGhostWhite: function () {
                return System.Windows.Media.Color.fromUInt32(4294506751);
            },
            getGold: function () {
                return System.Windows.Media.Color.fromUInt32(4294956800);
            },
            getGoldenrod: function () {
                return System.Windows.Media.Color.fromUInt32(4292519200);
            },
            getGray: function () {
                return System.Windows.Media.Color.fromUInt32(4286611584);
            },
            getGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4278222848);
            },
            getGreenYellow: function () {
                return System.Windows.Media.Color.fromUInt32(4289593135);
            },
            getHoneydew: function () {
                return System.Windows.Media.Color.fromUInt32(4293984240);
            },
            getHotPink: function () {
                return System.Windows.Media.Color.fromUInt32(4294928820);
            },
            getIndianRed: function () {
                return System.Windows.Media.Color.fromUInt32(4291648604);
            },
            getIndigo: function () {
                return System.Windows.Media.Color.fromUInt32(4283105410);
            },
            getIvory: function () {
                return System.Windows.Media.Color.fromUInt32(4294967280);
            },
            getKhaki: function () {
                return System.Windows.Media.Color.fromUInt32(4293977740);
            },
            getLavender: function () {
                return System.Windows.Media.Color.fromUInt32(4293322490);
            },
            getLavenderBlush: function () {
                return System.Windows.Media.Color.fromUInt32(4294963445);
            },
            getLawnGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4286381056);
            },
            getLemonChiffon: function () {
                return System.Windows.Media.Color.fromUInt32(4294965965);
            },
            getLightBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4289583334);
            },
            getLightCoral: function () {
                return System.Windows.Media.Color.fromUInt32(4293951616);
            },
            getLightCyan: function () {
                return System.Windows.Media.Color.fromUInt32(4292935679);
            },
            getLightGoldenrodYellow: function () {
                return System.Windows.Media.Color.fromUInt32(4294638290);
            },
            getLightGray: function () {
                return System.Windows.Media.Color.fromUInt32(4292072403);
            },
            getLightGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4287688336);
            },
            getLightPink: function () {
                return System.Windows.Media.Color.fromUInt32(4294948545);
            },
            getLightSalmon: function () {
                return System.Windows.Media.Color.fromUInt32(4294942842);
            },
            getLightSeaGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4280332970);
            },
            getLightSkyBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4287090426);
            },
            getLightSlateGray: function () {
                return System.Windows.Media.Color.fromUInt32(4286023833);
            },
            getLightSteelBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4289774814);
            },
            getLightYellow: function () {
                return System.Windows.Media.Color.fromUInt32(4294967264);
            },
            getLime: function () {
                return System.Windows.Media.Color.fromUInt32(4278255360);
            },
            getLimeGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4281519410);
            },
            getLinen: function () {
                return System.Windows.Media.Color.fromUInt32(4294635750);
            },
            getMagenta: function () {
                return System.Windows.Media.Color.fromUInt32(4294902015);
            },
            getMaroon: function () {
                return System.Windows.Media.Color.fromUInt32(4286578688);
            },
            getMediumAquamarine: function () {
                return System.Windows.Media.Color.fromUInt32(4284927402);
            },
            getMediumBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4278190285);
            },
            getMediumOrchid: function () {
                return System.Windows.Media.Color.fromUInt32(4290401747);
            },
            getMediumPurple: function () {
                return System.Windows.Media.Color.fromUInt32(4287852763);
            },
            getMediumSeaGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4282168177);
            },
            getMediumSlateBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4286277870);
            },
            getMediumSpringGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4278254234);
            },
            getMediumTurquoise: function () {
                return System.Windows.Media.Color.fromUInt32(4282962380);
            },
            getMediumVioletRed: function () {
                return System.Windows.Media.Color.fromUInt32(4291237253);
            },
            getMidnightBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4279834992);
            },
            getMintCream: function () {
                return System.Windows.Media.Color.fromUInt32(4294311930);
            },
            getMistyRose: function () {
                return System.Windows.Media.Color.fromUInt32(4294960353);
            },
            getMoccasin: function () {
                return System.Windows.Media.Color.fromUInt32(4294960309);
            },
            getNavajoWhite: function () {
                return System.Windows.Media.Color.fromUInt32(4294958765);
            },
            getNavy: function () {
                return System.Windows.Media.Color.fromUInt32(4278190208);
            },
            getOldLace: function () {
                return System.Windows.Media.Color.fromUInt32(4294833638);
            },
            getOlive: function () {
                return System.Windows.Media.Color.fromUInt32(4286611456);
            },
            getOliveDrab: function () {
                return System.Windows.Media.Color.fromUInt32(4285238819);
            },
            getOrange: function () {
                return System.Windows.Media.Color.fromUInt32(4294944000);
            },
            getOrangeRed: function () {
                return System.Windows.Media.Color.fromUInt32(4294919424);
            },
            getOrchid: function () {
                return System.Windows.Media.Color.fromUInt32(4292505814);
            },
            getPaleGoldenrod: function () {
                return System.Windows.Media.Color.fromUInt32(4293847210);
            },
            getPaleGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4288215960);
            },
            getPaleTurquoise: function () {
                return System.Windows.Media.Color.fromUInt32(4289720046);
            },
            getPaleVioletRed: function () {
                return System.Windows.Media.Color.fromUInt32(4292571283);
            },
            getPapayaWhip: function () {
                return System.Windows.Media.Color.fromUInt32(4294963157);
            },
            getPeachPuff: function () {
                return System.Windows.Media.Color.fromUInt32(4294957753);
            },
            getPeru: function () {
                return System.Windows.Media.Color.fromUInt32(4291659071);
            },
            getPink: function () {
                return System.Windows.Media.Color.fromUInt32(4294951115);
            },
            getPlum: function () {
                return System.Windows.Media.Color.fromUInt32(4292714717);
            },
            getPowderBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4289781990);
            },
            getPurple: function () {
                return System.Windows.Media.Color.fromUInt32(4286578816);
            },
            getRed: function () {
                return System.Windows.Media.Color.fromUInt32(4294901760);
            },
            getRosyBrown: function () {
                return System.Windows.Media.Color.fromUInt32(4290547599);
            },
            getRoyalBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4282477025);
            },
            getSaddleBrown: function () {
                return System.Windows.Media.Color.fromUInt32(4287317267);
            },
            getSalmon: function () {
                return System.Windows.Media.Color.fromUInt32(4294606962);
            },
            getSandyBrown: function () {
                return System.Windows.Media.Color.fromUInt32(4294222944);
            },
            getSeaGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4281240407);
            },
            getSeaShell: function () {
                return System.Windows.Media.Color.fromUInt32(4294964718);
            },
            getSienna: function () {
                return System.Windows.Media.Color.fromUInt32(4288696877);
            },
            getSilver: function () {
                return System.Windows.Media.Color.fromUInt32(4290822336);
            },
            getSkyBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4287090411);
            },
            getSlateBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4285160141);
            },
            getSlateGray: function () {
                return System.Windows.Media.Color.fromUInt32(4285563024);
            },
            getSnow: function () {
                return System.Windows.Media.Color.fromUInt32(4294966010);
            },
            getSpringGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4278255487);
            },
            getSteelBlue: function () {
                return System.Windows.Media.Color.fromUInt32(4282811060);
            },
            getTan: function () {
                return System.Windows.Media.Color.fromUInt32(4291998860);
            },
            getTeal: function () {
                return System.Windows.Media.Color.fromUInt32(4278222976);
            },
            getThistle: function () {
                return System.Windows.Media.Color.fromUInt32(4292394968);
            },
            getTomato: function () {
                return System.Windows.Media.Color.fromUInt32(4294927175);
            },
            getTransparent: function () {
                return System.Windows.Media.Color.fromUInt32(16777215);
            },
            getTurquoise: function () {
                return System.Windows.Media.Color.fromUInt32(4282441936);
            },
            getViolet: function () {
                return System.Windows.Media.Color.fromUInt32(4293821166);
            },
            getWheat: function () {
                return System.Windows.Media.Color.fromUInt32(4294303411);
            },
            getWhite: function () {
                return System.Windows.Media.Color.fromUInt32(4294967295);
            },
            getWhiteSmoke: function () {
                return System.Windows.Media.Color.fromUInt32(4294309365);
            },
            getYellow: function () {
                return System.Windows.Media.Color.fromUInt32(4294967040);
            },
            getYellowGreen: function () {
                return System.Windows.Media.Color.fromUInt32(4288335154);
            }
        }
    });

    Bridge.define("System.Windows.Media.FontFamily", {
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.FontFamily.$ctor1("");
                }
            },
            parse: function (value) {
                return new System.Windows.Media.FontFamily.ctor(System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Media.FontFamily.f1).toArray());
            }
        },
        config: {
            properties: {
                FamilyNames: null
            }
        },
        $ctor1: function (familyName) {
            this.$initialize();
            this.setFamilyNames(System.Array.init([familyName], String));
        },
        ctor: function (familyNames) {
            this.$initialize();
            this.setFamilyNames(familyNames);
        },
        getFamilyName: function () {
            return System.Linq.Enumerable.from(this.getFamilyNames()).firstOrDefault(null, null);
        }
    });

    Bridge.ns("System.Windows.Media.FontFamily", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.FontFamily, {
        f1: function (s) {
            return s.trim();
        }
    });

    Bridge.define("System.Windows.Media.GradientSpreadMethod", {
        $kind: "enum",
        statics: {
            Pad: 0,
            Reflect: 1,
            Repeat: 2
        }
    });

    Bridge.define("System.Windows.Media.IBorderRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.IDrawingRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.IImageRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Imaging.BitmapCacheOption", {
        $kind: "enum",
        statics: {
            OnDemand: 0,
            Default: 0,
            OnLoad: 1
        }
    });

    Bridge.define("System.Windows.Media.IRenderElementFactory", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.IRenderImageSource", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.ITextBlockRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.ITextBoxRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.IVisualRenderElement", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Media.Matrix", {
        statics: {
            identity: null,
            config: {
                init: function () {
                    this.identity = new System.Windows.Media.Matrix(1, 0, 0, 1, 0, 0);
                }
            },
            rotationMatrix: function (radians, centerX, centerY) {
                if (centerX === void 0) { centerX = 0.0; }
                if (centerY === void 0) { centerY = 0.0; }
                var sin = Math.sin(radians);
                var cos = Math.cos(radians);
                var offsetX = (centerX * (1.0 - cos)) + (centerY * sin);
                var offsetY = (centerY * (1.0 - cos)) - (centerX * sin);

                return new System.Windows.Media.Matrix(cos, sin, -sin, cos, offsetX, offsetY);
            },
            scalingMatrix: function (scaleX, scaleY, centerX, centerY) {
                if (centerX === void 0) { centerX = 0.0; }
                if (centerY === void 0) { centerY = 0.0; }
                var offsetX = centerX - scaleX * centerX;
                var offsetY = centerY - scaleY * centerY;

                return new System.Windows.Media.Matrix(scaleX, 0, 0, scaleY, offsetX, offsetY);
            },
            skewMatrix: function (radiansX, radiansY, centerX, centerY) {
                if (centerX === void 0) { centerX = 0.0; }
                if (centerY === void 0) { centerY = 0.0; }
                var offsetX = -centerY * Math.tan(radiansX);
                var offsetY = -centerX * Math.tan(radiansY);

                return new System.Windows.Media.Matrix(1, Math.tan(radiansY), Math.tan(radiansX), 1, offsetX, offsetY);
            },
            translationMatrix: function (offsetX, offsetY) {
                return new System.Windows.Media.Matrix(1, 0, 0, 1, offsetX, offsetY);
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Media.Matrix.f1).toArray();

                if (values.length === 6) {
                    return new System.Windows.Media.Matrix(values[0], values[1], values[2], values[3], values[4], values[5]);
                }

                throw new Granular.Exception("Can't parse Matrix value \"{0}\"", [value]);
            },
            op_Equality: function (matrix1, matrix2) {
                return Bridge.equals(matrix1, matrix2);
            },
            op_Inequality: function (matrix1, matrix2) {
                return !(System.Windows.Media.Matrix.op_Equality(matrix1, matrix2));
            },
            op_Multiply: function (matrix1, matrix2) {
                if (matrix1.getIsIdentity()) {
                    return matrix2;
                }

                if (matrix2.getIsIdentity()) {
                    return matrix1;
                }

                var m11 = matrix1.getM11() * matrix2.getM11() + matrix1.getM12() * matrix2.getM21();
                var m12 = matrix1.getM11() * matrix2.getM12() + matrix1.getM12() * matrix2.getM22();
                var m21 = matrix1.getM21() * matrix2.getM11() + matrix1.getM22() * matrix2.getM21();
                var m22 = matrix1.getM21() * matrix2.getM12() + matrix1.getM22() * matrix2.getM22();
                var offsetX = matrix1.getOffsetX() * matrix2.getM11() + matrix1.getOffsetY() * matrix2.getM21() + matrix2.getOffsetX();
                var offsetY = matrix1.getOffsetX() * matrix2.getM12() + matrix1.getOffsetY() * matrix2.getM22() + matrix2.getOffsetY();

                return new System.Windows.Media.Matrix(m11, m12, m21, m22, offsetX, offsetY);
            },
            op_Multiply$1: function (point, matrix) {
                if (matrix.getIsIdentity()) {
                    return point;
                }

                var x = point.getX() * matrix.getM11() + point.getY() * matrix.getM21() + matrix.getOffsetX();
                var y = point.getX() * matrix.getM12() + point.getY() * matrix.getM22() + matrix.getOffsetY();

                return new System.Windows.Point.$ctor1(x, y);
            }
        },
        inverse: null,
        config: {
            properties: {
                M11: 0,
                M12: 0,
                M21: 0,
                M22: 0,
                OffsetX: 0,
                OffsetY: 0
            }
        },
        ctor: function (m11, m12, m21, m22, offsetX, offsetY) {
            this.$initialize();
            this.setM11(m11);
            this.setM12(m12);
            this.setM21(m21);
            this.setM22(m22);
            this.setOffsetX(offsetX);
            this.setOffsetY(offsetY);
        },
        getIsIdentity: function () {
            return Bridge.referenceEquals(this, System.Windows.Media.Matrix.identity) || this.getM11() === 1 && this.getM12() === 0 && this.getM21() === 0 && this.getM22() === 1 && this.getOffsetX() === 0 && this.getOffsetY() === 0;
        },
        getIsTranslation: function () {
            return this.getM11() === 1 && this.getM12() === 0 && this.getM21() === 0 && this.getM22() === 1;
        },
        getIsScaling: function () {
            return this.getM12() === 0 && this.getM21() === 0 && this.getOffsetX() === 0 && this.getOffsetY() === 0;
        },
        getInverse: function () {
            if (System.Windows.Media.Matrix.op_Equality(this.inverse, null)) {
                this.inverse = this.getInverseMatrix();
            }

            return this.inverse;
        },
        toString: function () {
            if (this.getIsIdentity()) {
                return "IdentityMatrix";
            }

            if (this.getIsTranslation()) {
                return System.String.format("TranslationMatrix({0}, {1})", Bridge.Math.round(this.getOffsetX(), 2, 6), Bridge.Math.round(this.getOffsetY(), 2, 6));
            }

            if (this.getIsScaling()) {
                return System.String.format("ScalingMatrix({0}, {1})", Bridge.Math.round(this.getM11(), 2, 6), Bridge.Math.round(this.getM22(), 2, 6));
            }

            return System.String.format("Matrix({0}, {1}, {2}, {3}, {4}, {5})", Bridge.Math.round(this.getM11(), 2, 6), Bridge.Math.round(this.getM12(), 2, 6), Bridge.Math.round(this.getM21(), 2, 6), Bridge.Math.round(this.getM22(), 2, 6), Bridge.Math.round(this.getOffsetX(), 2, 6), Bridge.Math.round(this.getOffsetY(), 2, 6));
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Media.Matrix);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Granular.Compatibility.EqualityComparer.double.equals2(this.getM11(), other.getM11()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getM12(), other.getM12()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getM21(), other.getM21()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getM22(), other.getM22()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getOffsetX(), other.getOffsetX()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getOffsetY(), other.getOffsetY());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getM11()) ^ Bridge.getHashCode(this.getM12()) ^ Bridge.getHashCode(this.getM21()) ^ Bridge.getHashCode(this.getM22()) ^ Bridge.getHashCode(this.getOffsetX()) ^ Bridge.getHashCode(this.getOffsetY());
        },
        isClose: function (matrix) {
            return Granular.Extensions.DoubleExtensions.isClose(this.getM11(), matrix.getM11()) && Granular.Extensions.DoubleExtensions.isClose(this.getM12(), matrix.getM12()) && Granular.Extensions.DoubleExtensions.isClose(this.getM21(), matrix.getM21()) && Granular.Extensions.DoubleExtensions.isClose(this.getM22(), matrix.getM22()) && Granular.Extensions.DoubleExtensions.isClose(this.getOffsetX(), matrix.getOffsetX()) && Granular.Extensions.DoubleExtensions.isClose(this.getOffsetY(), matrix.getOffsetY());
        },
        getInverseMatrix: function () {
            var determinant = this.getM11() * this.getM22() - this.getM12() * this.getM21();
            return new System.Windows.Media.Matrix(this.getM22() / determinant, -this.getM12() / determinant, -this.getM21() / determinant, this.getM11() / determinant, (this.getM21() * this.getOffsetY() - this.getM22() * this.getOffsetX()) / determinant, -(this.getM11() * this.getOffsetY() - this.getM12() * this.getOffsetX()) / determinant);
        }
    });

    Bridge.ns("System.Windows.Media.Matrix", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Matrix, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.Media.MatrixExtensions", {
        statics: {
            isNullOrIdentity: function (matrix) {
                return Bridge.referenceEquals(matrix, null) || matrix.getIsIdentity();
            },
            getContainingRect: function (matrix, rect) {
                var vertices = System.Linq.Enumerable.from(System.Windows.RectExtensions.getCorners(rect)).select(function (corner) {
                        return System.Windows.Media.Matrix.op_Multiply$1(corner, matrix);
                    }).toArray();

                var left = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f1).min();
                var right = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f1).max();
                var top = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f2).min();
                var bottom = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f2).max();

                return new System.Windows.Rect.$ctor1(left, top, right - left, bottom - top);
            },
            getApproximatedRect$1: function (matrix, size) {
                return System.Windows.Media.MatrixExtensions.getApproximatedRect(matrix, new System.Windows.Rect.$ctor3(size));
            },
            getApproximatedRect: function (matrix, rect) {
                var vertices = System.Linq.Enumerable.from(System.Windows.RectExtensions.getCorners(rect)).select(function (corner) {
                        return System.Windows.Media.Matrix.op_Multiply$1(corner, matrix);
                    }).toArray();

                var verticesX = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f1).orderBy($asm.$.System.Windows.Media.MatrixExtensions.f3).toArray();
                var verticesY = System.Linq.Enumerable.from(vertices).select($asm.$.System.Windows.Media.MatrixExtensions.f2).orderBy($asm.$.System.Windows.Media.MatrixExtensions.f4).toArray();

                var left = (verticesX[0] + verticesX[1]) / 2;
                var right = (verticesX[2] + verticesX[3]) / 2;
                var top = (verticesY[0] + verticesY[1]) / 2;
                var bottom = (verticesY[2] + verticesY[3]) / 2;

                return new System.Windows.Rect.$ctor1(left, top, right - left, bottom - top);
            },
            getContainingSize: function (matrix, size) {
                return System.Windows.Media.MatrixExtensions.getContainingRect(matrix, new System.Windows.Rect.$ctor3(size)).getSize();
            },
            getContainedSize: function (matrix, containerSize) {
                var w = containerSize.getWidth();
                var h = containerSize.getHeight();

                // Each width unit of the contained size, will add "a" units to the transformed width and "b" units to the transformed height
                var transformedWidth = System.Windows.PointExtensions.abs((System.Windows.Media.Matrix.op_Multiply$1(new System.Windows.Point.$ctor1(1, 0), matrix)));
                var a = transformedWidth.getX();
                var b = transformedWidth.getY();

                // Each height unit of the contained size, will add "c" units to the transformed width and "d" units to the transformed height
                var transformedHeight = System.Windows.PointExtensions.abs((System.Windows.Media.Matrix.op_Multiply$1(new System.Windows.Point.$ctor1(0, 1), matrix)));
                var c = transformedHeight.getX();
                var d = transformedHeight.getY();

                if (a === 0 && c === 0 || b === 0 && d === 0) {
                    return System.Windows.Size.zero;
                }

                // Find a contained size (x, y) with maximum area (x * y) where
                //      w >= a * x + c * y
                //      h >= b * x + d * y
                //
                // The solution is on one of these constrains egeds (where the area derivative is zero) or in the intersection
                //
                // The area on the first constrain edge is:
                //      area1(x) = x * (w - a * x) / c
                //
                // The maximum is at:
                //      area1'(x) = (w - 2 * a * x) / c = 0
                //      x = w / (2 * a)
                //      y = Min((w - a * x) / c, (h - b * x) / d)

                var determinant = a * d - b * c;

                // Intersection size
                var size0 = determinant !== 0 ? new System.Windows.Size(Granular.Extensions.DoubleExtensions.max(((w * d - h * c) / determinant), 0), Granular.Extensions.DoubleExtensions.max(((h * a - w * b) / determinant), 0)) : new System.Windows.Size(0, 0);

                var GetConstrainedX = function (y) {
                    return Math.min(Granular.Extensions.DoubleExtensions.isClose(a, 0) ? 0 : (w - c * y) / a, Granular.Extensions.DoubleExtensions.isClose(b, 0) ? 0 : (h - d * y) / b);
                };
                var GetConstrainedY = function (x) {
                    return Math.min(Granular.Extensions.DoubleExtensions.isClose(c, 0) ? 0 : (w - a * x) / c, Granular.Extensions.DoubleExtensions.isClose(d, 0) ? 0 : (h - b * x) / d);
                };

                // Maximum size on the first constrain edge
                var size1 = a > c ? new System.Windows.Size(w / (2 * a), Granular.Extensions.DoubleExtensions.max(GetConstrainedY(w / (2 * a)), 0)) : new System.Windows.Size(Granular.Extensions.DoubleExtensions.max(GetConstrainedX(w / (2 * c)), 0), w / (2 * c));

                // Maximum size on the second constrain edge
                var size2 = b > d ? new System.Windows.Size(h / (2 * b), Granular.Extensions.DoubleExtensions.max(GetConstrainedY(h / (2 * b)), 0)) : new System.Windows.Size(Granular.Extensions.DoubleExtensions.max(GetConstrainedX(h / (2 * d)), 0), h / (2 * d));

                return System.Windows.SizeExtensions.maxArea(System.Windows.SizeExtensions.maxArea(size0, size1), size2);
            }
        }
    });

    Bridge.ns("System.Windows.Media.MatrixExtensions", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.MatrixExtensions, {
        f1: function (vertex) {
            return vertex.getX();
        },
        f2: function (vertex) {
            return vertex.getY();
        },
        f3: function (x) {
            return x;
        },
        f4: function (y) {
            return y;
        }
    });

    Bridge.define("System.Windows.Media.RenderElementDictionary$1", function (T) { return {
        createElement: null,
        factory: null,
        element: Bridge.getDefaultValue(T),
        config: {
            properties: {
                Count: 0,
                Factories: null,
                Elements: null
            }
        },
        ctor: function (createElement) {
            this.$initialize();
            this.createElement = createElement;
            this.setFactories(System.Array.init(0, null, System.Windows.Media.IRenderElementFactory));
            this.setElements(System.Array.init(0, function (){
                return Bridge.getDefaultValue(T);
            }, T));
        },
        getRenderElement: function (factory) {
            if (this.factory == null) {
                this.factory = factory;
                this.element = this.createElement(factory);
                this.setFactories(System.Array.init([factory], System.Windows.Media.IRenderElementFactory));
                this.setElements(System.Array.init([this.element], T));
                this.setCount(1);
            } else if (!Bridge.referenceEquals(this.factory, factory)) {
                throw new Granular.Exception("Render element was already created for a different IRenderElementFactory");
            }

            return this.element;
        },
        removeRenderElement: function (factory) {
            if (!Bridge.referenceEquals(this.factory, factory)) {
                return;
            }

            this.factory = null;
            this.element = null;
            this.setFactories(System.Array.init(0, null, System.Windows.Media.IRenderElementFactory));
            this.setElements(System.Array.init(0, function (){
                return Bridge.getDefaultValue(T);
            }, T));
            this.setCount(0);
        },
        setRenderElementsProperty: function (setter) {
            if (this.element != null) {
                setter(this.element);
            }
        }
    }; });

    Bridge.define("System.Windows.Media.RenderImageState", {
        $kind: "enum",
        statics: {
            Idle: 0,
            DownloadProgress: 1,
            DownloadCompleted: 2,
            DownloadFailed: 3
        }
    });

    Bridge.define("System.Windows.Media.RenderImageType", {
        $kind: "enum",
        statics: {
            Unknown: 0,
            Gif: 1,
            Jpeg: 2,
            Png: 3,
            Svg: 4
        }
    });

    Bridge.define("System.Windows.Media.Stretch", {
        $kind: "enum",
        statics: {
            None: 0,
            Fill: 1,
            Uniform: 2,
            UniformToFill: 3
        }
    });

    Bridge.define("System.Windows.Media.TileMode", {
        $kind: "enum",
        statics: {
            None: 0,
            Tile: 1
        }
    });

    Bridge.define("System.Windows.Media.TransformExtensions", {
        statics: {
            isNullOrIdentity: function (transform) {
                return Bridge.referenceEquals(transform, null) || Bridge.referenceEquals(transform, System.Windows.Media.Transform.identity);
            }
        }
    });

    Bridge.define("System.Windows.Media.Typeface", {
        config: {
            properties: {
                FontFamily: null,
                Stretch: 0,
                Style: 0,
                Weight: 0
            }
        },
        ctor: function (typefaceName, style, weight, stretch) {
            if (style === void 0) { style = 0; }
            if (weight === void 0) { weight = 0; }
            if (stretch === void 0) { stretch = 0; }

            System.Windows.Media.Typeface.$ctor1.call(this, new System.Windows.Media.FontFamily.$ctor1(typefaceName), style, weight, stretch);
            //
        },
        $ctor1: function (fontFamily, style, weight, stretch) {
            if (style === void 0) { style = 0; }
            if (weight === void 0) { weight = 0; }
            if (stretch === void 0) { stretch = 0; }

            this.$initialize();
            this.setFontFamily(fontFamily);
            this.setStyle(style);
            this.setWeight(weight);
            this.setStretch(stretch);
        }
    });

    Bridge.define("System.Windows.Media.VisualExtensions", {
        statics: {
            isAncestorOf: function (visual, descendant) {
                while (descendant != null) {
                    if (Bridge.referenceEquals(descendant.getVisualParent(), visual)) {
                        return true;
                    }

                    descendant = descendant.getVisualParent();
                }

                return false;
            },
            getVisualPath: function (visual, ancestor) {
                var $yield = [];
                var currentVisual = visual;
                while (!Bridge.referenceEquals(currentVisual, ancestor)) {
                    if (currentVisual == null) {
                        throw new Granular.Exception("Visual \"{0}\" is not an ancestor of \"{1}\"", [ancestor, visual]);
                    }

                    $yield.push(currentVisual);
                    currentVisual = currentVisual.getVisualParent();
                }
                return System.Array.toEnumerable($yield);
            }
        }
    });

    Bridge.define("System.Windows.Media.VisualWeakReference", {
        inherits: [System.IDisposable],
        ancestor: null,
        config: {
            properties: {
                Visual: null
            },
            alias: [
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (visual, ancestor) {
            this.$initialize();
            this.setVisual(visual);
            this.ancestor = ancestor;

            visual.addVisualAncestorChanged(Bridge.fn.cacheBind(this, this.onVisualAncestorChanged));
        },
        dispose: function () {
            if (this.getVisual() != null) {
                this.getVisual().removeVisualAncestorChanged(Bridge.fn.cacheBind(this, this.onVisualAncestorChanged));
                this.setVisual(null);
            }
        },
        onVisualAncestorChanged: function (sender, e) {
            if (!System.Windows.Media.VisualExtensions.isAncestorOf(this.ancestor, this.getVisual())) {
                this.dispose();
            }
        }
    });

    Bridge.define("System.Windows.Point", {
        statics: {
            empty: null,
            zero: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Point.ctor();
                    this.zero = new System.Windows.Point.$ctor1(0, 0);
                }
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Point.f1).toArray();

                if (values.length === 2) {
                    return new System.Windows.Point.$ctor1(values[0], values[1]);
                }

                throw new Granular.Exception("Can't parse Point value \"{0}\"", [value]);
            },
            isNullOrEmpty: function (point) {
                return Bridge.referenceEquals(point, null) || point.getIsEmpty();
            },
            op_Equality: function (point1, point2) {
                return Bridge.equals(point1, point2);
            },
            op_Inequality: function (point1, point2) {
                return !(System.Windows.Point.op_Equality(point1, point2));
            },
            op_UnaryNegation: function (point) {
                if (System.Windows.Point.op_Equality(point, System.Windows.Point.zero)) {
                    return point;
                }

                return new System.Windows.Point.$ctor1(-point.getX(), -point.getY());
            },
            op_Addition: function (point1, point2) {
                if (System.Windows.Point.op_Equality(point1, System.Windows.Point.zero)) {
                    return point2;
                }

                if (System.Windows.Point.op_Equality(point2, System.Windows.Point.zero)) {
                    return point1;
                }

                return new System.Windows.Point.$ctor1(point1.getX() + point2.getX(), point1.getY() + point2.getY());
            },
            op_Subtraction: function (point1, point2) {
                if (System.Windows.Point.op_Equality(point1, System.Windows.Point.zero)) {
                    return System.Windows.Point.op_UnaryNegation(point2);
                }

                if (System.Windows.Point.op_Equality(point2, System.Windows.Point.zero)) {
                    return point1;
                }

                return new System.Windows.Point.$ctor1(point1.getX() - point2.getX(), point1.getY() - point2.getY());
            },
            op_Multiply$1: function (point, scalar) {
                if (scalar === 1 || Bridge.referenceEquals(point, System.Windows.Point.zero)) {
                    return point;
                }

                return new System.Windows.Point.$ctor1(point.getX() * scalar, point.getY() * scalar);
            },
            op_Multiply: function (scalar, point) {
                return System.Windows.Point.op_Multiply$1(point, scalar);
            },
            op_Multiply$2: function (point, size) {
                return new System.Windows.Point.$ctor1(point.getX() * size.getWidth(), point.getY() * size.getHeight());
            },
            op_Multiply$3: function (size, point) {
                return System.Windows.Point.op_Multiply$2(point, size);
            },
            op_Division: function (point, scalar) {
                return new System.Windows.Point.$ctor1(point.getX() / scalar, point.getY() / scalar);
            }
        },
        config: {
            properties: {
                X: 0,
                Y: 0,
                IsEmpty: false
            }
        },
        ctor: function () {
            this.$initialize();
            this.setX(Number.NaN);
            this.setY(Number.NaN);
            this.setIsEmpty(true);
        },
        $ctor1: function (x, y) {
            this.$initialize();
            if (Granular.Extensions.DoubleExtensions.isNaN(x) || Granular.Extensions.DoubleExtensions.isNaN(y)) {
                throw new Granular.Exception("Can't create point with NaN values");
            }

            this.setX(x);
            this.setY(y);
            this.setIsEmpty(false);
        },
        toString: function () {
            return System.String.format("Point({0}, {1})", Bridge.Math.round(this.getX(), 2, 6), Bridge.Math.round(this.getY(), 2, 6));
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Point);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Granular.Compatibility.EqualityComparer.double.equals2(this.getX(), other.getX()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getY(), other.getY());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getX()) ^ Bridge.getHashCode(this.getY());
        }
    });

    Bridge.ns("System.Windows.Point", $asm.$);

    Bridge.apply($asm.$.System.Windows.Point, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.PointExtensions", {
        statics: {
            isNullOrEmpty: function (point) {
                return System.Windows.Point.isNullOrEmpty(point);
            },
            defaultIfNullOrEmpty: function (point, defaultValue) {
                if (defaultValue === void 0) { defaultValue = null; }
                return System.Windows.Point.isNullOrEmpty(point) ? (defaultValue || System.Windows.Point.zero) : point;
            },
            isClose: function ($this, point) {
                return Granular.Extensions.DoubleExtensions.isClose($this.getX(), point.getX()) && Granular.Extensions.DoubleExtensions.isClose($this.getY(), point.getY());
            },
            min: function ($this, point) {
                if ($this.getIsEmpty()) {
                    return point;
                }

                if (point.getIsEmpty()) {
                    return $this;
                }

                if ($this.getX() < point.getX() && $this.getY() < point.getY()) {
                    return $this;
                }

                if ($this.getX() >= point.getX() && $this.getY() >= point.getY()) {
                    return point;
                }

                return new System.Windows.Point.$ctor1(Math.min($this.getX(), point.getX()), Math.min($this.getY(), point.getY()));
            },
            max: function ($this, point) {
                if ($this.getIsEmpty()) {
                    return point;
                }

                if (point.getIsEmpty()) {
                    return $this;
                }

                if ($this.getX() > point.getX() && $this.getY() > point.getY()) {
                    return $this;
                }

                if ($this.getX() <= point.getX() && $this.getY() <= point.getY()) {
                    return point;
                }

                return new System.Windows.Point.$ctor1(Math.max($this.getX(), point.getX()), Math.max($this.getY(), point.getY()));
            },
            bounds: function (point, minimum, maximum) {
                if (minimum.getX() > maximum.getX() || minimum.getY() > maximum.getY()) {
                    throw new Granular.Exception("Invalid bounds (minimum: {0}, maximum: {1})", [minimum, maximum]);
                }

                return System.Windows.PointExtensions.min(System.Windows.PointExtensions.max(point, minimum), maximum);
            },
            getLength: function (point) {
                return Math.sqrt(System.Windows.PointExtensions.getLengthSqr(point));
            },
            getLengthSqr: function (point) {
                return point.getX() * point.getX() + point.getY() * point.getY();
            },
            abs: function (point) {
                return point.getX() >= 0 && point.getY() >= 0 ? point : new System.Windows.Point.$ctor1(Granular.Extensions.DoubleExtensions.abs(point.getX()), Granular.Extensions.DoubleExtensions.abs(point.getY()));
            },
            getAngle: function (point) {
                if (point.getY() === 0) {
                    return point.getX() < 0 ? Math.PI : 0;
                }

                if (point.getX() === 0) {
                    return point.getY() < 0 ? -Math.PI / 2 : Math.PI / 2;
                }

                return Bridge.Int.sign(point.getY()) * Math.acos(point.getX() / System.Windows.PointExtensions.getLength(point));
            }
        }
    });

    Bridge.define("System.Windows.PropertyPath", {
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.PropertyPath(System.Array.init(0, null, System.Windows.IPropertyPathElement));
                }
            },
            parse: function (value, namespaces) {
                if (namespaces === void 0) { namespaces = null; }
                var parser = new System.Windows.Markup.PropertyPathParser(value, namespaces || System.Windows.Markup.XamlNamespaces.empty, null);
                return new System.Windows.PropertyPath(parser.parse());
            },
            fromDependencyProperty: function (dependencyProperty) {
                return new System.Windows.PropertyPath(System.Array.init([new System.Windows.DependencyPropertyPathElement(dependencyProperty)], System.Windows.DependencyPropertyPathElement));
            }
        },
        config: {
            properties: {
                Elements: null,
                IsEmpty: false
            }
        },
        ctor: function (elements) {
            this.$initialize();
            this.setElements(elements);
            this.setIsEmpty(!Granular.Compatibility.Linq.Enumerable.any(System.Windows.IPropertyPathElement, this.getElements()));
        },
        toString: function () {
            return Granular.Compatibility.Linq.Enumerable.aggregate(String, Granular.Compatibility.Linq.Enumerable.defaultIfEmpty$1(String, Granular.Compatibility.Linq.Enumerable.select(System.Windows.IPropertyPathElement, String, this.getElements(), $asm.$.System.Windows.PropertyPath.f1), ""), $asm.$.System.Windows.PropertyPath.f2);
        }
    });

    Bridge.ns("System.Windows.PropertyPath", $asm.$);

    Bridge.apply($asm.$.System.Windows.PropertyPath, {
        f1: function (element) {
            return element.toString();
        },
        f2: function (s1, s2) {
            return System.String.format("{0}.{1}", s1, s2);
        }
    });

    Bridge.define("System.Windows.PropertyPathElementExtensions", {
        statics: {
            getDependencyProperty: function (propertyPathElement, containingType) {
                var dependencyProperty = { };
                if (propertyPathElement.System$Windows$IPropertyPathElement$tryGetDependencyProperty(containingType, dependencyProperty)) {
                    return dependencyProperty.v;
                }

                throw new Granular.Exception("Type \"{0}\" does not contain a dependency property \"{1}\"", [Bridge.Reflection.getTypeName(containingType), propertyPathElement]);
            }
        }
    });

    Bridge.define("System.Windows.PropertyPathExtensions", {
        statics: {
            getBasePropertyPath: function (propertyPath) {
                return Granular.Compatibility.Linq.Enumerable.count(System.Windows.IPropertyPathElement, propertyPath.getElements()) > 1 ? new System.Windows.PropertyPath(Granular.Compatibility.Linq.Enumerable.take(System.Windows.IPropertyPathElement, propertyPath.getElements(), ((Granular.Compatibility.Linq.Enumerable.count(System.Windows.IPropertyPathElement, propertyPath.getElements()) - 1) | 0))) : System.Windows.PropertyPath.empty;
            },
            insert: function (propertyPath, index, element) {
                var elements = Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.IPropertyPathElement, Granular.Compatibility.Linq.Enumerable.concat(System.Windows.IPropertyPathElement, Granular.Compatibility.Linq.Enumerable.concat(System.Windows.IPropertyPathElement, Granular.Compatibility.Linq.Enumerable.take(System.Windows.IPropertyPathElement, propertyPath.getElements(), index), System.Array.init([element], System.Windows.IPropertyPathElement)), Granular.Compatibility.Linq.Enumerable.skip(System.Windows.IPropertyPathElement, propertyPath.getElements(), index)));
                return new System.Windows.PropertyPath(elements);
            },
            tryGetValue: function (propertyPath, root, value) {
                if (propertyPath.getIsEmpty()) {
                    value.v = null;
                    return false;
                }

                if (Granular.Compatibility.Linq.Enumerable.count(System.Windows.IPropertyPathElement, propertyPath.getElements()) > 1) {
                    var baseValue = { };

                    if (!System.Windows.PropertyPathExtensions.tryGetValue(System.Windows.PropertyPathExtensions.getBasePropertyPath(propertyPath), root, baseValue)) {
                        value.v = null;
                        return false;
                    }

                    root = baseValue.v;
                }

                return Granular.Compatibility.Linq.Enumerable.last(System.Windows.IPropertyPathElement, propertyPath.getElements()).System$Windows$IPropertyPathElement$tryGetValue(root, value);
            }
        }
    });

    Bridge.define("System.Windows.RectExtensions", {
        statics: {
            isNullOrEmpty: function (rect) {
                return Bridge.referenceEquals(rect, null) || rect.getIsEmpty();
            },
            defaultIfNullOrEmpty: function (rect, defaultValue) {
                if (defaultValue === void 0) { defaultValue = null; }
                return System.Windows.RectExtensions.isNullOrEmpty(rect) ? (defaultValue || System.Windows.Rect.zero) : rect;
            },
            isClose: function ($this, rect) {
                return System.Windows.PointExtensions.isClose($this.getLocation(), rect.getLocation()) && System.Windows.SizeExtensions.isClose($this.getSize(), rect.getSize());
            },
            contains: function (rect, point) {
                return point.getIsEmpty() || !rect.getIsEmpty() && rect.getLeft() <= point.getX() && point.getX() < rect.getRight() && rect.getTop() <= point.getY() && point.getY() < rect.getBottom();
            },
            contains$1: function ($this, rect) {
                return rect.getIsEmpty() || !$this.getIsEmpty() && $this.getLeft() <= rect.getLeft() && $this.getTop() <= rect.getTop() && $this.getRight() >= rect.getRight() && $this.getBottom() >= rect.getBottom();
            },
            transform: function (rect, matrix) {
                if (matrix.getIsIdentity()) {
                    return rect;
                }

                var topLeft = System.Windows.Media.Matrix.op_Multiply$1(System.Windows.RectExtensions.getTopLeft(rect), matrix);
                var topRight = System.Windows.Media.Matrix.op_Multiply$1(System.Windows.RectExtensions.getTopRight(rect), matrix);
                var bottomLeft = System.Windows.Media.Matrix.op_Multiply$1(System.Windows.RectExtensions.getBottomLeft(rect), matrix);
                var bottomRight = System.Windows.Media.Matrix.op_Multiply$1(System.Windows.RectExtensions.getBottomRight(rect), matrix);

                var location = new System.Windows.Point.$ctor1(Granular.Extensions.DoubleExtensions.min(Granular.Extensions.DoubleExtensions.min(Granular.Extensions.DoubleExtensions.min(topLeft.getX(), topRight.getX()), bottomLeft.getX()), bottomRight.getX()), Granular.Extensions.DoubleExtensions.min(Granular.Extensions.DoubleExtensions.min(Granular.Extensions.DoubleExtensions.min(topLeft.getY(), topRight.getY()), bottomLeft.getY()), bottomRight.getY()));

                var size = new System.Windows.Size(Granular.Extensions.DoubleExtensions.max(Granular.Extensions.DoubleExtensions.max(Granular.Extensions.DoubleExtensions.max(topLeft.getX(), topRight.getX()), bottomLeft.getX()), bottomRight.getX()) - location.getX(), Granular.Extensions.DoubleExtensions.max(Granular.Extensions.DoubleExtensions.max(Granular.Extensions.DoubleExtensions.max(topLeft.getY(), topRight.getY()), bottomLeft.getY()), bottomRight.getY()) - location.getY());

                return new System.Windows.Rect.$ctor2(location, size);
            },
            getTopLeft: function (rect) {
                return rect.getLocation();
            },
            getTopRight: function (rect) {
                return new System.Windows.Point.$ctor1(rect.getRight(), rect.getTop());
            },
            getBottomLeft: function (rect) {
                return new System.Windows.Point.$ctor1(rect.getLeft(), rect.getBottom());
            },
            getBottomRight: function (rect) {
                return new System.Windows.Point.$ctor1(rect.getRight(), rect.getBottom());
            },
            getCorners: function (rect) {
                return System.Array.init([System.Windows.RectExtensions.getTopLeft(rect), System.Windows.RectExtensions.getTopRight(rect), System.Windows.RectExtensions.getBottomLeft(rect), System.Windows.RectExtensions.getBottomRight(rect)], System.Windows.Point);
            },
            addOffset: function (rect, offset) {
                if (System.Windows.Point.op_Equality(offset, System.Windows.Point.zero)) {
                    return rect;
                }

                return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Addition(rect.getLocation(), offset), rect.getSize());
            },
            addMargin: function (rect, margin) {
                if (System.Windows.Thickness.op_Equality(margin, System.Windows.Thickness.zero)) {
                    return rect;
                }

                return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Subtraction(rect.getLocation(), margin.getLocation()), System.Windows.Size.op_Addition(rect.getSize(), margin.getSize()));
            },
            union: function ($this, rect) {
                if (System.Windows.RectExtensions.contains$1($this, rect)) {
                    return $this;
                }

                if (System.Windows.RectExtensions.contains$1(rect, $this)) {
                    return rect;
                }

                var left = Granular.Extensions.DoubleExtensions.min($this.getLeft(), rect.getLeft());
                var top = Granular.Extensions.DoubleExtensions.min($this.getTop(), rect.getTop());
                var right = Granular.Extensions.DoubleExtensions.max($this.getRight(), rect.getRight());
                var bottom = Granular.Extensions.DoubleExtensions.max($this.getBottom(), rect.getBottom());

                return new System.Windows.Rect.$ctor1(left, top, right - left, bottom - top);
            }
        }
    });

    Bridge.define("System.Windows.ResourceContainerExtensions", {
        statics: {
            findResource: function (resourceContainer, resourceKey) {
                var value = { };

                if (resourceContainer.System$Windows$IResourceContainer$tryGetResource(resourceKey, value)) {
                    return value.v;
                }

                throw new Granular.Exception("Resource \"{0}\" is not found", [resourceKey]);
            }
        }
    });

    Bridge.define("System.Windows.ResourceDictionaryLocation", {
        $kind: "enum",
        statics: {
            None: 0,
            SourceAssembly: 1,
            ExternalAssembly: 2
        }
    });

    Bridge.define("System.Windows.ResourcesChangedEventArgs", {
        statics: {
            reset: null,
            config: {
                init: function () {
                    this.reset = new System.Windows.ResourcesChangedEventArgs(null);
                }
            },
            fromKey: function (changedKey) {
                return new System.Windows.ResourcesChangedEventArgs(System.Array.init([changedKey], Object));
            },
            fromKeyCollection: function (changedKeys) {
                return new System.Windows.ResourcesChangedEventArgs(changedKeys);
            }
        },
        changedKeys: null,
        ctor: function (changedKeys) {
            this.$initialize();
            this.changedKeys = changedKeys;
        },
        contains: function (resourceKey) {
            return this.changedKeys == null ? true : System.Linq.Enumerable.from(this.changedKeys).contains(resourceKey);
        }
    });

    Bridge.define("System.Windows.RoutedEvent", {
        hashCode: 0,
        classesHandlers: null,
        config: {
            properties: {
                Name: null,
                RoutingStrategy: 0,
                HandlerType: null,
                OwnerType: null,
                StringKey: null
            }
        },
        ctor: function (name, routingStrategy, handlerType, ownerType) {
            this.$initialize();
            this.setName(name);
            this.setRoutingStrategy(routingStrategy);
            this.setHandlerType(handlerType);
            this.setOwnerType(ownerType);
            this.setStringKey(System.String.concat(Bridge.Reflection.getTypeFullName(ownerType), ",", name));
            this.hashCode = Bridge.getHashCode(this.getStringKey());
        },
        addOwner: function (ownerType) {
            System.Windows.EventManager.addOwner(this, ownerType);
            return this;
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("{0}.{1}", Bridge.Reflection.getTypeFullName(this.getOwnerType()), this.getName());
        },
        registerClassHandler: function (classType, routedEventHandlerItem) {
            if (this.classesHandlers == null) {
                this.classesHandlers = new (Granular.Collections.ListDictionary$2(Function,System.Windows.RoutedEventHandlerItem))();
            }

            this.classesHandlers.add(classType, routedEventHandlerItem);
        },
        getClassHandlers: function (classType) {
            if (this.classesHandlers == null) {
                return System.Array.init(0, null, System.Windows.RoutedEventHandlerItem);
            }

            var flattenedHandlers = null;
            var classesHandlesCount = 0;

            while (classType != null) {
                var classHandlers = this.classesHandlers.getValues(classType);

                if (System.Linq.Enumerable.from(classHandlers).any()) {
                    flattenedHandlers = flattenedHandlers != null ? System.Linq.Enumerable.from(classHandlers).concat(flattenedHandlers) : classHandlers;
                    classesHandlesCount = (classesHandlesCount + 1) | 0;
                }

                classType = Bridge.Reflection.getBaseType(classType);
            }

            return classesHandlesCount > 1 ? System.Linq.Enumerable.from(flattenedHandlers).toArray() : (flattenedHandlers || System.Array.init(0, null, System.Windows.RoutedEventHandlerItem));
        }
    });

    Bridge.define("System.Windows.RoutedEventHandlerItem", {
        config: {
            properties: {
                Handler: null,
                HandledEventsToo: false
            }
        },
        ctor: function (handler, handledEventsToo) {
            this.$initialize();
            this.setHandler(handler);
            this.setHandledEventsToo(handledEventsToo);
        }
    });

    Bridge.define("System.Windows.RoutingStrategy", {
        $kind: "enum",
        statics: {
            Tunnel: 0,
            Bubble: 1,
            Direct: 2
        }
    });

    Bridge.define("System.Windows.Size", {
        statics: {
            empty: null,
            zero: null,
            infinity: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Size(Number.NaN, Number.NaN);
                    this.zero = new System.Windows.Size(0, 0);
                    this.infinity = new System.Windows.Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
                }
            },
            fromWidth: function (width) {
                return new System.Windows.Size(width, Number.NaN);
            },
            fromHeight: function (height) {
                return new System.Windows.Size(Number.NaN, height);
            },
            parse: function (value) {
                var values = System.Linq.Enumerable.from(value.split(String.fromCharCode(44))).select($asm.$.System.Windows.Size.f1).toArray();

                if (values.length === 2) {
                    return new System.Windows.Size(values[0], values[1]);
                }

                throw new Granular.Exception("Can't parse Size value \"{0}\"", [value]);
            },
            isNullOrEmpty: function (size) {
                return Bridge.referenceEquals(size, null) || size.getIsEmpty();
            },
            op_Equality: function (size1, size2) {
                return Bridge.equals(size1, size2);
            },
            op_Inequality: function (size1, size2) {
                return !(System.Windows.Size.op_Equality(size1, size2));
            },
            op_UnaryNegation: function (size) {
                if (System.Windows.Size.op_Equality(size, System.Windows.Size.zero)) {
                    return size;
                }

                return new System.Windows.Size(-size.getWidth(), -size.getHeight());
            },
            op_Addition: function (size1, size2) {
                if (System.Windows.Size.op_Equality(size1, System.Windows.Size.zero)) {
                    return size2;
                }

                if (System.Windows.Size.op_Equality(size2, System.Windows.Size.zero)) {
                    return size1;
                }

                return new System.Windows.Size(size1.getWidth() + size2.getWidth(), size1.getHeight() + size2.getHeight());
            },
            op_Subtraction: function (size1, size2) {
                if (System.Windows.Size.op_Equality(size1, System.Windows.Size.zero)) {
                    return System.Windows.Size.op_UnaryNegation(size2);
                }

                if (System.Windows.Size.op_Equality(size2, System.Windows.Size.zero)) {
                    return size1;
                }

                return new System.Windows.Size(size1.getWidth() - size2.getWidth(), size1.getHeight() - size2.getHeight());
            },
            op_Multiply$1: function (size, factor) {
                if (factor === 1 || Bridge.referenceEquals(size, System.Windows.Size.zero)) {
                    return size;
                }

                return new System.Windows.Size(size.getWidth() * factor, size.getHeight() * factor);
            },
            op_Multiply: function (factor, size) {
                return System.Windows.Size.op_Multiply$1(size, factor);
            },
            op_Division: function (size, factor) {
                if (factor === 1 || Bridge.referenceEquals(size, System.Windows.Size.zero)) {
                    return size;
                }

                return new System.Windows.Size(size.getWidth() / factor, size.getHeight() / factor);
            }
        },
        config: {
            properties: {
                Width: 0,
                Height: 0,
                IsWidthEmpty: false,
                IsHeightEmpty: false,
                IsEmpty: false,
                IsPartiallyEmpty: false
            }
        },
        ctor: function (width, height) {
            this.$initialize();
            this.setWidth(width);
            this.setHeight(height);

            this.setIsWidthEmpty(isNaN(this.getWidth()));
            this.setIsHeightEmpty(isNaN(this.getHeight()));
            this.setIsEmpty(this.getIsWidthEmpty() && this.getIsHeightEmpty());
            this.setIsPartiallyEmpty(this.getIsWidthEmpty() || this.getIsHeightEmpty());
        },
        toString: function () {
            return System.String.format("Size({0}, {1})", this.getWidth(), this.getHeight());
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.Size);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Granular.Compatibility.EqualityComparer.double.equals2(this.getWidth(), other.getWidth()) && Granular.Compatibility.EqualityComparer.double.equals2(this.getHeight(), other.getHeight());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getWidth()) ^ Bridge.getHashCode(this.getHeight());
        }
    });

    Bridge.ns("System.Windows.Size", $asm.$);

    Bridge.apply($asm.$.System.Windows.Size, {
        f1: function (v) {
            return System.Double.parse(v);
        }
    });

    Bridge.define("System.Windows.SizeExtensions", {
        statics: {
            isNullOrEmpty: function (size) {
                return System.Windows.Size.isNullOrEmpty(size);
            },
            defaultIfNullOrEmpty: function (size, defaultValue) {
                if (defaultValue === void 0) { defaultValue = null; }
                return System.Windows.Size.isNullOrEmpty(size) ? (defaultValue || System.Windows.Size.zero) : size;
            },
            combine: function (size, fallback) {
                if (!size.getIsPartiallyEmpty()) {
                    return size;
                }

                if (size.getIsEmpty()) {
                    return fallback;
                }

                return new System.Windows.Size(size.getIsWidthEmpty() ? fallback.getWidth() : size.getWidth(), size.getIsHeightEmpty() ? fallback.getHeight() : size.getHeight());
            },
            min: function ($this, size) {
                if ($this.getIsEmpty()) {
                    return size;
                }

                if (size.getIsEmpty()) {
                    return $this;
                }

                if (!$this.getIsPartiallyEmpty() && !size.getIsPartiallyEmpty()) {
                    if ($this.getWidth() < size.getWidth() && $this.getHeight() < size.getHeight()) {
                        return $this;
                    }

                    if ($this.getWidth() >= size.getWidth() && $this.getHeight() >= size.getHeight()) {
                        return size;
                    }
                }

                return new System.Windows.Size($this.getIsWidthEmpty() ? size.getWidth() : (size.getIsWidthEmpty() ? $this.getWidth() : Math.min($this.getWidth(), size.getWidth())), $this.getIsHeightEmpty() ? size.getHeight() : (size.getIsHeightEmpty() ? $this.getHeight() : Math.min($this.getHeight(), size.getHeight())));
            },
            max: function ($this, size) {
                if ($this.getIsEmpty()) {
                    return size;
                }

                if (size.getIsEmpty()) {
                    return $this;
                }

                if (!$this.getIsPartiallyEmpty() && !size.getIsPartiallyEmpty()) {
                    if ($this.getWidth() > size.getWidth() && $this.getHeight() > size.getHeight()) {
                        return $this;
                    }

                    if ($this.getWidth() <= size.getWidth() && $this.getHeight() <= size.getHeight()) {
                        return size;
                    }
                }

                return new System.Windows.Size($this.getIsWidthEmpty() ? size.getWidth() : (size.getIsWidthEmpty() ? $this.getWidth() : Math.max($this.getWidth(), size.getWidth())), $this.getIsHeightEmpty() ? size.getHeight() : (size.getIsHeightEmpty() ? $this.getHeight() : Math.max($this.getHeight(), size.getHeight())));
            },
            bounds: function (size, minimum, maximum) {
                if (minimum.getWidth() > maximum.getWidth() || minimum.getHeight() > maximum.getHeight()) {
                    throw new Granular.Exception("Invalid bounds (minimum: {0}, maximum: {1})", [minimum, maximum]);
                }

                return System.Windows.SizeExtensions.min(System.Windows.SizeExtensions.max(size, minimum), maximum);
            },
            isClose: function ($this, size) {
                return Granular.Extensions.DoubleExtensions.isClose($this.getWidth(), size.getWidth()) && Granular.Extensions.DoubleExtensions.isClose($this.getHeight(), size.getHeight());
            },
            toPoint: function (size) {
                return new System.Windows.Point.$ctor1(size.getWidth(), size.getHeight());
            },
            contains: function (size, point) {
                return 0 <= point.getX() && point.getX() < size.getWidth() && 0 <= point.getY() && point.getY() < size.getHeight();
            },
            maxArea: function ($this, size) {
                return $this.getWidth() * $this.getHeight() > size.getWidth() * size.getHeight() ? $this : size;
            }
        }
    });

    Bridge.define("System.Windows.StartupEventArgs", {
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.StartupEventArgs();
                }
            }
        },
        config: {
            properties: {
                Args: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.setArgs(System.Array.init(0, null, String));
        }
    });

    Bridge.define("System.Windows.StartupEventHandlerExtensions", {
        statics: {
            raise: function (handler, sender, e) {
                if (!Bridge.staticEquals(handler, null)) {
                    handler(sender, e);
                }
            }
        }
    });

    Bridge.define("System.Windows.Style", {
        targetType: null,
        key: null,
        config: {
            properties: {
                BasedOn: null,
                Triggers: null,
                Setters: null
            }
        },
        ctor: function () {
            this.$initialize();
            this.setTriggers(new (Granular.Collections.ObservableCollection$1(System.Windows.ITrigger)).ctor());
            this.setSetters(new (Granular.Collections.ObservableCollection$1(System.Windows.ITriggerAction)).ctor());
        },
        getTargetType: function () {
            return this.targetType;
        },
        setTargetType: function (value) {
            if (Bridge.referenceEquals(this.targetType, value)) {
                return;
            }

            this.targetType = value;
        },
        getKey: function () {
            var $t;
            return ($t = this.key, $t != null ? $t : new System.Windows.StyleKey(this.getTargetType()));
        },
        setKey: function (value) {
            this.key = value;
        },
        attach: function (element) {
            this.attach$1(element, $asm.$.System.Windows.Style.f1);
        },
        attach$1: function (element, settersFilter) {
            var $t, $t1;
            if (this.getBasedOn() != null) {
                this.getBasedOn().attach$1(element, Bridge.fn.bind(this, function (setter) {
                    return !System.Linq.Enumerable.from(this.getSetters()).any(function (action) {
                            return action.System$Windows$ITriggerAction$isActionOverlaps(setter);
                        }) && settersFilter(setter);
                }));
            }

            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.getSetters()).where(settersFilter));
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$apply(element, System.Windows.BaseValueSource.Style);
            }

            $t1 = Bridge.getEnumerator(this.getTriggers());
            while ($t1.moveNext()) {
                var trigger = $t1.getCurrent();
                trigger.System$Windows$ITrigger$attach(element, System.Windows.BaseValueSource.StyleTrigger);
            }
        },
        detach: function (element) {
            this.detach$1(element, $asm.$.System.Windows.Style.f1);
        },
        detach$1: function (element, settersFilter) {
            var $t, $t1;
            if (this.getBasedOn() != null) {
                this.getBasedOn().detach$1(element, Bridge.fn.bind(this, function (setter) {
                    return !System.Linq.Enumerable.from(this.getSetters()).any(function (action) {
                            return action.System$Windows$ITriggerAction$isActionOverlaps(setter);
                        }) && settersFilter(setter);
                }));
            }

            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.getSetters()).where(settersFilter));
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$clean(element, System.Windows.BaseValueSource.Style);
            }

            $t1 = Bridge.getEnumerator(this.getTriggers());
            while ($t1.moveNext()) {
                var trigger = $t1.getCurrent();
                trigger.System$Windows$ITrigger$detach(element, System.Windows.BaseValueSource.StyleTrigger);
            }
        }
    });

    Bridge.ns("System.Windows.Style", $asm.$);

    Bridge.apply($asm.$.System.Windows.Style, {
        f1: function (setter) {
            return true;
        }
    });

    Bridge.define("System.Windows.TemplatePartAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                Name: null,
                Type: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
            //
        },
        $ctor1: function (name, type) {
            System.Windows.TemplatePartAttribute.ctor.call(this);
            this.setName(name);
            this.setType(type);
        }
    });

    Bridge.define("System.Windows.TemplateVisualStateAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                GroupName: null,
                Name: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Attribute.ctor.call(this);
            //
        },
        $ctor1: function (groupName, name) {
            System.Windows.TemplateVisualStateAttribute.ctor.call(this);
            this.setGroupName(groupName);
            this.setName(name);
        }
    });

    Bridge.define("System.Windows.TextAlignment", {
        $kind: "enum",
        statics: {
            Left: 0,
            Right: 1,
            Center: 2,
            Justify: 3
        }
    });

    Bridge.define("System.Windows.TextTrimming", {
        $kind: "enum",
        statics: {
            None: 0,
            CharacterEllipsis: 1
        }
    });

    Bridge.define("System.Windows.TextWrapping", {
        $kind: "enum",
        statics: {
            Wrap: 0,
            NoWrap: 1
        }
    });

    Bridge.define("System.Windows.ThemeInfoAttribute", {
        inherits: [System.Attribute],
        config: {
            properties: {
                GenericDictionaryLocation: 0
            }
        },
        $ctor1: function (themeDictionaryLocation, genericDictionaryLocation) {
            System.Windows.ThemeInfoAttribute.ctor.call(this, genericDictionaryLocation);
            //
        },
        ctor: function (genericDictionaryLocation) {
            this.$initialize();
            System.Attribute.ctor.call(this);
            this.setGenericDictionaryLocation(genericDictionaryLocation);
        }
    });

    Bridge.define("System.Windows.ThicknessExtensions", {
        statics: {
            defaultIfNull: function (thickness, defaultValue) {
                if (defaultValue === void 0) { defaultValue = null; }
                return thickness || defaultValue || System.Windows.Thickness.zero;
            }
        }
    });

    Bridge.define("System.Windows.Threading.Dispatcher", {
        statics: {
            currentDispatcher: null,
            config: {
                init: function () {
                    this.currentDispatcher = new System.Windows.Threading.Dispatcher();
                }
            }
        },
        queue: null,
        disableProcessingRequests: 0,
        isProcessQueueScheduled: false,
        disableProcessingToken: null,
        ctor: function () {
            this.$initialize();
            this.queue = new (Granular.Collections.PriorityQueue$1(System.Windows.Threading.DispatcherOperation))(11);
            this.disableProcessingToken = new Granular.Disposable(Bridge.fn.cacheBind(this, this.enableProcessing));
        },
        invoke$1: function (callback, priority) {
            if (priority === void 0) { priority = 9; }
            this.invoke$2(new System.Windows.Threading.DispatcherOperation.ctor(callback, priority));
        },
        invoke: function (TResult, callback, priority) {
            if (priority === void 0) { priority = 9; }
            var dispatcherOperation = new (System.Windows.Threading.DispatcherOperation$1(TResult))(callback, priority);
            this.invoke$2(dispatcherOperation);
            return dispatcherOperation.getResult$1();
        },
        invoke$2: function (operation) {
            this.queue.enqueue(operation.getPriority(), operation);

            var currentOperation = { };
            while (this.tryDequeue(currentOperation)) {
                currentOperation.v.invoke();

                if (Bridge.referenceEquals(currentOperation.v, operation)) {
                    return;
                }
            }

            if (this.disableProcessingRequests > 0) {
                throw new Granular.Exception("Can't invoke an operation while the dispatcher processing is disabled");
            }

            throw new Granular.Exception("Can't invoke an inactive or aborted operation");
        },
        invokeAsync: function (callback, priority) {
            if (priority === void 0) { priority = 9; }
            var dispatcherOperation = new System.Windows.Threading.DispatcherOperation.ctor(callback, priority);
            this.invokeAsync$2(dispatcherOperation);
            return dispatcherOperation;
        },
        invokeAsync$1: function (TResult, callback, priority) {
            if (priority === void 0) { priority = 9; }
            var dispatcherOperation = new (System.Windows.Threading.DispatcherOperation$1(TResult))(callback, priority);
            this.invokeAsync$2(dispatcherOperation);
            return dispatcherOperation;
        },
        invokeAsync$2: function (operation) {
            this.queue.enqueue(operation.getPriority(), operation);
            this.processQueueAsync();
        },
        processQueueAsync: function () {
            if (this.isProcessQueueScheduled) {
                return;
            }

            this.isProcessQueueScheduled = true;
            System.Windows.Threading.TaskSchedulerExtensions.scheduleTask(System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTaskScheduler(), Bridge.fn.bind(this, $asm.$.System.Windows.Threading.Dispatcher.f1));
        },
        tryDequeue: function (operation) {
            while (this.disableProcessingRequests === 0 && this.queue.tryPeek(operation) && operation.v.getPriority() !== System.Windows.Threading.DispatcherPriority.Inactive) {
                this.queue.dequeue();

                if (operation.v.getStatus() !== System.Windows.Threading.DispatcherOperationStatus.Pending) {
                    continue;
                }

                return true;
            }

            operation.v = null;
            return false;
        },
        disableProcessing: function () {
            this.disableProcessingRequests = (this.disableProcessingRequests + 1) | 0;
            return this.disableProcessingToken;
        },
        enableProcessing: function () {
            this.disableProcessingRequests = (this.disableProcessingRequests - 1) | 0;

            if (this.disableProcessingRequests === 0) {
                this.processQueueAsync();
            }
        }
    });

    Bridge.ns("System.Windows.Threading.Dispatcher", $asm.$);

    Bridge.apply($asm.$.System.Windows.Threading.Dispatcher, {
        f1: function () {
            this.isProcessQueueScheduled = false;

            var operation = { };
            if (!this.tryDequeue(operation)) {
                return;
            }

            if (operation.v.getStatus() === System.Windows.Threading.DispatcherOperationStatus.Pending) {
                operation.v.invoke();
                this.processQueueAsync();
            }
        }
    });

    Bridge.define("System.Windows.Threading.DispatcherOperation", {
        action: null,
        config: {
            events: {
                Completed: null,
                Aborted: null
            },
            properties: {
                Priority: 0,
                Status: 0,
                Result: null
            }
        },
        ctor: function (action, priority) {
            System.Windows.Threading.DispatcherOperation.$ctor1.call(this, function () {
                action();
                return null;
            }, priority);
            //
        },
        $ctor1: function (action, priority) {
            this.$initialize();
            this.action = action;
            this.setPriority(priority);
        },
        abort: function () {
            if (this.getStatus() !== System.Windows.Threading.DispatcherOperationStatus.Pending) {
                throw new Granular.Exception("Operation is \"{0}\" and cannot be aborted", [this.getStatus()]);
            }

            this.setStatus(System.Windows.Threading.DispatcherOperationStatus.Aborted);
            Granular.Extensions.EventHandlerExtensions.raise$2(this.Aborted, this);
        },
        invoke: function () {
            if (this.getStatus() !== System.Windows.Threading.DispatcherOperationStatus.Pending) {
                throw new Granular.Exception("Operation is \"{0}\" and cannot be invoked", [this.getStatus()]);
            }

            this.setStatus(System.Windows.Threading.DispatcherOperationStatus.Executing);
            this.setResult(this.action());
            this.setStatus(System.Windows.Threading.DispatcherOperationStatus.Completed);
            Granular.Extensions.EventHandlerExtensions.raise$2(this.Completed, this);
        }
    });

    Bridge.define("System.Windows.Threading.DispatcherOperationStatus", {
        $kind: "enum",
        statics: {
            Pending: 0,
            Aborted: 1,
            Completed: 2,
            Executing: 3
        }
    });

    Bridge.define("System.Windows.Threading.DispatcherPriority", {
        $kind: "enum",
        statics: {
            Invalid: -1,
            Inactive: 0,
            SystemIdle: 1,
            ApplicationIdle: 2,
            ContextIdle: 3,
            Background: 4,
            Input: 5,
            Loaded: 6,
            Render: 7,
            DataBind: 8,
            Normal: 9,
            Send: 10
        }
    });

    Bridge.define("System.Windows.Threading.DispatcherTimer", {
        priority: 0,
        isEnabled: false,
        dispatcher: null,
        scheduler: null,
        scheduledTask: null,
        config: {
            events: {
                Tick: null
            },
            init: function () {
                this.interval = new System.TimeSpan();
            }
        },
        ctor: function () {
            System.Windows.Threading.DispatcherTimer.$ctor1.call(this, System.Windows.Threading.Dispatcher.currentDispatcher, System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTaskScheduler(), System.TimeSpan.fromSeconds(1), System.Windows.Threading.DispatcherPriority.Normal);
            //
        },
        $ctor1: function (dispatcher, scheduler, interval, priority) {
            this.$initialize();
            this.dispatcher = dispatcher;
            this.scheduler = scheduler;
            this.setInterval(interval);
            this.setPriority(priority);
        },
        getPriority: function () {
            return this.priority;
        },
        setPriority: function (value) {
            if (this.getIsEnabled()) {
                throw new Granular.Exception("Can't change an active DispatcherTimer priority");
            }

            this.priority = value;
        },
        getInterval: function () {
            return this.interval;
        },
        setInterval: function (value) {
            if (this.getIsEnabled()) {
                throw new Granular.Exception("Can't change an active DispatcherTimer interval");
            }

            this.interval = value;
        },
        getIsEnabled: function () {
            return this.isEnabled;
        },
        setIsEnabled: function (value) {
            if (this.isEnabled === value) {
                return;
            }

            this.isEnabled = value;
            if (this.isEnabled) {
                this.scheduleTask();
            } else {
                this.cancelTask();
            }
        },
        start: function () {
            this.setIsEnabled(true);
        },
        stop: function () {
            this.setIsEnabled(false);
        },
        scheduleTask: function () {
            if (!this.getIsEnabled()) {
                return;
            }

            this.scheduledTask = this.scheduler.System$Windows$Threading$ITaskScheduler$scheduleTask(this.getInterval(), Bridge.fn.bind(this, $asm.$.System.Windows.Threading.DispatcherTimer.f2));
        },
        cancelTask: function () {
            if (this.scheduledTask != null) {
                this.scheduledTask.System$IDisposable$dispose();
                this.scheduledTask = null;
            }
        }
    });

    Bridge.ns("System.Windows.Threading.DispatcherTimer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Threading.DispatcherTimer, {
        f1: function () {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.Tick, this);
        },
        f2: function () {
            this.dispatcher.invokeAsync(Bridge.fn.bind(this, $asm.$.System.Windows.Threading.DispatcherTimer.f1), this.getPriority());
            this.scheduleTask();
        }
    });

    Bridge.define("System.Windows.Threading.ITaskScheduler", {
        $kind: "interface"
    });

    Bridge.define("System.Windows.Threading.TaskSchedulerExtensions", {
        statics: {
            scheduleTask: function (taskScheduler, action) {
                return taskScheduler.System$Windows$Threading$ITaskScheduler$scheduleTask(System.TimeSpan.zero, action);
            }
        }
    });

    Bridge.define("System.Windows.ValueSource", {
        config: {
            properties: {
                BaseValueSource: 0,
                IsExpression: false,
                IsCurrent: false,
                IsAnimated: false,
                IsCoerced: false
            }
        },
        ctor: function (baseValueSource, isExpression, isCurrent, isAnimated, isCoerced) {
            this.$initialize();
            this.setBaseValueSource(baseValueSource);
            this.setIsExpression(isExpression);
            this.setIsCurrent(isCurrent);
            this.setIsAnimated(isAnimated);
            this.setIsCoerced(isCoerced);
        }
    });

    Bridge.define("System.Windows.VerticalAlignment", {
        $kind: "enum",
        statics: {
            Top: 0,
            Center: 1,
            Bottom: 2,
            Stretch: 3
        }
    });

    Bridge.define("System.Windows.Visibility", {
        $kind: "enum",
        statics: {
            Visible: 0,
            Hidden: 1,
            Collapsed: 2
        }
    });

    Bridge.define("System.Windows.VisualStateManager", {
        statics: {
            visualStateGroupsProperty: null,
            config: {
                init: function () {
                    this.visualStateGroupsProperty = System.Windows.DependencyProperty.registerAttached("VisualStateGroups", System.Windows.FreezableCollection$1(System.Windows.VisualStateGroup), System.Windows.VisualStateManager, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            getVisualStateGroups: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.VisualStateManager.visualStateGroupsProperty), System.Windows.FreezableCollection$1(System.Windows.VisualStateGroup));
            },
            setVisualStateGroups: function (obj, value) {
                obj.setValue(System.Windows.VisualStateManager.visualStateGroupsProperty, value);
            },
            goToState: function (control, stateName, useTransitions) {
                if (control.getTemplateChild() == null) {
                    return false;
                }

                var visualStateGroups = System.Windows.VisualStateManager.getVisualStateGroups(control.getTemplateChild());
                if (visualStateGroups == null) {
                    return false;
                }

                var visualStateGroup = System.Linq.Enumerable.from(visualStateGroups).firstOrDefault(function (group) {
                        return System.Linq.Enumerable.from(group.getStates()).any(function (state) {
                                return Bridge.referenceEquals(state.getName(), stateName);
                            });
                    }, null);
                if (visualStateGroup == null) {
                    return false;
                }

                var visualState = System.Linq.Enumerable.from(visualStateGroup.getStates()).first(function (state) {
                        return Bridge.referenceEquals(state.getName(), stateName);
                    });

                visualStateGroup.setContainer(control);
                return visualStateGroup.goToState(visualState, useTransitions);
            }
        }
    });

    Bridge.define("System.Windows.Application", {
        inherits: [System.Windows.IResourceContainer,System.Windows.Markup.IUriContext],
        statics: {
            systemResources: null,
            config: {
                properties: {
                    Current: null
                },
                init: function () {
                    this.systemResources = new System.Windows.SystemResources();
                }
            },
            loadComponent: function (resourceLocator) {
                return System.Windows.EmbeddedResourceLoader.loadResourceElement(resourceLocator);
            },
            loadComponent$1: function (component, resourceLocator) {
                System.Windows.Markup.XamlLoader.load$1(component, System.Windows.Markup.XamlParser.parse(Granular.Compatibility.String.fromByteArray(System.Windows.EmbeddedResourceLoader.loadResourceData(resourceLocator)), resourceLocator));
            }
        },
        resources: null,
        config: {
            events: {
                ResourcesChanged: null,
                Startup: null,
                LoadCompleted: null
            },
            properties: {
                StartupUri: null,
                MainWindow: null,
                BaseUri: null
            },
            alias: [
            "addResourcesChanged", "System$Windows$IResourceContainer$addResourcesChanged",
            "removeResourcesChanged", "System$Windows$IResourceContainer$removeResourcesChanged",
            "getBaseUri", "System$Windows$Markup$IUriContext$getBaseUri",
            "setBaseUri", "System$Windows$Markup$IUriContext$setBaseUri",
            "tryGetResource", "System$Windows$IResourceContainer$tryGetResource"
            ]
        },
        ctor: function () {
            this.$initialize();
            if (System.Windows.Application.getCurrent() != null) {
                throw new Granular.Exception("Application instance was already created");
            }

            System.Windows.Application.setCurrent(this);
        },
        getResources: function () {
            return this.resources;
        },
        setResources: function (value) {
            if (Bridge.referenceEquals(this.resources, value)) {
                return;
            }

            if (this.resources != null) {
                this.resources.removeResourcesChanged(Bridge.fn.cacheBind(this, this.onResourcesChanged));
            }

            this.resources = value;

            if (this.resources != null) {
                this.resources.addResourcesChanged(Bridge.fn.cacheBind(this, this.onResourcesChanged));
            }
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, System.Windows.ResourcesChangedEventArgs.reset);
        },
        System$Windows$IResourceContainer$getIsEmpty: function () {
            return false;
        },
        run: function () {
            this.onStartup(System.Windows.StartupEventArgs.empty);
            System.Windows.StartupEventHandlerExtensions.raise(this.Startup, this, System.Windows.StartupEventArgs.empty);

            this.loadStartupUri();

            this.onLoadCompleted();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.LoadCompleted, this);
        },
        loadStartupUri: function () {
            if (this.getStartupUri() == null) {
                return;
            }

            var uri = System.UriExtensions.resolveAbsoluteUri(this.getStartupUri(), this.getBaseUri());
            var rootElement = System.Windows.Markup.XamlParser.parse(Granular.Compatibility.String.fromByteArray(System.Windows.EmbeddedResourceLoader.loadResourceData(uri)), uri);
            var classDirective = System.Linq.Enumerable.from(rootElement.getDirectives()).firstOrDefault($asm.$.System.Windows.Application.f1, null);

            var $window = Bridge.as(Bridge.createInstance(Bridge.Reflection.getType(System.String.format("{0}, {1}", System.Windows.Markup.XamlMemberExtensions.getSingleValue(classDirective), System.AssemblyExtensions.getName(Bridge.Reflection.getTypeAssembly(Bridge.getType(this))).getName()))), System.Windows.Window);
            if ($window != null) {
                $window.show();
            }
        },
        onResourcesChanged: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, e);
        },
        tryGetResource: function (resourceKey, value) {
            if (this.getResources() != null && this.getResources().tryGetValue(resourceKey, value)) {
                return true;
            }

            if (System.Windows.Application.systemResources.tryGetResource(resourceKey, value)) {
                return true;
            }

            value.v = null;
            return false;
        },
        onStartup: function (e) {
            //
        },
        onLoadCompleted: function () {
            //
        }
    });

    Bridge.ns("System.Windows.Application", $asm.$);

    Bridge.apply($asm.$.System.Windows.Application, {
        f1: function (directive) {
            return System.Windows.Markup.XamlName.op_Equality(directive.getName(), System.Windows.Markup.XamlLanguage.classDirective);
        }
    });

    Bridge.define("System.Windows.ComponentResourceKey", {
        inherits: [System.Windows.IResourceKey,System.Windows.Markup.IMarkupExtension],
        config: {
            properties: {
                TypeInTargetAssembly: null,
                ResourceId: null
            },
            alias: [
            "getAssembly", "System$Windows$IResourceKey$getAssembly",
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        getAssembly: function () {
            return this.getTypeInTargetAssembly() != null ? Bridge.Reflection.getTypeAssembly(this.getTypeInTargetAssembly()) : null;
        },
        provideValue: function (context) {
            return this;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.ComponentResourceKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getTypeInTargetAssembly(), other.getTypeInTargetAssembly()) && Bridge.equals(this.getResourceId(), other.getResourceId());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getTypeInTargetAssembly()) ^ Bridge.getHashCode(this.getResourceId());
        },
        toString: function () {
            return System.String.format("ComponentResourceKey({0}, {1})", Bridge.Reflection.getTypeName(this.getTypeInTargetAssembly()), this.getResourceId());
        }
    });

    Bridge.define("System.Windows.ContentElement", {
        inherits: [System.Windows.DependencyObject],
        ctor: function () {
            this.$initialize();
            System.Windows.DependencyObject.ctor.call(this);
            //
        }
    });

    Bridge.define("System.Windows.Media.Visual", {
        inherits: [System.Windows.DependencyObject,System.Windows.IContextElement],
        visualParent: null,
        visualChildren: null,
        visualBackground: null,
        visualBounds: null,
        visualClipToBounds: false,
        visualIsHitTestVisible: false,
        visualIsVisible: false,
        visualOpacity: 0,
        visualTransform: null,
        visualLevel: 0,
        visualRenderElements: null,
        hitTestBounds: null,
        isHitTestBoundsValid: false,
        config: {
            events: {
                VisualAncestorChanged: null,
                VisualParentChanged: null,
                VisualBoundsChanged: null,
                VisualTransformChanged: null
            },
            properties: {
                VisualChildren: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.DependencyObject.ctor.call(this);
            this.visualChildren = new (System.Collections.Generic.List$1(System.Windows.Media.Visual))();
            this.setVisualChildren(new (System.Collections.ObjectModel.ReadOnlyCollection$1(System.Windows.Media.Visual))(this.visualChildren));

            this.visualRenderElements = new (System.Windows.Media.RenderElementDictionary$1(System.Windows.Media.IVisualRenderElement))(Bridge.fn.cacheBind(this, this.createRenderElement));

            this.setVisualBackground(null);
            this.setVisualBounds(System.Windows.Rect.zero);
            this.setVisualClipToBounds(true);
            this.setVisualIsHitTestVisible(true);
            this.setVisualIsVisible(true);
            this.setVisualOpacity(1);
            this.setVisualTransform(System.Windows.Media.Matrix.identity);

            this.visualLevel = -1;
        },
        getVisualParent: function () {
            return this.visualParent;
        },
        setVisualParent: function (value) {
            if (Bridge.referenceEquals(this.visualParent, value)) {
                return;
            }

            if (this.visualParent != null) {
                this.visualParent.removeVisualAncestorChanged(Bridge.fn.cacheBind(this, this.onVisualAncestorChanged$1));
            }

            var oldVisualParent = this.visualParent;
            this.visualParent = value;

            if (this.visualParent != null) {
                this.visualParent.addVisualAncestorChanged(Bridge.fn.cacheBind(this, this.onVisualAncestorChanged$1));
            }

            this.onVisualParentChanged(oldVisualParent, this.visualParent);
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualParentChanged, this);

            this.onVisualAncestorChanged();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualAncestorChanged, this);
        },
        System$Windows$IContextElement$addContextParentChanged: function (value) {
            this.addVisualAncestorChanged(value);
        },
        System$Windows$IContextElement$removeContextParentChanged: function (value) {
            this.removeVisualAncestorChanged(value);
        },
        System$Windows$IContextElement$getContextParent: function () {
            return this.getVisualParent();
        },
        getVisualOffset: function () {
            return this.getVisualBounds().getLocation();
        },
        getVisualSize: function () {
            return this.getVisualBounds().getSize();
        },
        getVisualBackground: function () {
            return this.visualBackground;
        },
        setVisualBackground: function (value) {
            var $t;
            if (Bridge.referenceEquals(this.visualBackground, value)) {
                return;
            }

            this.visualBackground = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setBackground(this.visualBackground);
            }
        },
        getVisualBounds: function () {
            return this.visualBounds;
        },
        setVisualBounds: function (value) {
            var $t;
            if (System.Windows.Rect.op_Equality(this.visualBounds, value)) {
                return;
            }

            this.visualBounds = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setBounds(this.visualBounds);
            }

            this.invalidateHitTestBounds();

            this.onVisualBoundsChanged();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualBoundsChanged, this);
        },
        getVisualClipToBounds: function () {
            return this.visualClipToBounds;
        },
        setVisualClipToBounds: function (value) {
            var $t;
            if (this.visualClipToBounds === value) {
                return;
            }

            this.visualClipToBounds = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setClipToBounds(this.visualClipToBounds);
            }

            this.invalidateHitTestBounds();
        },
        getVisualIsHitTestVisible: function () {
            return this.visualIsHitTestVisible;
        },
        setVisualIsHitTestVisible: function (value) {
            var $t;
            if (this.visualIsHitTestVisible === value) {
                return;
            }

            this.visualIsHitTestVisible = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setIsHitTestVisible(this.visualIsHitTestVisible);
            }
        },
        getVisualIsVisible: function () {
            return this.visualIsVisible;
        },
        setVisualIsVisible: function (value) {
            var $t;
            if (this.visualIsVisible === value) {
                return;
            }

            this.visualIsVisible = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setIsVisible(this.visualIsVisible);
            }
        },
        getVisualOpacity: function () {
            return this.visualOpacity;
        },
        setVisualOpacity: function (value) {
            var $t;
            if (this.visualOpacity === value) {
                return;
            }

            this.visualOpacity = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setOpacity(this.visualOpacity);
            }
        },
        getVisualTransform: function () {
            return this.visualTransform;
        },
        setVisualTransform: function (value) {
            var $t;
            if (System.Windows.Media.Matrix.op_Equality(this.visualTransform, value)) {
                return;
            }

            this.visualTransform = value;

            $t = Bridge.getEnumerator(this.visualRenderElements.getElements());
            while ($t.moveNext()) {
                var visualRenderElement = $t.getCurrent();
                visualRenderElement.System$Windows$Media$IVisualRenderElement$setTransform(this.visualTransform);
            }

            this.invalidateHitTestBounds();

            this.onVisualTransformChanged();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualTransformChanged, this);
        },
        getVisualLevel: function () {
            if (this.visualLevel === -1) {
                this.visualLevel = this.getVisualParent() != null ? ((this.getVisualParent().getVisualLevel() + 1) | 0) : 0;
            }

            return this.visualLevel;
        },
        addVisualChild: function (child) {
            var $t;
            if (Bridge.referenceEquals(child.getVisualParent(), this)) {
                return;
            }

            if (child.getVisualParent() != null) {
                child.getVisualParent().removeVisualChild(child);
            }

            child.setVisualParent(this);
            this.visualChildren.add(child);

            var renderChildIndex = (this.visualChildren.getCount() - 1) | 0;
            $t = Bridge.getEnumerator(this.visualRenderElements.getFactories());
            while ($t.moveNext()) {
                var factory = $t.getCurrent();
                this.visualRenderElements.getRenderElement(factory).System$Windows$Media$IVisualRenderElement$insertChild(renderChildIndex, child.getRenderElement(factory));
            }

            this.invalidateHitTestBounds();
        },
        removeVisualChild: function (child) {
            var $t;
            if (!Bridge.referenceEquals(child.getVisualParent(), this)) {
                return;
            }

            this.visualChildren.remove(child);
            child.setVisualParent(null);

            $t = Bridge.getEnumerator(this.visualRenderElements.getFactories());
            while ($t.moveNext()) {
                var factory = $t.getCurrent();
                this.visualRenderElements.getRenderElement(factory).System$Windows$Media$IVisualRenderElement$removeChild(child.getRenderElement(factory));
            }

            this.invalidateHitTestBounds();
        },
        setVisualChildIndex: function (child, newIndex) {
            var $t;
            var oldIndex = this.visualChildren.indexOf(child);
            if (oldIndex === -1 || oldIndex === newIndex) {
                return;
            }

            this.visualChildren.remove(child);
            this.visualChildren.insert(newIndex, child);

            $t = Bridge.getEnumerator(this.visualRenderElements.getFactories());
            while ($t.moveNext()) {
                var factory = $t.getCurrent();
                var childRenderElement = child.getRenderElement(factory);

                this.visualRenderElements.getRenderElement(factory).System$Windows$Media$IVisualRenderElement$removeChild(childRenderElement);
                this.visualRenderElements.getRenderElement(factory).System$Windows$Media$IVisualRenderElement$insertChild(newIndex, childRenderElement);
            }
        },
        clearVisualChildren: function () {
            var $t;
            $t = Bridge.getEnumerator(this.visualChildren.toArray());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                this.removeVisualChild(child);
            }
        },
        onVisualParentChanged: function (oldVisualParent, newVisualParent) {
            //
        },
        onVisualAncestorChanged: function () {
            this.visualLevel = -1;
        },
        onVisualAncestorChanged$1: function (sender, e) {
            this.onVisualAncestorChanged();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualAncestorChanged, this);
        },
        getRenderElement: function (factory) {
            return this.visualRenderElements.getRenderElement(factory);
        },
        createRenderElement: function (factory) {
            var $t;
            var visualRenderElement = factory.System$Windows$Media$IRenderElementFactory$createVisualRenderElement(this);

            visualRenderElement.System$Windows$Media$IVisualRenderElement$setBackground(this.getVisualBackground());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setBounds(this.getVisualBounds());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setClipToBounds(this.getVisualClipToBounds());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setIsHitTestVisible(this.getVisualIsHitTestVisible());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setIsVisible(this.getVisualIsVisible());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setOpacity(this.getVisualOpacity());
            visualRenderElement.System$Windows$Media$IVisualRenderElement$setTransform(this.getVisualTransform());

            visualRenderElement.System$Windows$Media$IVisualRenderElement$setContent(this.createRenderElementContentOverride(factory));

            var index = 0;
            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.getRenderElement(factory);
                visualRenderElement.System$Windows$Media$IVisualRenderElement$insertChild(index, child.getRenderElement(factory));
                index = (index + 1) | 0;
            }

            return visualRenderElement;
        },
        removeRenderElement: function (factory) {
            var $t;
            this.visualRenderElements.removeRenderElement(factory);

            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.removeRenderElement(factory);
            }
        },
        createRenderElementContentOverride: function (factory) {
            return null;
        },
        onVisualBoundsChanged: function () {
            //
        },
        onVisualTransformChanged: function () {
            //
        },
        onVisualTransformValueChanged: function (sender, e) {
            this.invalidateHitTestBounds();

            this.onVisualTransformChanged();
            Granular.Extensions.EventHandlerExtensions.raise$2(this.VisualTransformChanged, this);
        },
        invalidateVisualTransform: function () {
            this.setVisualTransform(this.getVisualTransformOverride());
        },
        getVisualTransformOverride: function () {
            return System.Windows.Media.Matrix.identity;
        },
        pointToRoot: function (point) {
            return System.Windows.Media.Matrix.op_Multiply$1(point, this.transformToAncestor(null));
        },
        pointFromRoot: function (point) {
            return System.Windows.Media.Matrix.op_Multiply$1(point, this.transformToAncestor(null).getInverse());
        },
        transformToAncestor: function (ancestor) {
            var transformMatrix = !System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.getVisualTransform()) ? this.getVisualTransform() : System.Windows.Media.Matrix.identity;
            var offsetMatrix = System.Windows.Point.op_Inequality(this.getVisualOffset(), System.Windows.Point.zero) ? System.Windows.Media.Matrix.translationMatrix(this.getVisualOffset().getX(), this.getVisualOffset().getY()) : System.Windows.Media.Matrix.identity;
            var parentMatrix = this.getVisualParent() != null && !Bridge.referenceEquals(this.getVisualParent(), ancestor) ? this.getVisualParent().transformToAncestor(ancestor) : System.Windows.Media.Matrix.identity;

            var value = System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix.op_Multiply(transformMatrix, offsetMatrix), parentMatrix);
            return value;
        },
        invalidateHitTestBounds: function () {
            if (!this.isHitTestBoundsValid) {
                return;
            }

            this.isHitTestBoundsValid = false;
            if (this.getVisualParent() != null) {
                this.getVisualParent().invalidateHitTestBounds();
            }
        },
        getHitTestBounds: function () {
            if (!this.isHitTestBoundsValid) {
                this.hitTestBounds = this.getHitTestBoundsOverride();
                this.isHitTestBoundsValid = true;
            }

            return this.hitTestBounds;
        },
        getHitTestBoundsOverride: function () {
            var $t;
            var bounds = new System.Windows.Rect.$ctor3(this.getVisualBounds().getSize());

            if (!this.getVisualClipToBounds()) {
                $t = Bridge.getEnumerator(this.getVisualChildren());
                while ($t.moveNext()) {
                    var child = $t.getCurrent();
                    bounds = System.Windows.RectExtensions.union(bounds, child.getHitTestBounds());
                }
            }

            return System.Windows.RectExtensions.addOffset(System.Windows.RectExtensions.transform(bounds, this.getVisualTransform()), this.getVisualBounds().getLocation());
        },
        System$Windows$IContextElement$trySetContextParent: function (contextParent) {
            return false;
        }
    });

    Bridge.define("System.Windows.Freezable", {
        inherits: [System.Windows.DependencyObject,System.Windows.IResourceContainer,System.Windows.INotifyChanged,System.Windows.IContextElement],
        contextParent: null,
        changed: null,
        parentResourceContainer: null,
        config: {
            events: {
                ContextParentChanged: null,
                ResourcesChanged: null
            },
            properties: {
                IsFrozen: false
            },
            alias: [
            "addContextParentChanged", "System$Windows$IContextElement$addContextParentChanged",
            "removeContextParentChanged", "System$Windows$IContextElement$removeContextParentChanged",
            "getContextParent", "System$Windows$IContextElement$getContextParent",
            "setContextParent", "System$Windows$IContextElement$setContextParent",
            "addChanged", "System$Windows$INotifyChanged$addChanged",
            "removeChanged", "System$Windows$INotifyChanged$removeChanged",
            "addResourcesChanged", "System$Windows$IResourceContainer$addResourcesChanged",
            "removeResourcesChanged", "System$Windows$IResourceContainer$removeResourcesChanged",
            "tryGetResource", "System$Windows$IResourceContainer$tryGetResource",
            "trySetContextParent", "System$Windows$IContextElement$trySetContextParent"
            ]
        },
        getContextParent: function () {
            return this.contextParent;
        },
        setContextParent: function (value) {
            if (Bridge.referenceEquals(this.contextParent, value)) {
                return;
            }

            if (this.contextParent != null) {
                this.contextParent.System$Windows$IContextElement$removeContextParentChanged(Bridge.fn.cacheBind(this, this.onContextParentAncestorChanged));
            }

            this.contextParent = value;

            if (this.contextParent != null) {
                this.contextParent.System$Windows$IContextElement$addContextParentChanged(Bridge.fn.cacheBind(this, this.onContextParentAncestorChanged));
            }

            Granular.Extensions.EventHandlerExtensions.raise$2(this.ContextParentChanged, this);
        },
        addChanged: function (value) {
            if (this.getIsFrozen()) {
                return;
            }

            this.changed = Bridge.fn.combine(this.changed, value);
        },
        removeChanged: function (value) {
            if (this.getIsFrozen()) {
                return;
            }

            this.changed = Bridge.fn.remove(this.changed, value);
        },
        getParentResourceContainer: function () {
            return this.parentResourceContainer;
        },
        setParentResourceContainer: function (value) {
            if (Bridge.referenceEquals(this.parentResourceContainer, value)) {
                return;
            }

            var oldParentResourceContainer = this.parentResourceContainer;

            if (this.parentResourceContainer != null) {
                this.parentResourceContainer.System$Windows$IResourceContainer$removeResourcesChanged(Bridge.fn.cacheBind(this, this.onParentResourcesChanged));
            }

            this.parentResourceContainer = value;

            if (this.parentResourceContainer != null) {
                this.parentResourceContainer.System$Windows$IResourceContainer$addResourcesChanged(Bridge.fn.cacheBind(this, this.onParentResourcesChanged));
            }

            if (oldParentResourceContainer != null && !oldParentResourceContainer.System$Windows$IResourceContainer$getIsEmpty() || this.parentResourceContainer != null && !this.parentResourceContainer.System$Windows$IResourceContainer$getIsEmpty()) {
                Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, System.Windows.ResourcesChangedEventArgs.reset);
            }
        },
        System$Windows$IResourceContainer$getIsEmpty: function () {
            return this.getParentResourceContainer() == null || this.getParentResourceContainer().System$Windows$IResourceContainer$getIsEmpty();
        },
        onParentResourcesChanged: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, e);
        },
        tryGetResource: function (resourceKey, value) {
            if (this.getParentResourceContainer() != null) {
                return this.getParentResourceContainer().System$Windows$IResourceContainer$tryGetResource(resourceKey, value);
            }

            value.v = null;
            return false;
        },
        freeze: function () {
            this.setIsFrozen(true);
            this.changed = null;
            this.setParentResourceContainer(null);
        },
        onPropertyChanged: function (e) {
            this.verifyNotFrozen$1(e.getProperty());

            if (!e.getIsSubPropertyChange()) {
                if (Bridge.is(e.getOldValue(), System.Windows.IContextElement)) {
                    Bridge.cast(e.getOldValue(), System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(null);
                }

                if (Bridge.is(e.getNewValue(), System.Windows.IContextElement)) {
                    Bridge.cast(e.getNewValue(), System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(this);
                }
            }

            this.raiseChanged();
        },
        onSubPropertyChanged: function (sender, e) {
            this.verifyNotFrozen();

            this.raiseChanged();
        },
        raiseChanged: function () {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.changed, this);
        },
        trySetContextParent: function (contextParent) {
            if (this.getIsFrozen()) {
                return false;
            }

            this.setContextParent(contextParent);
            this.setParentResourceContainer(Bridge.as(contextParent, System.Windows.IResourceContainer));
            return true;
        },
        onContextParentAncestorChanged: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.ContextParentChanged, this);
        },
        verifyNotFrozen: function () {
            if (this.getIsFrozen()) {
                throw new Granular.Exception("\"{0}\" is frozen and cannot be changed", [this]);
            }
        },
        verifyNotFrozen$1: function (changedProperty) {
            if (this.getIsFrozen()) {
                throw new Granular.Exception("\"{0}\" is frozen, property \"{1}\" cannot be changed", [this, changedProperty]);
            }
        }
    });

    Bridge.define("System.Windows.Controls.ContentPresenter.DefaultContentTemplate", {
        inherits: [System.Windows.IFrameworkTemplate],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.ContentPresenter.DefaultContentTemplate();
                }
            }
        },
        config: {
            alias: [
            "attach", "System$Windows$IFrameworkTemplate$attach",
            "detach", "System$Windows$IFrameworkTemplate$detach"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        attach: function (element) {
            var textBlock = new System.Windows.Controls.TextBlock();
            textBlock.setValue(System.Windows.Controls.TextBlock.textProperty, Bridge.merge(new System.Windows.Data.Binding(), {
                setSource: element,
                setPath: System.Windows.PropertyPath.fromDependencyProperty(System.Windows.Controls.ContentPresenter.contentProperty),
                setMode: System.Windows.Data.BindingMode.OneWay,
                setConverter: System.Windows.Controls.ContentPresenter.DefaultContentTemplate.ToStringConverter.default
            } ));

            element.setTemplateChild(textBlock);
        },
        detach: function (element) {
            element.setTemplateChild(null);
        }
    });

    Bridge.define("System.Windows.Controls.ContentPresenter.DefaultContentTemplate.ToStringConverter", {
        inherits: [System.Windows.Data.IValueConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.ContentPresenter.DefaultContentTemplate.ToStringConverter();
                }
            }
        },
        config: {
            alias: [
            "convert", "System$Windows$Data$IValueConverter$convert",
            "convertBack", "System$Windows$Data$IValueConverter$convertBack"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convert: function (value, targetType, parameter) {
            return value != null ? value.toString() : "";
        },
        convertBack: function (value, targetType, parameter) {
            return null;
        }
    });

    Bridge.define("System.Windows.Controls.ContentPresenter.UIElementTemplate", {
        inherits: [System.Windows.IFrameworkTemplate],
        config: {
            properties: {
                Content: null
            },
            alias: [
            "attach", "System$Windows$IFrameworkTemplate$attach",
            "detach", "System$Windows$IFrameworkTemplate$detach"
            ]
        },
        ctor: function (content) {
            this.$initialize();
            this.setContent(content);
        },
        attach: function (element) {
            element.setTemplateChild(this.getContent());
        },
        detach: function (element) {
            element.setTemplateChild(null);
        }
    });

    Bridge.define("System.Windows.FrameworkTemplate", {
        inherits: [System.Windows.DependencyObject,System.Windows.IFrameworkTemplate],
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.FrameworkTemplate.EmptyFrameworkTemplate();
                }
            }
        },
        config: {
            properties: {
                FrameworkElementFactory: null,
                Triggers: null
            },
            alias: [
            "attach", "System$Windows$IFrameworkTemplate$attach",
            "detach", "System$Windows$IFrameworkTemplate$detach"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.DependencyObject.ctor.call(this);
            this.setTriggers(new (Granular.Collections.ObservableCollection$1(System.Windows.ITrigger)).ctor());
        },
        attach: function (element) {
            var $t;
            element.setTemplateChild(this.createVisualTree(element));

            $t = Bridge.getEnumerator(this.getTriggers());
            while ($t.moveNext()) {
                var trigger = $t.getCurrent();
                trigger.System$Windows$ITrigger$attach(element, System.Windows.BaseValueSource.TemplateTrigger);
            }
        },
        detach: function (element) {
            var $t;
            $t = Bridge.getEnumerator(this.getTriggers());
            while ($t.moveNext()) {
                var trigger = $t.getCurrent();
                trigger.System$Windows$ITrigger$detach(element, System.Windows.BaseValueSource.TemplateTrigger);
            }

            element.setTemplateChild(null);
        },
        createVisualTree: function (templatedParent) {
            if (this.getFrameworkElementFactory() == null) {
                throw new Granular.Exception("FrameworkTemplate is not initialized");
            }

            return this.getFrameworkElementFactory().System$Windows$IFrameworkElementFactory$createElement(templatedParent);
        }
    });

    Bridge.define("System.Windows.Controls.ItemContainerGenerator", {
        inherits: [System.Windows.Controls.Primitives.IItemContainerGenerator,System.IDisposable],
        host: null,
        generatedContainers: null,
        config: {
            events: {
                ItemsChanged: null
            },
            alias: [
            "addItemsChanged", "System$Windows$Controls$Primitives$IItemContainerGenerator$addItemsChanged",
            "removeItemsChanged", "System$Windows$Controls$Primitives$IItemContainerGenerator$removeItemsChanged",
            "getItemsCount", "System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount",
            "dispose", "System$IDisposable$dispose",
            "generate", "System$Windows$Controls$Primitives$IItemContainerGenerator$generate",
            "removeRange", "System$Windows$Controls$Primitives$IItemContainerGenerator$removeRange",
            "containerFromItem", "System$Windows$Controls$Primitives$IItemContainerGenerator$containerFromItem",
            "itemFromContainer", "System$Windows$Controls$Primitives$IItemContainerGenerator$itemFromContainer",
            "indexFromContainer", "System$Windows$Controls$Primitives$IItemContainerGenerator$indexFromContainer"
            ]
        },
        ctor: function (host) {
            this.$initialize();
            this.host = host;
            this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().addCollectionChanged(Bridge.fn.cacheBind(this, this.onViewCollectionChanged));

            this.generatedContainers = new (System.Collections.Generic.List$1(System.Windows.Controls.ItemContainerGenerator.GeneratedItemContainer))();
        },
        getItemsCount: function () {
            return this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().getCount();
        },
        dispose: function () {
            this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().removeCollectionChanged(Bridge.fn.cacheBind(this, this.onViewCollectionChanged));
            this.removeRange(0, this.getItemsCount());
        },
        onViewCollectionChanged: function (sender, e) {
            var oldItemsCount = System.Linq.Enumerable.from(e.getOldItems()).count();
            var newItemsCount = System.Linq.Enumerable.from(e.getNewItems()).count();
            var oldContainersCount = System.Linq.Enumerable.from(this.generatedContainers).where(function (container) {
                    return container.getIndex() >= e.getOldStartingIndex() && container.getIndex() < ((e.getOldStartingIndex() + oldItemsCount) | 0);
                }).count();

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Add) {
                this.shiftGeneratedContainersIndex(e.getNewStartingIndex(), newItemsCount);
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Remove) {
                this.removeRange(e.getOldStartingIndex(), oldItemsCount);
                this.shiftGeneratedContainersIndex(e.getOldStartingIndex(), ((-oldItemsCount) | 0));
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Move) {
                this.switchGeneratedContainersIndex(e.getOldStartingIndex(), e.getNewStartingIndex(), newItemsCount);
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Replace) {
                this.refershRange(e.getNewStartingIndex(), newItemsCount);
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Reset) {
                this.removeRange(0, this.getItemsCount());
            }
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.Controls.Primitives.ItemsChangedEventArgs, this.ItemsChanged, this, new System.Windows.Controls.Primitives.ItemsChangedEventArgs(e.getAction(), e.getOldStartingIndex(), e.getNewStartingIndex(), newItemsCount, oldContainersCount));
        },
        generate: function (index) {
            var container = System.Linq.Enumerable.from(this.generatedContainers).firstOrDefault(function (c) {
                    return c.getIndex() === index;
                }, null);

            if (container == null) {
                container = new System.Windows.Controls.ItemContainerGenerator.GeneratedItemContainer(this.host.System$Windows$Controls$Primitives$IGeneratorHost$getContainerForItem(this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().getItem(index)), this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().getItem(index), index);
                this.host.System$Windows$Controls$Primitives$IGeneratorHost$prepareContainerForItem(container.getItem(), container.getContainer());
                this.generatedContainers.add(container);
            }

            return container.getContainer();
        },
        removeRange: function (startIndex, count) {
            var i = 0;

            while (i < this.generatedContainers.getCount()) {
                var container = this.generatedContainers.getItem(i);

                if (container.getIndex() >= startIndex && container.getIndex() < ((startIndex + count) | 0)) {
                    this.remove(container);
                    continue;
                }

                i = (i + 1) | 0;
            }
        },
        remove: function (container) {
            this.generatedContainers.remove(container);
            this.host.System$Windows$Controls$Primitives$IGeneratorHost$clearContainerForItem(container.getItem(), container.getContainer());
        },
        refershRange: function (startIndex, count) {
            var $t;
            $t = Bridge.getEnumerator(this.generatedContainers);
            while ($t.moveNext()) {
                var container = $t.getCurrent();
                if (container.getIndex() >= startIndex && container.getIndex() < ((startIndex + count) | 0)) {
                    this.refersh(container);
                }
            }
        },
        refersh: function (container) {
            this.host.System$Windows$Controls$Primitives$IGeneratorHost$clearContainerForItem(container.getItem(), container.getContainer());

            container.setItem(this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().getItem(container.getIndex()));
            container.setContainer(this.host.System$Windows$Controls$Primitives$IGeneratorHost$getContainerForItem(this.host.System$Windows$Controls$Primitives$IGeneratorHost$getView().getItem(container.getIndex())));

            this.host.System$Windows$Controls$Primitives$IGeneratorHost$prepareContainerForItem(container.getItem(), container.getContainer());
        },
        containerFromItem: function (item) {
            var generatedItemContainer = System.Linq.Enumerable.from(this.generatedContainers).firstOrDefault(function (c) {
                    return Bridge.referenceEquals(c.getItem(), item);
                }, null);
            return generatedItemContainer != null ? generatedItemContainer.getContainer() : null;
        },
        itemFromContainer: function (container) {
            var generatedItemContainer = System.Linq.Enumerable.from(this.generatedContainers).firstOrDefault(function (c) {
                    return Bridge.referenceEquals(c.getContainer(), container);
                }, null);
            return generatedItemContainer != null ? generatedItemContainer.getItem() : null;
        },
        indexFromContainer: function (container) {
            var generatedItemContainer = System.Linq.Enumerable.from(this.generatedContainers).firstOrDefault(function (c) {
                    return Bridge.referenceEquals(c.getContainer(), container);
                }, null);
            return generatedItemContainer != null ? generatedItemContainer.getIndex() : -1;
        },
        shiftGeneratedContainersIndex: function (startIndex, offset) {
            var $t;
            $t = Bridge.getEnumerator(this.generatedContainers);
            while ($t.moveNext()) {
                var container = $t.getCurrent();
                if (container.getIndex() >= startIndex) {
                    container.setIndex((container.getIndex() + offset) | 0);
                }
            }
        },
        switchGeneratedContainersIndex: function (sourceIndex, targetIndex, count) {
            var $t;
            var offset = (targetIndex - sourceIndex) | 0;

            $t = Bridge.getEnumerator(this.generatedContainers);
            while ($t.moveNext()) {
                var container = $t.getCurrent();
                if (container.getIndex() >= sourceIndex && container.getIndex() < ((sourceIndex + count) | 0)) {
                    container.setIndex((container.getIndex() + offset) | 0);
                } else if (container.getIndex() >= sourceIndex && container.getIndex() < targetIndex || container.getIndex() >= targetIndex && container.getIndex() < sourceIndex) {
                    container.setIndex((container.getIndex() - offset) | 0);
                }
            }
        }
    });

    Bridge.define("System.Windows.Controls.ItemsControl.DefaultItemsPanelTemplate", {
        inherits: [System.Windows.IFrameworkTemplate],
        config: {
            alias: [
            "attach", "System$Windows$IFrameworkTemplate$attach",
            "detach", "System$Windows$IFrameworkTemplate$detach"
            ]
        },
        attach: function (element) {
            element.setTemplateChild(new System.Windows.Controls.StackPanel());
        },
        detach: function (element) {
            element.setTemplateChild(null);
        }
    });

    Bridge.define("System.Windows.Controls.ListBox.ExtendedSelectionBehavior", {
        inherits: [System.Windows.Controls.ListBox.ISelectionBehavior],
        listBox: null,
        config: {
            alias: [
            "setClickSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setClickSelection",
            "setFocusChangeSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setFocusChangeSelection"
            ]
        },
        ctor: function (listBox) {
            this.$initialize();
            this.listBox = listBox;
        },
        setClickSelection: function (item, modifiers) {
            if (modifiers === System.Windows.Input.ModifierKeys.None) {
                this.listBox.setSelectionAnchor(item);
                this.listBox.setSingleSelection(item);
            } else if (modifiers === System.Windows.Input.ModifierKeys.Shift) {
                this.listBox.setRangeSelection(item);
            } else if (modifiers === System.Windows.Input.ModifierKeys.Control) {
                this.listBox.setSelectionAnchor(item);
                this.listBox.toggleSelection(item);
            }
        },
        setFocusChangeSelection: function (item, modifiers) {
            if (modifiers === System.Windows.Input.ModifierKeys.None) {
                this.listBox.setSelectionAnchor(item);
                this.listBox.setSingleSelection(item);
            } else if (modifiers === System.Windows.Input.ModifierKeys.Shift) {
                this.listBox.setRangeSelection(item);
            }
        }
    });

    Bridge.define("System.Windows.Controls.ListBox.MultipleSelectionBehavior", {
        inherits: [System.Windows.Controls.ListBox.ISelectionBehavior],
        listBox: null,
        config: {
            alias: [
            "setClickSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setClickSelection",
            "setFocusChangeSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setFocusChangeSelection"
            ]
        },
        ctor: function (listBox) {
            this.$initialize();
            this.listBox = listBox;
        },
        setClickSelection: function (item, modifiers) {
            this.listBox.setSelectionAnchor(item);
            this.listBox.toggleSelection(item);
        },
        setFocusChangeSelection: function (item, modifiers) {
            //
        }
    });

    Bridge.define("System.Windows.Controls.ListBox.SingleSelectionBehavior", {
        inherits: [System.Windows.Controls.ListBox.ISelectionBehavior],
        listBox: null,
        config: {
            alias: [
            "setClickSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setClickSelection",
            "setFocusChangeSelection", "System$Windows$Controls$ListBox$ISelectionBehavior$setFocusChangeSelection"
            ]
        },
        ctor: function (listBox) {
            this.$initialize();
            this.listBox = listBox;
        },
        setClickSelection: function (item, modifiers) {
            if (modifiers !== System.Windows.Input.ModifierKeys.Control) {
                this.listBox.setSingleSelection(item);
            } else {
                this.listBox.setSelectionAnchor(item);
                this.listBox.toggleSingleSelection(item);
            }
        },
        setFocusChangeSelection: function (item, modifiers) {
            if (modifiers !== System.Windows.Input.ModifierKeys.Control) {
                this.listBox.setSingleSelection(item);
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.DragCompletedEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                IsCanceled: false
            }
        },
        ctor: function (routedEvent, originalSource, isCanceled) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setIsCanceled(isCanceled);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.DragDeltaEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                Delta: null
            }
        },
        ctor: function (routedEvent, originalSource, delta) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setDelta(delta);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.DragStartedEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        ctor: function (routedEvent, originalSource) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            //
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.AbsolutePlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.AbsolutePlacement();
                }
            }
        },
        getTargetArea: function (targetObjectRect, placementRectangle, mouseBounds, containerBounds) {
            return !placementRectangle.getIsEmpty() ? System.Windows.RectExtensions.addOffset(placementRectangle, containerBounds.getLocation()) : containerBounds;
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.AbsolutePointPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.AbsolutePointPlacement();
                }
            }
        },
        getTargetArea: function (targetObjectRect, placementRectangle, mouseBounds, containerBounds) {
            return !placementRectangle.getIsEmpty() ? System.Windows.RectExtensions.addOffset(placementRectangle, containerBounds.getLocation()) : containerBounds;
        },
        getRightEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(popupSize.getWidth(), currentAlignmentPoint.getY());
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), popupSize.getHeight());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.BottomPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.BottomPlacement();
                }
            }
        },
        getTargetOrigin: function (targetArea) {
            return System.Windows.RectExtensions.getBottomLeft(targetArea);
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), popupSize.getHeight());
        },
        getBottomEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return new System.Windows.Point.$ctor1(currentTargetOrigin.getX(), targetArea.getTop());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.CenterPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.CenterPlacement();
                }
            }
        },
        getTargetOrigin: function (targetArea) {
            return new System.Windows.Point.$ctor1(targetArea.getLeft() + targetArea.getWidth() / 2, targetArea.getTop() + targetArea.getHeight() / 2);
        },
        getPopupAlignmentPoint: function (popupSize) {
            return new System.Windows.Point.$ctor1(popupSize.getWidth() / 2, popupSize.getHeight() / 2);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.LeftPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.LeftPlacement();
                }
            }
        },
        getPopupAlignmentPoint: function (popupSize) {
            return System.Windows.Controls.Primitives.Placement.getTopRight(popupSize);
        },
        getLeftEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return new System.Windows.Point.$ctor1(targetArea.getRight(), currentTargetOrigin.getY());
        },
        getLeftEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(0, currentAlignmentPoint.getY());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.MousePlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.MousePlacement();
                }
            }
        },
        getTargetArea: function (targetObjectRect, placementRectangle, mouseBounds, containerBounds) {
            return mouseBounds;
        },
        getTargetOrigin: function (targetArea) {
            return System.Windows.RectExtensions.getBottomLeft(targetArea);
        },
        getBottomEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return new System.Windows.Point.$ctor1(currentTargetOrigin.getX(), targetArea.getTop());
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), popupSize.getHeight());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.MousePointPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.MousePointPlacement();
                }
            }
        },
        getTargetArea: function (targetObjectRect, placementRectangle, mouseBounds, containerBounds) {
            return mouseBounds;
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), popupSize.getHeight());
        },
        getRightEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(popupSize.getWidth(), currentAlignmentPoint.getY());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.RelativePlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.RelativePlacement();
                }
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.RelativePointPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.RelativePointPlacement();
                }
            }
        },
        getBottomEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), popupSize.getHeight());
        },
        getRightEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(popupSize.getWidth(), currentAlignmentPoint.getY());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.RightPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.RightPlacement();
                }
            }
        },
        getTargetOrigin: function (targetArea) {
            return System.Windows.RectExtensions.getTopRight(targetArea);
        },
        getRightEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return new System.Windows.Point.$ctor1(targetArea.getLeft(), currentTargetOrigin.getY());
        },
        getRightEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(popupSize.getWidth(), currentAlignmentPoint.getY());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Placement.TopPlacement", {
        inherits: [System.Windows.Controls.Primitives.Placement.PlacementBase],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Controls.Primitives.Placement.TopPlacement();
                }
            }
        },
        getPopupAlignmentPoint: function (popupSize) {
            return System.Windows.Controls.Primitives.Placement.getBottomLeft(popupSize);
        },
        getTopEdgeTargetOrigin: function (targetArea, currentTargetOrigin) {
            return new System.Windows.Point.$ctor1(currentTargetOrigin.getX(), targetArea.getBottom());
        },
        getTopEdgePopupAlignmentPoint: function (popupSize, currentAlignmentPoint) {
            return new System.Windows.Point.$ctor1(currentAlignmentPoint.getX(), 0);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ScrollEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                NewValue: 0,
                ScrollEventType: 0
            }
        },
        ctor: function (routedEvent, originalSource, scrollEventType, newValue) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setScrollEventType(scrollEventType);
            this.setNewValue(newValue);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.ScrollChangedEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                Offset: null,
                OffsetChange: null,
                Extent: null,
                ExtentChange: null,
                Viewport: null,
                ViewportChange: null
            }
        },
        ctor: function (routedEvent, originalSource, offset, offsetChange, extent, extentChange, viewport, viewportChange) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setOffset(offset);
            this.setOffsetChange(offsetChange);
            this.setExtent(extent);
            this.setExtentChange(extentChange);
            this.setViewport(viewport);
            this.setViewportChange(viewportChange);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.ScrollContentPresenter.InnerScrollInfo", {
        inherits: [System.Windows.Controls.Primitives.IScrollInfo],
        config: {
            properties: {
                ExtentSize: null,
                ViewportSize: null,
                CanHorizontallyScroll: false,
                CanVerticallyScroll: false,
                Offset: null
            },
            alias: [
            "getExtentSize", "System$Windows$Controls$Primitives$IScrollInfo$getExtentSize",
            "setExtentSize", "System$Windows$Controls$Primitives$IScrollInfo$setExtentSize",
            "getViewportSize", "System$Windows$Controls$Primitives$IScrollInfo$getViewportSize",
            "setViewportSize", "System$Windows$Controls$Primitives$IScrollInfo$setViewportSize",
            "getCanHorizontallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$getCanHorizontallyScroll",
            "setCanHorizontallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$setCanHorizontallyScroll",
            "getCanVerticallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$getCanVerticallyScroll",
            "setCanVerticallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$setCanVerticallyScroll",
            "getOffset", "System$Windows$Controls$Primitives$IScrollInfo$getOffset",
            "setOffset", "System$Windows$Controls$Primitives$IScrollInfo$setOffset"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.setExtentSize(System.Windows.Size.zero);
            this.setViewportSize(System.Windows.Size.zero);
            this.setOffset(System.Windows.Point.zero);
        }
    });

    Bridge.define("System.Windows.Controls.SelectionChangedEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                AddedItems: null,
                RemovedItems: null
            }
        },
        ctor: function (routedEvent, originalSource, removedItems, addedItems) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setRemovedItems(removedItems);
            this.setAddedItems(addedItems);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Controls.SelectionGroup$1", function (T) { return {
        inherits: [System.Windows.Controls.ISelectionGroup$1(T)],
        selection: Bridge.getDefaultValue(T),
        config: {
            events: {
                SelectionChanged: null
            },
            alias: [
            "addSelectionChanged", "System$Windows$Controls$ISelectionGroup$1$" + Bridge.getTypeAlias(T) + "$addSelectionChanged",
            "removeSelectionChanged", "System$Windows$Controls$ISelectionGroup$1$" + Bridge.getTypeAlias(T) + "$removeSelectionChanged",
            "getSelection", "System$Windows$Controls$ISelectionGroup$1$" + Bridge.getTypeAlias(T) + "$getSelection",
            "setSelection", "System$Windows$Controls$ISelectionGroup$1$" + Bridge.getTypeAlias(T) + "$setSelection"
            ]
        },
        getSelection: function () {
            return this.selection;
        },
        setSelection: function (value) {
            if (Granular.Compatibility.EqualityComparer.default.equals2(this.selection, value)) {
                return;
            }

            this.selection = value;
            Granular.Extensions.EventHandlerExtensions.raise$2(this.SelectionChanged, this);
        }
    }; });

    Bridge.define("System.Windows.Controls.SelectionGroupScope$1", function (T) { return {
        inherits: [System.Windows.Controls.ISelectionGroupScope$1(T)],
        groups: null,
        config: {
            alias: [
            "getSelectionGroup", "System$Windows$Controls$ISelectionGroupScope$1$" + Bridge.getTypeAlias(T) + "$getSelectionGroup"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.groups = new (System.Collections.Generic.Dictionary$2(String,System.Windows.Controls.ISelectionGroup$1(T)))();
        },
        getSelectionGroup: function (groupName) {
            var group = { };

            if (!this.groups.tryGetValue(groupName, group)) {
                group.v = new (System.Windows.Controls.SelectionGroup$1(T))();
                this.groups.add(groupName, group.v);
            }

            return group.v;
        }
    }; });

    Bridge.define("System.Windows.Controls.TextChangedEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        ctor: function (routedEvent, originalSource) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            //
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.CornerRadiusTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.CornerRadius.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Data.Binding", {
        inherits: [System.Windows.Markup.IMarkupExtension,System.Windows.IExpressionProvider],
        statics: {
            getStringFormatConverter: function (format) {
                return !Granular.Extensions.StringExtensions.isNullOrEmpty(format) ? new System.Windows.Data.Binding.StringFormatConverter(format) : null;
            }
        },
        config: {
            properties: {
                Path: null,
                Source: null,
                RelativeSource: null,
                ElementName: null,
                Mode: 0,
                UpdateSourceTrigger: 0,
                StringFormat: null,
                Converter: null,
                ConverterParameter: null,
                FallbackValue: null,
                TargetNullValue: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue",
            "createExpression", "System$Windows$IExpressionProvider$createExpression"
            ]
        },
        provideValue: function (context) {
            return this;
        },
        createExpression: function (dependencyObject, dependencyProperty) {
            return new System.Windows.Data.BindingExpression(dependencyObject, dependencyProperty, this.getPath(), this.getSource(), this.getRelativeSource(), this.getElementName(), this.getMode(), this.getUpdateSourceTrigger(), this.getConverter() || System.Windows.Data.Binding.getStringFormatConverter(this.getStringFormat()), this.getConverterParameter(), this.getFallbackValue(), this.getTargetNullValue());
        }
    });

    Bridge.define("System.Windows.Data.Binding.StringFormatConverter", {
        inherits: [System.Windows.Data.IValueConverter],
        format: null,
        config: {
            alias: [
            "convert", "System$Windows$Data$IValueConverter$convert",
            "convertBack", "System$Windows$Data$IValueConverter$convertBack"
            ]
        },
        ctor: function (format) {
            this.$initialize();
            this.format = format;
        },
        convert: function (value, targetType, parameter) {
            return System.String.format(this.format, value, parameter);
        },
        convertBack: function (value, targetType, parameter) {
            return null;
        }
    });

    Bridge.define("System.Windows.IExpression", {
        inherits: [System.Windows.Data.IObservableValue],
        $kind: "interface"
    });

    Bridge.define("System.Windows.Data.IPropertyObserver", {
        inherits: [System.Windows.Data.IObservableValue],
        $kind: "interface"
    });

    Bridge.define("System.Windows.Data.ContextSourceObserver", {
        inherits: [System.Windows.Data.IObservableValue,System.IDisposable],
        target: null,
        observableValue: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (target, baseValue) {
            this.$initialize();
            this.target = target;

            this.observableValue = new System.Windows.Data.ObservableValue.$ctor1(baseValue);
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.ContextSourceObserver.f1));

            if (Bridge.is(target, System.Windows.IContextElement)) {
                Bridge.cast(target, System.Windows.IContextElement).System$Windows$IContextElement$addContextParentChanged(Bridge.fn.cacheBind(this, this.onTargetContextParentChanged));
            }
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        dispose: function () {
            if (Bridge.is(this.target, System.Windows.IContextElement)) {
                Bridge.cast(this.target, System.Windows.IContextElement).System$Windows$IContextElement$removeContextParentChanged(Bridge.fn.cacheBind(this, this.onTargetContextParentChanged));
            }
        },
        onTargetContextParentChanged: function (sender, e) {
            this.observableValue.setBaseValue(this.getBaseValue());
        }
    });

    Bridge.ns("System.Windows.Data.ContextSourceObserver", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.ContextSourceObserver, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Data.DataContextSourceObserver", {
        inherits: [System.Windows.Data.IObservableValue,System.IDisposable],
        statics: {
            getFrameworkElementAncestor: function (target) {
                while (!(Bridge.is(target, System.Windows.FrameworkElement)) && Bridge.is(target, System.Windows.IContextElement)) {
                    target = Bridge.cast(target, System.Windows.IContextElement).System$Windows$IContextElement$getContextParent();
                }

                return Bridge.as(target, System.Windows.FrameworkElement);
            }
        },
        target: null,
        frameworkElementValue: null,
        dataContextValue: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (target) {
            this.$initialize();
            this.target = target;

            this.frameworkElementValue = new System.Windows.Data.ObservableValue.$ctor1(System.Windows.Data.DataContextSourceObserver.getFrameworkElementAncestor(target));
            this.frameworkElementValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.DataContextSourceObserver.f1));

            this.dataContextValue = new System.Windows.Data.DependencyPropertyObserver(System.Windows.FrameworkElement.dataContextProperty);
            this.dataContextValue.setBaseValue(this.frameworkElementValue.getValue());
            this.dataContextValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.DataContextSourceObserver.f2));

            if (Bridge.is(target, System.Windows.IContextElement)) {
                Bridge.cast(target, System.Windows.IContextElement).System$Windows$IContextElement$addContextParentChanged(Bridge.fn.cacheBind(this, this.onTargetContextParentChanged));
            }
        },
        getValue: function () {
            return this.dataContextValue.getValue();
        },
        dispose: function () {
            if (Bridge.is(this.target, System.Windows.IContextElement)) {
                Bridge.cast(this.target, System.Windows.IContextElement).System$Windows$IContextElement$removeContextParentChanged(Bridge.fn.cacheBind(this, this.onTargetContextParentChanged));
            }

            this.dataContextValue.dispose();
        },
        onTargetContextParentChanged: function (sender, e) {
            this.frameworkElementValue.setBaseValue(System.Windows.Data.DataContextSourceObserver.getFrameworkElementAncestor(this.target));
        }
    });

    Bridge.ns("System.Windows.Data.DataContextSourceObserver", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.DataContextSourceObserver, {
        f1: function (sender, oldValue, newValue) {
            this.dataContextValue.setBaseValue(newValue);
        },
        f2: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Data.ObservableExpression", {
        inherits: [System.Windows.Data.IObservableValue,System.IDisposable],
        observableValue: null,
        baseObserverValueType: null,
        baseObserver: null,
        delegateObserver: null,
        propertyPathElement: null,
        config: {
            events: {
                ValueChanged: null
            },
            properties: {
                ValueType: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        $ctor2: function (propertyPath) {
            System.Windows.Data.ObservableExpression.$ctor1.call(this, null, System.Windows.PropertyPath.parse(propertyPath));
            //
        },
        ctor: function (baseValue, propertyPath) {
            System.Windows.Data.ObservableExpression.$ctor1.call(this, baseValue, System.Windows.PropertyPath.parse(propertyPath));
            //
        },
        $ctor3: function (propertyPath) {
            System.Windows.Data.ObservableExpression.$ctor1.call(this, null, propertyPath);
            //
        },
        $ctor1: function (baseValue, propertyPath) {
            this.$initialize();
            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.ObservableExpression.f1));

            if (propertyPath.getIsEmpty()) {
                this.observableValue.setBaseValue(baseValue);
                this.setValueType(baseValue != null ? Bridge.getType(baseValue) : null);
            } else {
                this.propertyPathElement = System.Linq.Enumerable.from(propertyPath.getElements()).last();

                this.baseObserver = new System.Windows.Data.ObservableExpression.$ctor1(baseValue, System.Windows.PropertyPathExtensions.getBasePropertyPath(propertyPath));
                this.baseObserver.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.ObservableExpression.f2));

                this.setDelegateObserverBaseValue();
            }
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        setBaseValue: function (baseValue) {
            if (this.baseObserver != null) {
                this.baseObserver.setBaseValue(baseValue);
            } else {
                this.observableValue.setBaseValue(baseValue);
                this.setValueType(baseValue != null ? Bridge.getType(baseValue) : null);
            }
        },
        trySetValue: function (value) {
            return this.delegateObserver != null && (Granular.Compatibility.EqualityComparer.default.equals2(this.delegateObserver.System$Windows$Data$IObservableValue$getValue(), value) || this.delegateObserver.System$Windows$Data$IPropertyObserver$trySetValue(value));
        },
        setDelegateObserverBaseValue: function () {
            var baseValue = this.baseObserver.getValue();

            if (System.Windows.Data.ObservableValue.isNullOrUnset(baseValue) || Bridge.referenceEquals(this.baseObserverValueType, Bridge.getType(baseValue))) {
                if (this.delegateObserver != null) {
                    this.delegateObserver.System$Windows$Data$IPropertyObserver$setBaseValue(baseValue);
                }

                return;
            }

            this.baseObserverValueType = Bridge.getType(baseValue);

            if (Bridge.is(this.delegateObserver, System.IDisposable)) {
                Bridge.cast(this.delegateObserver, System.IDisposable).System$IDisposable$dispose();
            }

            this.delegateObserver = this.propertyPathElement.System$Windows$IPropertyPathElement$createPropertyObserver(this.baseObserverValueType);

            if (this.delegateObserver != null) {
                this.setValueType(this.delegateObserver.System$Windows$Data$IPropertyObserver$getValueType());
                this.delegateObserver.System$Windows$Data$IPropertyObserver$setBaseValue(baseValue);
                this.delegateObserver.System$Windows$Data$IObservableValue$addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.ObservableExpression.f3));
                this.observableValue.setBaseValue(this.delegateObserver.System$Windows$Data$IObservableValue$getValue());
            } else {
                this.setValueType(null);
                this.observableValue.setBaseValue(System.Windows.Data.ObservableValue.unsetValue);
            }
        },
        dispose: function () {
            if (Bridge.is(this.baseObserver, System.IDisposable)) {
                Bridge.cast(this.baseObserver, System.IDisposable).System$IDisposable$dispose();
            }

            if (Bridge.is(this.delegateObserver, System.IDisposable)) {
                Bridge.cast(this.delegateObserver, System.IDisposable).System$IDisposable$dispose();
            }
        }
    });

    Bridge.ns("System.Windows.Data.ObservableExpression", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.ObservableExpression, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        },
        f2: function (sender, oldValue, newValue) {
            this.setDelegateObserverBaseValue();
        },
        f3: function (sender, oldValue, newValue) {
            this.observableValue.setBaseValue(this.delegateObserver.System$Windows$Data$IObservableValue$getValue());
        }
    });

    Bridge.define("System.Windows.Data.ObservableValue", {
        inherits: [System.Windows.Data.IObservableValue],
        statics: {
            unsetValue: null,
            config: {
                init: function () {
                    this.unsetValue = new System.Windows.Data.NamedObject("ObservableValue.UnsetValue");
                }
            },
            isNullOrUnset: function (value) {
                return value == null || Bridge.referenceEquals(value, System.Windows.Data.ObservableValue.unsetValue);
            }
        },
        baseObservableValue: null,
        baseValue: null,
        baseObservableValueChangedEventHandler: null,
        config: {
            events: {
                ValueChanged: null
            },
            properties: {
                Value: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "setValue", "System$Windows$Data$IObservableValue$setValue"
            ]
        },
        ctor: function () {
            System.Windows.Data.ObservableValue.$ctor1.call(this, System.Windows.Data.ObservableValue.unsetValue);
            //
        },
        $ctor1: function (baseValue) {
            this.$initialize();
            this.setBaseValue(baseValue);
        },
        getBaseValue: function () {
            return this.baseValue;
        },
        setBaseValue: function (value) {
            if (Bridge.referenceEquals(this.baseValue, value)) {
                return;
            }

            if (this.baseObservableValue != null) {
                this.baseObservableValue.System$Windows$Data$IObservableValue$removeValueChanged(this.getBaseObservableValueChangedEventHandler());
            }

            this.baseValue = value;
            this.baseObservableValue = Bridge.as(value, System.Windows.Data.IObservableValue);

            if (this.baseObservableValue != null) {
                this.baseObservableValue.System$Windows$Data$IObservableValue$addValueChanged(this.getBaseObservableValueChangedEventHandler());
            }

            var oldValue = this.getValue();
            var newValue = this.baseObservableValue != null ? this.baseObservableValue.System$Windows$Data$IObservableValue$getValue() : this.baseValue;

            if (Granular.Compatibility.EqualityComparer.default.equals2(oldValue, newValue)) {
                return;
            }

            this.setValue(newValue);
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        },
        getBaseObservableValueChangedEventHandler: function () {
            if (Bridge.staticEquals(this.baseObservableValueChangedEventHandler, null)) {
                this.baseObservableValueChangedEventHandler = Bridge.fn.cacheBind(this, this.onBaseObservableValueChanged);
            }

            return this.baseObservableValueChangedEventHandler;
        },
        onBaseObservableValueChanged: function (sender, oldValue, newValue) {
            this.setValue(newValue);
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Data.RelativeSource", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        config: {
            properties: {
                Mode: 0,
                AncestorLevel: 0,
                AncestorType: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return this;
        },
        createSourceObserver: function (target) {
            switch (this.getMode()) {
                case System.Windows.Data.RelativeSourceMode.TemplatedParent: 
                    return new System.Windows.Data.TemplatedParentSourceObserver(target);
                case System.Windows.Data.RelativeSourceMode.Self: 
                    return new System.Windows.Data.StaticObservableValue(target);
                case System.Windows.Data.RelativeSourceMode.FindAncestor: 
                    return new System.Windows.Data.FindAncestorSourceObserver(target, this.getAncestorType(), this.getAncestorLevel());
            }

            throw new Granular.Exception("Unexpected RelativeSourceMode \"{0}\"", [this.getMode()]);
        }
    });

    Bridge.define("System.Windows.Data.StaticObservableValue", {
        inherits: [System.Windows.Data.IObservableValue],
        value: null,
        config: {
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue"
            ]
        },
        ctor: function (value) {
            this.$initialize();
            this.value = value;
        },
        addValueChanged: function (value) {
        },
        removeValueChanged: function (value) {
        },
        getValue: function () {
            return this.value;
        }
    });

    Bridge.define("System.Windows.DataTemplateKeyProvider", {
        inherits: [System.Windows.Markup.IDeferredValueKeyProvider],
        config: {
            alias: [
            "getValueKey", "System$Windows$Markup$IDeferredValueKeyProvider$getValueKey"
            ]
        },
        getValueKey: function (element) {
            var keyMember = System.Linq.Enumerable.from(element.getMembers()).singleOrDefault($asm.$.System.Windows.DataTemplateKeyProvider.f1, null);
            if (keyMember != null) {
                return System.Windows.Markup.ElementFactory.fromValue(System.Linq.Enumerable.from(keyMember.getValues()).single(), Object, element.getNamespaces(), element.getSourceUri()).System$Windows$Markup$IElementFactory$createElement(new System.Windows.Markup.InitializeContext.ctor());
            }

            var dataTypeMember = System.Linq.Enumerable.from(element.getMembers()).singleOrDefault($asm.$.System.Windows.DataTemplateKeyProvider.f2, null);
            if (dataTypeMember != null) {
                return new System.Windows.TemplateKey(Bridge.cast(System.Windows.Markup.ElementFactory.fromValue(System.Linq.Enumerable.from(dataTypeMember.getValues()).single(), Function, element.getNamespaces(), element.getSourceUri()).System$Windows$Markup$IElementFactory$createElement(new System.Windows.Markup.InitializeContext.ctor()), Function));
            }

            throw new Granular.Exception(System.String.format("Can't create value key from \"{0}\"", element.getName()));
        }
    });

    Bridge.ns("System.Windows.DataTemplateKeyProvider", $asm.$);

    Bridge.apply($asm.$.System.Windows.DataTemplateKeyProvider, {
        f1: function (member) {
            return Bridge.referenceEquals(member.getName().getLocalName(), "Key");
        },
        f2: function (member) {
            return Bridge.referenceEquals(member.getName().getLocalName(), "DataType");
        }
    });

    Bridge.define("System.Windows.DependencyPropertyPathElement", {
        inherits: [System.Windows.IPropertyPathElement],
        config: {
            properties: {
                DependencyProperty: null
            },
            alias: [
            "tryGetDependencyProperty", "System$Windows$IPropertyPathElement$tryGetDependencyProperty",
            "createPropertyObserver", "System$Windows$IPropertyPathElement$createPropertyObserver",
            "tryGetValue", "System$Windows$IPropertyPathElement$tryGetValue"
            ]
        },
        ctor: function (dependencyProperty) {
            this.$initialize();
            this.setDependencyProperty(dependencyProperty);
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.DependencyPropertyPathElement);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.referenceEquals(this.getDependencyProperty(), other.getDependencyProperty());
        },
        getHashCode: function () {
            return this.getDependencyProperty().getHashCode();
        },
        toString: function () {
            return System.String.format("({0})", this.getDependencyProperty());
        },
        tryGetDependencyProperty: function (containingType, dependencyProperty) {
            dependencyProperty.v = this.getDependencyProperty();
            return true;
        },
        createPropertyObserver: function (baseValueType) {
            return new System.Windows.Data.DependencyPropertyObserver(this.getDependencyProperty());
        },
        tryGetValue: function (target, value) {
            if (Bridge.is(target, System.Windows.DependencyObject)) {
                value.v = Bridge.cast(target, System.Windows.DependencyObject).getValue(this.getDependencyProperty());
                return true;
            }

            value.v = null;
            return false;
        }
    });

    Bridge.define("System.Windows.DependencyPropertyTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var text = value.toString().trim();

            var typeSeparatorIndex = System.String.indexOf(text, ".");
            if (typeSeparatorIndex === -1) {
                throw new Granular.Exception("Dependency property \"{0}\" does not contain owner type name", [text]);
            }

            var ownerType = System.Windows.Markup.TypeParser.parseType(text.substr(0, typeSeparatorIndex), namespaces);
            var dependencyProperty = System.Windows.DependencyProperty.getProperty(ownerType, text.substr(((typeSeparatorIndex + 1) | 0)));

            if (dependencyProperty == null) {
                throw new Granular.Exception("Can't find dependency property named \"{0}\"", [text]);
            }

            return dependencyProperty;
        }
    });

    Bridge.define("System.Windows.DependencyPropertyValueEntry", {
        inherits: [System.Windows.IDependencyPropertyValueEntry],
        statics: {
            BaseValuePriorities: 12,
            ValuePriorities: 14,
            BaseValueHighestPriority: 11,
            CurrentValuePriority: 12,
            AnimationValuePriority: 13
        },
        value: null,
        notifyValueChangedEventHandler: null,
        indexedObservableValueChangedEventHandler: null,
        observableValues: null,
        values: null,
        baseValuePriority: 0,
        dependencyObject: null,
        dependencyProperty: null,
        coerceValueCallback: null,
        config: {
            events: {
                ValueChanged: null
            },
            properties: {
                ValuePriority: 0
            },
            alias: [
            "addValueChanged", "System$Windows$IDependencyPropertyValueEntry$addValueChanged",
            "removeValueChanged", "System$Windows$IDependencyPropertyValueEntry$removeValueChanged",
            "getValue", "System$Windows$IDependencyPropertyValueEntry$getValue",
            "setValue", "System$Windows$IDependencyPropertyValueEntry$setValue",
            "getValuePriority", "System$Windows$IDependencyPropertyValueEntry$getValuePriority",
            "setValuePriority", "System$Windows$IDependencyPropertyValueEntry$setValuePriority",
            "getValue$1", "System$Windows$IDependencyPropertyValueEntry$getValue$1",
            "setValue$2", "System$Windows$IDependencyPropertyValueEntry$setValue",
            "getBaseValuePriority", "System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority",
            "coerceValue", "System$Windows$IDependencyPropertyValueEntry$coerceValue"
            ]
        },
        ctor: function (dependencyObject, dependencyProperty, coerceValueCallback) {
            if (coerceValueCallback === void 0) { coerceValueCallback = null; }

            this.$initialize();
            this.dependencyObject = dependencyObject;
            this.dependencyProperty = dependencyProperty;
            this.coerceValueCallback = coerceValueCallback;

            this.values = System.Array.init(14, null, Object);
            for (var i = 0; i < this.values.length; i = (i + 1) | 0) {
                this.values[i] = System.Windows.Data.ObservableValue.unsetValue;
            }
        },
        getValue: function () {
            return this.value;
        },
        setValue: function (value) {
            if (Bridge.is(this.value, System.Windows.INotifyChanged)) {
                Bridge.cast(this.value, System.Windows.INotifyChanged).System$Windows$INotifyChanged$removeChanged(this.getNotifyValueChangedEventHandler());
            }

            this.value = value;

            if (Bridge.is(this.value, System.Windows.INotifyChanged)) {
                Bridge.cast(this.value, System.Windows.INotifyChanged).System$Windows$INotifyChanged$addChanged(this.getNotifyValueChangedEventHandler());
            }
        },
        getNotifyValueChangedEventHandler: function () {
            if (Bridge.staticEquals(this.notifyValueChangedEventHandler, null)) {
                this.notifyValueChangedEventHandler = Bridge.fn.cacheBind(this, this.onValueNotifyChanged);
            }

            return this.notifyValueChangedEventHandler;
        },
        getIndexedObservableValueChangedEventHandler: function () {
            if (Bridge.staticEquals(this.indexedObservableValueChangedEventHandler, null)) {
                this.indexedObservableValueChangedEventHandler = Bridge.fn.cacheBind(this, this.onIndexedObservableValueChanged);
            }

            return this.indexedObservableValueChangedEventHandler;
        },
        getValue$1: function (priority, flattened) {
            if (this.observableValues != null && this.observableValues[priority] != null) {
                return flattened ? this.observableValues[priority].getValue() : this.observableValues[priority].getBaseValue();
            }

            return this.values[priority];
        },
        setValue$2: function (priority, value) {
            if (this.observableValues != null && this.observableValues[priority] != null) {
                this.observableValues[priority].setBaseValue(value);
                return;
            }

            var oldValue = this.values[priority];

            if (Bridge.is(value, System.Windows.Data.IObservableValue)) {
                if (this.observableValues == null) {
                    this.observableValues = System.Array.init(14, null, System.Windows.DependencyPropertyValueEntry.IndexedObservableValue);
                }

                var indexedObservableValue = new System.Windows.DependencyPropertyValueEntry.IndexedObservableValue(priority, oldValue);
                indexedObservableValue.addValueChanged(this.getIndexedObservableValueChangedEventHandler());

                this.observableValues[priority] = indexedObservableValue;
                this.values[priority] = System.Windows.Data.ObservableValue.unsetValue;

                indexedObservableValue.setBaseValue(value);
                return;
            }

            if (Granular.Compatibility.EqualityComparer.default.equals2(oldValue, value)) {
                return;
            }

            this.values[priority] = value;
            this.onValueChanged(priority, value);
        },
        getBaseValuePriority: function () {
            if (this.baseValuePriority > System.Windows.DependencyPropertyValueEntry.BaseValueHighestPriority) {
                this.baseValuePriority = System.Windows.DependencyPropertyValueEntry.BaseValueHighestPriority;

                while (this.baseValuePriority > 0 && !this.isValueValid(this.getValue$1(this.baseValuePriority, true))) {
                    this.baseValuePriority = (this.baseValuePriority - 1) | 0;
                }
            }

            return this.baseValuePriority;
        },
        coerceValue: function () {
            if (Bridge.staticEquals(this.coerceValueCallback, null)) {
                return;
            }

            var oldValue = this.getValue();
            var newValue = this.coerceValueCallback(this.dependencyObject, this.getValue$1(this.getValuePriority(), true));

            if (Granular.Compatibility.EqualityComparer.default.equals2(oldValue, newValue)) {
                return;
            }

            this.setValue(newValue);
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.ValueChanged, this, new System.Windows.DependencyPropertyChangedEventArgs.$ctor1(this.dependencyProperty, oldValue, newValue));
        },
        onIndexedObservableValueChanged: function (sender, oldValue, newValue) {
            this.onValueChanged(Bridge.cast(sender, System.Windows.DependencyPropertyValueEntry.IndexedObservableValue).getIndex(), newValue);
        },
        onValueChanged: function (newValuePriority, newValue) {
            if (this.getValuePriority() > newValuePriority) {
                if (this.baseValuePriority <= newValuePriority && newValuePriority <= System.Windows.DependencyPropertyValueEntry.BaseValueHighestPriority) {
                    this.baseValuePriority = 12; // invalidate baseValuePriority
                }

                return;
            }

            var oldValue = this.getValue();
            var isNewValueValid = this.isValueValid(newValue);

            if (this.getValuePriority() === newValuePriority && isNewValueValid && Bridge.staticEquals(this.coerceValueCallback, null)) {
                this.setValue(newValue);
                System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.ValueChanged, this, new System.Windows.DependencyPropertyChangedEventArgs.$ctor1(this.dependencyProperty, oldValue, newValue)); // since this was already the value priority and there is no coercion, Value must have been changed here
                return;
            }

            if (this.getValuePriority() < newValuePriority && !isNewValueValid) {
                return;
            }

            while (!isNewValueValid && newValuePriority > 0) {
                newValuePriority = (newValuePriority - 1) | 0;
                newValue = this.getValue$1(newValuePriority, true);
                isNewValueValid = this.isValueValid(newValue);
            }

            if (this.getValuePriority() !== newValuePriority) {
                this.setValuePriority(newValuePriority);
                this.baseValuePriority = newValuePriority; // possible invalidation of baseValuePriority
            }

            if (!Bridge.staticEquals(this.coerceValueCallback, null)) {
                newValue = this.coerceValueCallback(this.dependencyObject, newValue);
            }

            if (Granular.Compatibility.EqualityComparer.default.equals2(oldValue, newValue)) {
                return;
            }

            this.setValue(newValue);
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.ValueChanged, this, new System.Windows.DependencyPropertyChangedEventArgs.$ctor1(this.dependencyProperty, oldValue, newValue));
        },
        onValueNotifyChanged: function (sender, e) {
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.ValueChanged, this, new System.Windows.DependencyPropertyChangedEventArgs.ctor(this.dependencyProperty, this.getValue()));
        },
        isValueValid: function (newValue) {
            return !Bridge.referenceEquals(newValue, System.Windows.Data.ObservableValue.unsetValue) && this.dependencyProperty.isValidValue(newValue);
        }
    });

    Bridge.define("System.Windows.Documents.InlineConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return new System.Windows.Documents.Run.$ctor1(Bridge.cast(value, String));
        }
    });

    Bridge.define("System.Windows.DurationTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Duration.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.DynamicResourceExtension", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        config: {
            properties: {
                ResourceKey: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return new System.Windows.ResourceReferenceExpressionProvider(this.getResourceKey());
        }
    });

    Bridge.define("System.Windows.EventSetter", {
        inherits: [System.Windows.ITriggerAction],
        config: {
            properties: {
                Event: null,
                Handler: null,
                HandledEventsToo: false
            },
            alias: [
            "apply", "System$Windows$ITriggerAction$apply",
            "clean", "System$Windows$ITriggerAction$clean",
            "isActionOverlaps", "System$Windows$ITriggerAction$isActionOverlaps"
            ]
        },
        apply: function (target, valueSource) {
            target.addHandler(this.getEvent(), this.getHandler(), this.getHandledEventsToo());
        },
        clean: function (target, valueSource) {
            target.removeHandler(this.getEvent(), this.getHandler());
        },
        isActionOverlaps: function (action) {
            return Bridge.is(action, System.Windows.EventSetter) && Bridge.referenceEquals(this.getEvent(), Bridge.cast(action, System.Windows.EventSetter).getEvent());
        }
    });

    Bridge.define("System.Windows.EventTrigger.EventTriggerCondition", {
        inherits: [System.Windows.IEventTriggerCondition,System.IDisposable],
        statics: {
            register: function (element, routedEvent) {
                var condition = new System.Windows.EventTrigger.EventTriggerCondition(element, routedEvent);
                condition.register();
                return condition;
            }
        },
        element: null,
        routedEvent: null,
        config: {
            events: {
                EventRaised: null
            },
            alias: [
            "addEventRaised", "System$Windows$IEventTriggerCondition$addEventRaised",
            "removeEventRaised", "System$Windows$IEventTriggerCondition$removeEventRaised",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (element, routedEvent) {
            this.$initialize();
            this.element = element;
            this.routedEvent = routedEvent;
        },
        register: function () {
            this.element.addHandler(this.routedEvent, Bridge.fn.cacheBind(this, this.routedEventHandler));
        },
        dispose: function () {
            this.element.removeHandler(this.routedEvent, Bridge.fn.cacheBind(this, this.routedEventHandler));
        },
        routedEventHandler: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$2(this.EventRaised, this);
        }
    });

    Bridge.define("System.Windows.FrameworkElementFactory", {
        inherits: [System.Windows.IFrameworkElementFactory],
        elementFactory: null,
        context: null,
        config: {
            alias: [
            "createElement", "System$Windows$IFrameworkElementFactory$createElement"
            ]
        },
        ctor: function (elementFactory, context) {
            this.$initialize();
            this.elementFactory = elementFactory;
            this.context = context;
        },
        createElement: function (templatedParent) {
            var elementContext = new System.Windows.Markup.InitializeContext.$ctor1(null, this.context, new System.Windows.NameScope(this.context.getNameScope()), templatedParent, System.Windows.BaseValueSource.ParentTemplate);

            var element = Bridge.as(this.elementFactory.System$Windows$Markup$IElementFactory$createElement(elementContext), System.Windows.FrameworkElement);

            System.Windows.NameScope.setNameScope(element, elementContext.getNameScope());

            return element;
        }
    });

    Bridge.define("System.Windows.FrameworkPropertyMetadata", {
        inherits: [System.Windows.PropertyMetadata],
        config: {
            properties: {
                AffectsArrange: false,
                AffectsMeasure: false,
                AffectsParentArrange: false,
                AffectsParentMeasure: false,
                AffectsVisualState: false,
                BindsTwoWayByDefault: false,
                DefaultUpdateSourceTrigger: 0
            }
        },
        ctor: function () {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, System.Windows.FrameworkPropertyMetadataOptions.None, null, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor1: function (defaultValue) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, System.Windows.FrameworkPropertyMetadataOptions.None, null, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor8: function (flags) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, flags, null, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor9: function (flags, propertyChangedCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, flags, propertyChangedCallback, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor10: function (flags, propertyChangedCallback, coerceValueCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, flags, propertyChangedCallback, coerceValueCallback, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor11: function (propertyChangedCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, System.Windows.FrameworkPropertyMetadataOptions.None, propertyChangedCallback, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor12: function (propertyChangedCallback, coerceValueCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, null, System.Windows.FrameworkPropertyMetadataOptions.None, propertyChangedCallback, coerceValueCallback, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor6: function (defaultValue, propertyChangedCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, System.Windows.FrameworkPropertyMetadataOptions.None, propertyChangedCallback, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor2: function (defaultValue, flags) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, flags, null, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor7: function (defaultValue, propertyChangedCallback, coerceValueCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, System.Windows.FrameworkPropertyMetadataOptions.None, propertyChangedCallback, coerceValueCallback, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor3: function (defaultValue, flags, propertyChangedCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, flags, propertyChangedCallback, null, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor4: function (defaultValue, flags, propertyChangedCallback, coerceValueCallback) {
            System.Windows.FrameworkPropertyMetadata.$ctor5.call(this, defaultValue, flags, propertyChangedCallback, coerceValueCallback, false, System.Windows.Data.UpdateSourceTrigger.Default);
            //
        },
        $ctor5: function (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger) {
            this.$initialize();
            System.Windows.PropertyMetadata.$ctor3.call(this, defaultValue, propertyChangedCallback, coerceValueCallback);
            this.setAffectsArrange((flags & System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange) !== 0);
            this.setAffectsMeasure((flags & System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure) !== 0);
            this.setAffectsParentArrange((flags & System.Windows.FrameworkPropertyMetadataOptions.AffectsParentArrange) !== 0);
            this.setAffectsParentMeasure((flags & System.Windows.FrameworkPropertyMetadataOptions.AffectsParentMeasure) !== 0);
            this.setAffectsVisualState((flags & System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState) !== 0);
            this.setBindsTwoWayByDefault((flags & System.Windows.FrameworkPropertyMetadataOptions.BindsTwoWayByDefault) !== 0);
            this.setInherits((flags & System.Windows.FrameworkPropertyMetadataOptions.Inherits) !== 0);
            this.setDefaultUpdateSourceTrigger(defaultUpdateSourceTrigger);
        }
    });

    Bridge.define("System.Windows.FrameworkTemplate.EmptyFrameworkTemplate", {
        inherits: [System.Windows.IFrameworkTemplate],
        config: {
            alias: [
            "attach", "System$Windows$IFrameworkTemplate$attach",
            "detach", "System$Windows$IFrameworkTemplate$detach"
            ]
        },
        attach: function (element) {
            element.setTemplateChild(null);
        },
        detach: function (element) {
            //
        }
    });

    Bridge.define("System.Windows.GridLengthTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var text = value.toString().trim();

            if (Bridge.referenceEquals(text.toLowerCase(), "auto")) {
                return System.Windows.GridLength.auto;
            }

            if (Bridge.referenceEquals(text, "*")) {
                return System.Windows.GridLength.star;
            }

            if (System.String.endsWith(text, "*")) {
                var stars = { };
                if (Granular.Compatibility.Double.tryParse(text.substr(0, ((text.length - 1) | 0)), stars)) {
                    return System.Windows.GridLength.fromStars(stars.v);
                }
            }

            var pixels = { };
            if (Granular.Compatibility.Double.tryParse(text, pixels)) {
                return System.Windows.GridLength.fromPixles(pixels.v);
            }

            throw new Granular.Exception("Can't parse GridLength value \"{0}\"", [text]);
        }
    });

    Bridge.define("System.Windows.IndexPropertyPathElement", {
        inherits: [System.Windows.IPropertyPathElement],
        namespaces: null,
        sourceUri: null,
        config: {
            properties: {
                PropertyName: null,
                IndexRawValues: null
            },
            alias: [
            "tryGetValue", "System$Windows$IPropertyPathElement$tryGetValue",
            "tryGetDependencyProperty", "System$Windows$IPropertyPathElement$tryGetDependencyProperty",
            "createPropertyObserver", "System$Windows$IPropertyPathElement$createPropertyObserver"
            ]
        },
        ctor: function (propertyName, indexRawValues, namespaces, sourceUri) {
            this.$initialize();
            this.setPropertyName(propertyName);
            this.setIndexRawValues(indexRawValues);
            this.namespaces = namespaces;
            this.sourceUri = sourceUri;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.IndexPropertyPathElement);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && System.Windows.Markup.XamlName.op_Equality(this.getPropertyName(), other.getPropertyName()) && Granular.Compatibility.Linq.Enumerable.sequenceEqual(String, this.getIndexRawValues(), other.getIndexRawValues());
        },
        getHashCode: function () {
            return this.getPropertyName().getHashCode();
        },
        toString: function () {
            var propertyName = this.getPropertyName().getHasContainingTypeName() ? System.String.format("({0})", this.getPropertyName().getLocalName()) : this.getPropertyName().getLocalName();
            var indexRawValues = Granular.Compatibility.Linq.Enumerable.aggregate(String, Granular.Compatibility.Linq.Enumerable.defaultIfEmpty$1(String, this.getIndexRawValues(), ""), $asm.$.System.Windows.IndexPropertyPathElement.f1);

            return System.String.format("{0}[{1}]", propertyName, indexRawValues);
        },
        tryGetValue: function (target, value) {
            var containingType = System.Windows.Markup.XamlNameExtensions.resolveContainingType(this.getPropertyName(), Bridge.getType(target));
            var propertyName = this.getPropertyName().getMemberName();

            var isDefaultIndexProperty = Granular.Extensions.StringExtensions.isNullOrEmpty(propertyName);

            var indexPropertyValue = { };

            // an index property that has a name (such as "Values[0]"), might be a regular property with the same name ("Values"), and a default index property ("[0]" or "Item[0]")
            if (!isDefaultIndexProperty && System.Windows.PropertyPathElement.tryGetValue(target, this.getPropertyName(), indexPropertyValue)) {
                if (indexPropertyValue.v == null) {
                    value.v = null;
                    return false;
                }

                target = indexPropertyValue.v;
                containingType = Bridge.getType(indexPropertyValue.v);
                isDefaultIndexProperty = true;
            }

            var indexPropertyInfo = isDefaultIndexProperty ? Granular.Extensions.TypeExtensions.getDefaultIndexProperty(containingType) : Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, propertyName);

            if (indexPropertyInfo == null) {
                value.v = null;
                return false;
            }

            value.v = Bridge.Reflection.midel(indexPropertyInfo.g, target).apply(null, Granular.Compatibility.Linq.Enumerable.toArray(Object, this.parseIndexValues(indexPropertyInfo)));
            return true;
        },
        tryGetDependencyProperty: function (containingType, dependencyProperty) {
            dependencyProperty.v = null;
            return false;
        },
        createPropertyObserver: function (baseValueType) {
            return new System.Windows.Data.IndexPropertyObserver(baseValueType, this, this.namespaces);
        },
        parseIndexValues: function (indexPropertyInfo) {
            if (Granular.Compatibility.Linq.Enumerable.count(Object, (indexPropertyInfo.ipi || [])) !== Granular.Compatibility.Linq.Enumerable.count(String, this.getIndexRawValues())) {
                throw new Granular.Exception("Invalid number of index parameters for \"{0}.{1}\"", [Bridge.Reflection.getTypeName(indexPropertyInfo.td), indexPropertyInfo.n]);
            }

            return Granular.Compatibility.Linq.Enumerable.toArray(Object, Granular.Compatibility.Linq.Enumerable.zip(Object, String, Object, (indexPropertyInfo.ipi || []), this.getIndexRawValues(), Bridge.fn.bind(this, $asm.$.System.Windows.IndexPropertyPathElement.f2)));
        }
    });

    Bridge.ns("System.Windows.IndexPropertyPathElement", $asm.$);

    Bridge.apply($asm.$.System.Windows.IndexPropertyPathElement, {
        f1: function (s1, s2) {
            return System.String.format("{0}, {1}", s1, s2);
        },
        f2: function (parameter, rawValue) {
            return System.Windows.Markup.TypeConverter.convertValue(rawValue, parameter.pt, this.namespaces, this.sourceUri);
        }
    });

    Bridge.define("System.Windows.Input.CursorTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            if (Bridge.is(value, String)) {
                var propertyInfo = Bridge.Reflection.getMembers(System.Windows.Input.Cursors, 16, 24 | 256, Bridge.cast(value, String));
                if (propertyInfo != null) {
                    return Bridge.Reflection.midel(propertyInfo.g, null).apply(null, System.Array.init(0, null, Object));
                }
            }

            throw new Granular.Exception("Can't convert \"{0}\" to Cursor", [value]);
        }
    });

    Bridge.define("System.Windows.Input.InputEventArgs", {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                Device: null,
                Timestamp: 0
            }
        },
        ctor: function (routedEvent, originalSource, inputDevice, timestamp) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setDevice(inputDevice);
            this.setTimestamp(timestamp);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardDevice", {
        inherits: [System.Windows.Input.IInputDevice],
        target: null,
        downKeys: null,
        presentationSource: null,
        config: {
            events: {
                PreProcessKey: null,
                PostProcessKey: null,
                TargetChanged: null
            },
            alias: [
            "activate", "System$Windows$Input$IInputDevice$activate",
            "deactivate", "System$Windows$Input$IInputDevice$deactivate"
            ]
        },
        ctor: function (presentationSource) {
            this.$initialize();
            this.presentationSource = presentationSource;

            this.downKeys = new (System.Collections.Generic.HashSet$1(System.Windows.Input.Key))();
        },
        getTarget: function () {
            return this.target;
        },
        setTarget: function (value) {
            if (Bridge.referenceEquals(this.target, value)) {
                return;
            }

            var oldTarget = this.target;
            this.target = value;

            this.onTargetChanged(oldTarget, this.target);
            Granular.Extensions.EventHandlerExtensions.raise$2(this.TargetChanged, this);
        },
        getModifiers: function () {
            return ((this.downKeys.contains(System.Windows.Input.Key.LeftAlt) || this.downKeys.contains(System.Windows.Input.Key.RightAlt)) ? System.Windows.Input.ModifierKeys.Alt : System.Windows.Input.ModifierKeys.None) | ((this.downKeys.contains(System.Windows.Input.Key.LeftCtrl) || this.downKeys.contains(System.Windows.Input.Key.RightCtrl)) ? System.Windows.Input.ModifierKeys.Control : System.Windows.Input.ModifierKeys.None) | ((this.downKeys.contains(System.Windows.Input.Key.LeftShift) || this.downKeys.contains(System.Windows.Input.Key.RightShift)) ? System.Windows.Input.ModifierKeys.Shift : System.Windows.Input.ModifierKeys.None) | ((this.downKeys.contains(System.Windows.Input.Key.LWin) || this.downKeys.contains(System.Windows.Input.Key.RWin)) ? System.Windows.Input.ModifierKeys.Windows : System.Windows.Input.ModifierKeys.None);
        },
        activate: function () {
            //
        },
        deactivate: function () {
            var $t;
            if (this.getTarget() != null) {
                var timestamp = this.presentationSource.System$Windows$IPresentationSource$getTimestamp();

                $t = Bridge.getEnumerator(this.downKeys);
                while ($t.moveNext()) {
                    var key = $t.getCurrent();
                    System.Windows.IInputElementExtensions.raiseEvents(this.getTarget(), new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.previewKeyUpEvent, this.getTarget(), this, timestamp, key, System.Windows.Input.KeyStates.None, false), new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.keyUpEvent, this.getTarget(), this, timestamp, key, System.Windows.Input.KeyStates.None, false));
                }
            }

            this.downKeys.clear();
        },
        processRawEvent: function (rawEvent) {
            if (rawEvent.getKeyStates() === System.Windows.Input.KeyStates.Down) {
                this.downKeys.add(rawEvent.getKey());
            } else {
                this.downKeys.remove(rawEvent.getKey());
            }

            var previewRoutedEvent;
            var routedEvent;

            if (rawEvent.getKeyStates() === System.Windows.Input.KeyStates.Down) {
                previewRoutedEvent = System.Windows.Input.Keyboard.previewKeyDownEvent;
                routedEvent = System.Windows.Input.Keyboard.keyDownEvent;
            } else if (rawEvent.getKeyStates() === System.Windows.Input.KeyStates.None) {
                previewRoutedEvent = System.Windows.Input.Keyboard.previewKeyUpEvent;
                routedEvent = System.Windows.Input.Keyboard.keyUpEvent;
            } else {
                throw new Granular.Exception("Unexpected KeyStates \"{0}\"", [rawEvent.getKeyStates()]);
            }

            var previewEventArgs = new System.Windows.Input.KeyEventArgs(previewRoutedEvent, this.getTarget(), this, rawEvent.getTimestamp(), rawEvent.getKey(), rawEvent.getKeyStates(), rawEvent.getIsRepeat());
            var eventArgs = new System.Windows.Input.KeyEventArgs(routedEvent, this.getTarget(), this, rawEvent.getTimestamp(), rawEvent.getKey(), rawEvent.getKeyStates(), rawEvent.getIsRepeat());

            System.Windows.Input.KeyEventHandlerExtensions.raise(this.PreProcessKey, this, previewEventArgs);

            if (this.getTarget() != null) {
                System.Windows.IInputElementExtensions.raiseEvents(this.getTarget(), previewEventArgs, eventArgs);
            }

            System.Windows.Input.KeyEventHandlerExtensions.raise(this.PostProcessKey, this, eventArgs);

            return (previewEventArgs.getHandled() || eventArgs.getHandled()) && !previewEventArgs.getForceHostHandling() && !eventArgs.getForceHostHandling();
        },
        getKeyStates: function (key) {
            return this.downKeys.contains(key) ? System.Windows.Input.KeyStates.Down : System.Windows.Input.KeyStates.None;
        },
        focus: function (element) {
            this.setTarget(element);

            return new Granular.Disposable(Bridge.fn.bind(this, function () {
                if (Bridge.referenceEquals(this.getTarget(), element)) {
                    this.setTarget(null);
                }
            }));
        },
        onTargetChanged: function (oldTarget, newTarget) {
            var $t, $t1;
            var timestamp = this.presentationSource.System$Windows$IPresentationSource$getTimestamp();

            if (oldTarget != null) {
                $t = Bridge.getEnumerator(this.downKeys);
                while ($t.moveNext()) {
                    var key = $t.getCurrent();
                    System.Windows.IInputElementExtensions.raiseEvents(oldTarget, new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.previewKeyUpEvent, oldTarget, this, timestamp, key, System.Windows.Input.KeyStates.None, false), new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.keyUpEvent, oldTarget, this, timestamp, key, System.Windows.Input.KeyStates.None, false));
                }

                System.Windows.IInputElementExtensions.raiseEvents(oldTarget, new System.Windows.Input.KeyboardFocusChangedEventArgs(System.Windows.Input.Keyboard.previewLostKeyboardFocusEvent, oldTarget, this, timestamp, oldTarget, newTarget), new System.Windows.Input.KeyboardFocusChangedEventArgs(System.Windows.Input.Keyboard.lostKeyboardFocusEvent, oldTarget, this, timestamp, oldTarget, newTarget));
            }

            if (newTarget != null) {
                System.Windows.IInputElementExtensions.raiseEvents(newTarget, new System.Windows.Input.KeyboardFocusChangedEventArgs(System.Windows.Input.Keyboard.previewGotKeyboardFocusEvent, newTarget, this, timestamp, oldTarget, newTarget), new System.Windows.Input.KeyboardFocusChangedEventArgs(System.Windows.Input.Keyboard.gotKeyboardFocusEvent, newTarget, this, timestamp, oldTarget, newTarget));

                $t1 = Bridge.getEnumerator(this.downKeys);
                while ($t1.moveNext()) {
                    var key1 = $t1.getCurrent();
                    System.Windows.IInputElementExtensions.raiseEvents(newTarget, new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.previewKeyDownEvent, newTarget, this, timestamp, key1, System.Windows.Input.KeyStates.None, false), new System.Windows.Input.KeyEventArgs(System.Windows.Input.Keyboard.keyDownEvent, newTarget, this, timestamp, key1, System.Windows.Input.KeyStates.None, false));
                }
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.BaseNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.INavigation],
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "findFirstTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findFirstTarget",
            "findLastTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findLastTarget",
            "getGlobalStops", "System$Windows$Input$KeyboardNavigationTarget$INavigation$getGlobalStops"
            ]
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findNextTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : System.Windows.Input.KeyboardNavigationTarget.findNextContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : System.Windows.Input.KeyboardNavigationTarget.findPreviousContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findFirstTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findFirstTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : System.Windows.Input.KeyboardNavigationTarget.findFirstContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findLastTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findLastTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : System.Windows.Input.KeyboardNavigationTarget.findLastContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        getGlobalStops: function (scope, currentElement, navigationModeProperty) {
            return System.Windows.Input.KeyboardNavigationTarget.getContainedStops(scope, currentElement, navigationModeProperty);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.BottomBoundStopComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Windows.Input.KeyboardNavigationTarget.Stop)],
        currentPosition: null,
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare"
            ]
        },
        ctor: function (currentStop) {
            this.$initialize();
            this.currentPosition = System.Windows.Input.KeyboardNavigationTarget.getBottomBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(currentStop.getElement()));
        },
        compare: function (x, y) {
            var relativePosition1 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getTopBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(x.getElement())), this.currentPosition);
            var relativePosition2 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getTopBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(y.getElement())), this.currentPosition);

            var distance1 = relativePosition1.getY() < 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition1) : System.Windows.PointExtensions.getLengthSqr(relativePosition1);
            var distance2 = relativePosition2.getY() < 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition2) : System.Windows.PointExtensions.getLengthSqr(relativePosition2);

            return Bridge.compare(distance1, distance2);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.LeftBoundStopComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Windows.Input.KeyboardNavigationTarget.Stop)],
        currentPosition: null,
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare"
            ]
        },
        ctor: function (currentStop) {
            this.$initialize();
            this.currentPosition = System.Windows.Input.KeyboardNavigationTarget.getLeftBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(currentStop.getElement()));
        },
        compare: function (x, y) {
            var relativePosition1 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getRightBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(x.getElement())), this.currentPosition);
            var relativePosition2 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getRightBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(y.getElement())), this.currentPosition);

            var distance1 = relativePosition1.getX() <= 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition1) : System.Windows.PointExtensions.getLengthSqr(relativePosition1);
            var distance2 = relativePosition2.getX() <= 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition2) : System.Windows.PointExtensions.getLengthSqr(relativePosition2);

            return Bridge.compare(distance1, distance2);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.RightBoundStopComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Windows.Input.KeyboardNavigationTarget.Stop)],
        currentPosition: null,
        config: {
            alias: [
            "compare", "System$Collections$Generic$IComparer$1$System$Windows$Input$KeyboardNavigationTarget$Stop$compare"
            ]
        },
        ctor: function (currentStop) {
            this.$initialize();
            this.currentPosition = System.Windows.Input.KeyboardNavigationTarget.getRightBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(currentStop.getElement()));
        },
        compare: function (x, y) {
            var relativePosition1 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getLeftBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(x.getElement())), this.currentPosition);
            var relativePosition2 = System.Windows.Point.op_Subtraction(System.Windows.Input.KeyboardNavigationTarget.getLeftBoundPosition(System.Windows.Input.KeyboardNavigationTarget.getAbsoluteBounds(y.getElement())), this.currentPosition);

            var distance1 = relativePosition1.getX() < 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition1) : System.Windows.PointExtensions.getLengthSqr(relativePosition1);
            var distance2 = relativePosition2.getX() < 0 ? -System.Windows.PointExtensions.getLengthSqr(relativePosition2) : System.Windows.PointExtensions.getLengthSqr(relativePosition2);

            return Bridge.compare(distance1, distance2);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.StopComparerProvider", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.IStopComparerProvider],
        createComparer$1: null,
        config: {
            alias: [
            "createComparer", "System$Windows$Input$KeyboardNavigationTarget$IStopComparerProvider$createComparer"
            ]
        },
        ctor: function (createComparer) {
            this.$initialize();
            this.createComparer$1 = createComparer;
        },
        createComparer: function (currentStop) {
            return this.createComparer$1(currentStop);
        }
    });

    Bridge.define("System.Windows.Input.MouseDevice", {
        inherits: [System.Windows.Input.IInputDevice,System.IDisposable],
        hitTarget: null,
        captureTarget: null,
        isActive: false,
        target: null,
        cursor: null,
        presentationSource: null,
        pressedButtons: null,
        config: {
            events: {
                CursorChanged: null
            },
            properties: {
                Position: null
            },
            alias: [
            "dispose", "System$IDisposable$dispose",
            "activate", "System$Windows$Input$IInputDevice$activate",
            "deactivate", "System$Windows$Input$IInputDevice$deactivate"
            ]
        },
        ctor: function (presentationSource) {
            this.$initialize();
            this.presentationSource = presentationSource;
            presentationSource.System$Windows$IPresentationSource$addHitTestInvalidated(Bridge.fn.cacheBind(this, this.onHitTestInvalidated));

            this.pressedButtons = new (System.Collections.Generic.HashSet$1(System.Windows.Input.MouseButton))();
            this.setPosition(System.Windows.Point.zero);

            this.setCursor(System.Windows.Input.Cursors.getArrow());
        },
        getHitTarget: function () {
            return this.hitTarget;
        },
        setHitTarget: function (value) {
            this.hitTarget = value;
            this.setTarget$1();
        },
        getCaptureTarget: function () {
            return this.captureTarget;
        },
        setCaptureTarget: function (value) {
            this.captureTarget = value;
            this.setTarget$1();
        },
        getIsActive: function () {
            return this.isActive;
        },
        setIsActive: function (value) {
            this.isActive = value;
            this.setTarget$1();
        },
        getTarget: function () {
            return this.target;
        },
        setTarget: function (value) {
            if (Bridge.referenceEquals(this.target, value)) {
                return;
            }

            var oldTarget = this.target;
            this.target = value;

            this.onTargetChanged(oldTarget, this.target);
        },
        getCursor: function () {
            return this.cursor;
        },
        setCursor: function (value) {
            if (Bridge.referenceEquals(this.cursor, value)) {
                return;
            }

            this.cursor = value;
            Granular.Extensions.EventHandlerExtensions.raise$2(this.CursorChanged, this);
        },
        dispose: function () {
            this.presentationSource.System$Windows$IPresentationSource$removeHitTestInvalidated(Bridge.fn.cacheBind(this, this.onHitTestInvalidated));
        },
        setTarget$1: function () {
            this.setTarget(this.getIsActive() ? this.getCaptureTarget() || this.getHitTarget() : null);
        },
        activate: function () {
            this.setIsActive(true);
        },
        deactivate: function () {
            var $t;
            var lastTarget = this.getTarget();

            this.setIsActive(false);

            if (lastTarget != null) {
                var timestamp = this.presentationSource.System$Windows$IPresentationSource$getTimestamp();

                $t = Bridge.getEnumerator(this.pressedButtons);
                while ($t.moveNext()) {
                    var button = $t.getCurrent();
                    System.Windows.IInputElementExtensions.raiseEvents(lastTarget, new System.Windows.Input.MouseButtonEventArgs(System.Windows.Input.Mouse.previewMouseUpEvent, lastTarget, this, timestamp, this.getPosition(), button, System.Windows.Input.MouseButtonState.Released, 1), new System.Windows.Input.MouseButtonEventArgs(System.Windows.Input.Mouse.mouseUpEvent, lastTarget, this, timestamp, this.getPosition(), button, System.Windows.Input.MouseButtonState.Released, 1));
                }
            }

            this.pressedButtons.clear();
        },
        processRawEvent: function (rawEventArgs) {
            if (!this.getIsActive()) {
                this.activate();
            }

            this.setPosition(rawEventArgs.getPosition());
            this.setHitTarget(this.presentationSource.System$Windows$IPresentationSource$hitTest(this.getPosition()));

            if (this.getTarget() == null) {
                return false;
            }

            if (Bridge.is(rawEventArgs, System.Windows.Input.RawMouseButtonEventArgs)) {
                return this.processRawMouseButtonEvent(Bridge.cast(rawEventArgs, System.Windows.Input.RawMouseButtonEventArgs));
            }

            if (Bridge.is(rawEventArgs, System.Windows.Input.RawMouseWheelEventArgs)) {
                return this.processRawMouseWheelEvent(Bridge.cast(rawEventArgs, System.Windows.Input.RawMouseWheelEventArgs));
            }

            return System.Windows.IInputElementExtensions.raiseEvents(this.getTarget(), new System.Windows.Input.MouseEventArgs(System.Windows.Input.Mouse.previewMouseMoveEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition()), new System.Windows.Input.MouseEventArgs(System.Windows.Input.Mouse.mouseMoveEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition()));
        },
        processRawMouseButtonEvent: function (rawEventArgs) {
            var isPressed = rawEventArgs.getButtonState() === System.Windows.Input.MouseButtonState.Pressed;

            if (isPressed) {
                this.pressedButtons.add(rawEventArgs.getButton());
            } else {
                this.pressedButtons.remove(rawEventArgs.getButton());
            }

            return System.Windows.IInputElementExtensions.raiseEvents(this.getTarget(), new System.Windows.Input.MouseButtonEventArgs(isPressed ? System.Windows.Input.Mouse.previewMouseDownEvent : System.Windows.Input.Mouse.previewMouseUpEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition(), rawEventArgs.getButton(), rawEventArgs.getButtonState(), 1), new System.Windows.Input.MouseButtonEventArgs(isPressed ? System.Windows.Input.Mouse.mouseDownEvent : System.Windows.Input.Mouse.mouseUpEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition(), rawEventArgs.getButton(), rawEventArgs.getButtonState(), 1));
        },
        processRawMouseWheelEvent: function (rawEventArgs) {
            return System.Windows.IInputElementExtensions.raiseEvents(this.getTarget(), new System.Windows.Input.MouseWheelEventArgs(System.Windows.Input.Mouse.previewMouseWheelEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition(), rawEventArgs.getDelta()), new System.Windows.Input.MouseWheelEventArgs(System.Windows.Input.Mouse.mouseWheelEvent, this.getTarget(), this, rawEventArgs.getTimestamp(), rawEventArgs.getPosition(), rawEventArgs.getDelta()));
        },
        onHitTestInvalidated: function (sender, e) {
            this.setHitTarget(this.presentationSource.System$Windows$IPresentationSource$hitTest(this.getPosition()));
        },
        getButtonState: function (button) {
            return this.pressedButtons.contains(button) ? System.Windows.Input.MouseButtonState.Pressed : System.Windows.Input.MouseButtonState.Released;
        },
        capture: function (element) {
            this.setCaptureTarget(element);
        },
        releaseCapture: function () {
            this.setCaptureTarget(null);
        },
        onTargetChanged: function (oldTarget, newTarget) {
            var oldTargetPath = oldTarget != null ? System.Linq.Enumerable.from(oldTarget.System$Windows$IInputElement$getPathFromRoot()).toArray() : System.Array.init(0, null, System.Windows.IInputElement);
            var newTargetPath = newTarget != null ? System.Linq.Enumerable.from(newTarget.System$Windows$IInputElement$getPathFromRoot()).toArray() : System.Array.init(0, null, System.Windows.IInputElement);

            var splitIndex = 0;
            while (splitIndex < oldTargetPath.length && splitIndex < newTargetPath.length && Bridge.referenceEquals(oldTargetPath[splitIndex], newTargetPath[splitIndex])) {
                splitIndex = (splitIndex + 1) | 0;
            }

            var timestamp = this.presentationSource.System$Windows$IPresentationSource$getTimestamp();

            for (var i = (oldTargetPath.length - 1) | 0; i >= splitIndex; i = (i - 1) | 0) {
                oldTargetPath[i].System$Windows$IInputElement$raiseEvent(new System.Windows.Input.MouseEventArgs(System.Windows.Input.Mouse.mouseLeaveEvent, oldTargetPath[i], this, timestamp, this.getPosition()));
            }

            for (var i1 = splitIndex; i1 < newTargetPath.length; i1 = (i1 + 1) | 0) {
                newTargetPath[i1].System$Windows$IInputElement$raiseEvent(new System.Windows.Input.MouseEventArgs(System.Windows.Input.Mouse.mouseEnterEvent, newTargetPath[i1], this, timestamp, this.getPosition()));
            }

            this.setCursor(this.queryCursor(timestamp));
        },
        updateCursor: function () {
            this.setCursor(this.queryCursor(this.presentationSource.System$Windows$IPresentationSource$getTimestamp()));
        },
        queryCursor: function (timestamp) {
            if (this.getTarget() == null) {
                return System.Windows.Input.Cursors.getArrow();
            }

            var e = new System.Windows.Input.QueryCursorEventArgs(System.Windows.Input.Mouse.queryCursorEvent, this.getTarget(), this, timestamp, this.getPosition());
            e.setCursor(System.Windows.Input.Cursors.getArrow());
            this.getTarget().System$Windows$IInputElement$raiseEvent(e);

            return e.getHandled() ? e.getCursor() : System.Windows.Input.Cursors.getArrow();
        }
    });

    Bridge.define("System.Windows.Input.RawKeyboardEventArgs", {
        inherits: [System.Windows.Input.RawEventArgs],
        config: {
            properties: {
                Key: 0,
                KeyStates: 0,
                IsRepeat: false
            }
        },
        ctor: function (key, keyStates, isRepeat, timestamp) {
            this.$initialize();
            System.Windows.Input.RawEventArgs.ctor.call(this, timestamp);
            this.setKey(key);
            this.setKeyStates(keyStates);
            this.setIsRepeat(isRepeat);
        }
    });

    Bridge.define("System.Windows.Input.RawMouseEventArgs", {
        inherits: [System.Windows.Input.RawEventArgs],
        config: {
            properties: {
                Position: null
            }
        },
        ctor: function (position, timestamp) {
            this.$initialize();
            System.Windows.Input.RawEventArgs.ctor.call(this, timestamp);
            this.setPosition(position);
        }
    });

    Bridge.define("System.Windows.Markup.BooleanTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.BooleanTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var text = value.toString().trim().toLowerCase();

            if (!Bridge.referenceEquals(text, "true") && !Bridge.referenceEquals(text, "false")) {
                throw new Granular.Exception("Can't convert \"{0}\" to boolean", [text]);
            }

            return Bridge.referenceEquals(text, "true");
        }
    });

    Bridge.define("System.Windows.Markup.ClrEventAdapter", {
        inherits: [System.Windows.Markup.IEventAdapter],
        eventInfo: null,
        config: {
            alias: [
            "getHandlerType", "System$Windows$Markup$IEventAdapter$getHandlerType",
            "addHandler", "System$Windows$Markup$IEventAdapter$addHandler"
            ]
        },
        ctor: function (eventInfo) {
            this.$initialize();
            this.eventInfo = eventInfo;
        },
        getHandlerType: function () {
            return System.Reflection.EventInfoExtensions.getEventHandlerType(this.eventInfo);
        },
        addHandler: function (target, handler) {
            Bridge.Reflection.midel(this.eventInfo.ad, target)(handler);
        }
    });

    Bridge.define("System.Windows.Markup.ClrPropertyAdapter", {
        inherits: [System.Windows.Markup.IPropertyAdapter],
        property: null,
        index: null,
        config: {
            alias: [
            "getPropertyType", "System$Windows$Markup$IPropertyAdapter$getPropertyType",
            "getHasGetter", "System$Windows$Markup$IPropertyAdapter$getHasGetter",
            "getHasSetter", "System$Windows$Markup$IPropertyAdapter$getHasSetter",
            "getValue", "System$Windows$Markup$IPropertyAdapter$getValue",
            "setValue", "System$Windows$Markup$IPropertyAdapter$setValue"
            ]
        },
        ctor: function (property, index) {
            if (index === void 0) { index = null; }

            this.$initialize();
            this.property = property;
            this.index = index || System.Array.init(0, null, Object);
        },
        getPropertyType: function () {
            return this.property.rt;
        },
        getHasGetter: function () {
            return System.Reflection.PropertyInfoExtensions.getGetMethod(this.property) != null;
        },
        getHasSetter: function () {
            return System.Reflection.PropertyInfoExtensions.getSetMethod(this.property) != null;
        },
        getValue: function (target) {
            return Bridge.Reflection.midel(this.property.g, target).apply(null, this.index);
        },
        setValue: function (target, value, valueSource) {
            Bridge.Reflection.midel(this.property.s, target).apply(null, this.index.concat(value));
        }
    });

    Bridge.define("System.Windows.Markup.ConstantElementFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        value: null,
        config: {
            properties: {
                ElementType: null
            },
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "setElementType", "System$Windows$Markup$IElementFactory$setElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (value) {
            this.$initialize();
            this.value = value;
            this.setElementType(Bridge.getType(value));
        },
        createElement: function (context) {
            return this.value;
        }
    });

    Bridge.define("System.Windows.Markup.ContentPropertyAttribute", {
        inherits: [System.Windows.Markup.PropertyAttribute],
        statics: {
            propertyNameCache: null,
            config: {
                init: function () {
                    this.propertyNameCache = Granular.Collections.CacheDictionary$2(Function,String).createUsingStringKeys($asm.$.System.Windows.Markup.ContentPropertyAttribute.f1, $asm.$.System.Windows.Markup.ContentPropertyAttribute.f2);
                }
            },
            getPropertyName: function (type) {
                return System.Windows.Markup.ContentPropertyAttribute.propertyNameCache.getValue(type);
            }
        },
        ctor: function (name) {
            this.$initialize();
            System.Windows.Markup.PropertyAttribute.ctor.call(this, name);
            //
        }
    });

    Bridge.ns("System.Windows.Markup.ContentPropertyAttribute", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.ContentPropertyAttribute, {
        f1: function (type) {
            return System.Windows.Markup.PropertyAttribute.resolvePropertyName(System.Windows.Markup.ContentPropertyAttribute, type);
        },
        f2: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.ConvertedElementFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        valueFactory: null,
        namespaces: null,
        sourceUri: null,
        typeConverter: null,
        config: {
            properties: {
                ElementType: null
            },
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "setElementType", "System$Windows$Markup$IElementFactory$setElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (elementFactory, elementTargetType, namespaces, sourceUri) {
            this.$initialize();
            this.valueFactory = elementFactory;
            this.setElementType(elementTargetType);
            this.namespaces = namespaces;
            this.sourceUri = sourceUri;
            this.typeConverter = System.Windows.Markup.TypeConverter.getTypeConverter(elementFactory.System$Windows$Markup$IElementFactory$getElementType(), elementTargetType);
        },
        createElement: function (context) {
            return this.typeConverter.System$Windows$Markup$ITypeConverter$convertFrom(this.namespaces, this.sourceUri, this.valueFactory.System$Windows$Markup$IElementFactory$createElement(context));
        }
    });

    Bridge.define("System.Windows.Markup.DependencyPropertyAdapter", {
        inherits: [System.Windows.Markup.IPropertyAdapter],
        property: null,
        config: {
            alias: [
            "getPropertyType", "System$Windows$Markup$IPropertyAdapter$getPropertyType",
            "getHasGetter", "System$Windows$Markup$IPropertyAdapter$getHasGetter",
            "getHasSetter", "System$Windows$Markup$IPropertyAdapter$getHasSetter",
            "getValue", "System$Windows$Markup$IPropertyAdapter$getValue",
            "setValue", "System$Windows$Markup$IPropertyAdapter$setValue"
            ]
        },
        ctor: function (property) {
            this.$initialize();
            this.property = property;
        },
        getPropertyType: function () {
            return this.property.getPropertyType();
        },
        getHasGetter: function () {
            return true;
        },
        getHasSetter: function () {
            return !this.property.getIsReadOnly();
        },
        getValue: function (target) {
            return Bridge.cast(target, System.Windows.DependencyObject).getValue(this.property);
        },
        setValue: function (target, value, valueSource) {
            Bridge.cast(target, System.Windows.DependencyObject).setValue(this.property, value, valueSource);
        }
    });

    Bridge.define("System.Windows.Markup.DictionaryKeyPropertyAttribute", {
        inherits: [System.Windows.Markup.PropertyAttribute],
        statics: {
            propertyNameCache: null,
            config: {
                init: function () {
                    this.propertyNameCache = Granular.Collections.CacheDictionary$2(Function,String).createUsingStringKeys($asm.$.System.Windows.Markup.DictionaryKeyPropertyAttribute.f1, $asm.$.System.Windows.Markup.DictionaryKeyPropertyAttribute.f2);
                }
            },
            getPropertyName: function (type) {
                return System.Windows.Markup.DictionaryKeyPropertyAttribute.propertyNameCache.getValue(type);
            }
        },
        ctor: function (name) {
            this.$initialize();
            System.Windows.Markup.PropertyAttribute.ctor.call(this, name);
            //
        }
    });

    Bridge.ns("System.Windows.Markup.DictionaryKeyPropertyAttribute", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.DictionaryKeyPropertyAttribute, {
        f1: function (type) {
            return System.Windows.Markup.PropertyAttribute.resolvePropertyName(System.Windows.Markup.DictionaryKeyPropertyAttribute, type);
        },
        f2: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.DoubleTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.DoubleTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var text = value.toString().trim().toLowerCase();

            if (Bridge.referenceEquals(text, "auto")) {
                return Number.NaN;
            }

            return System.Double.parse(text);
        }
    });

    Bridge.define("System.Windows.Markup.ElementCollectionContentInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        elementsFactory: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (valueTargetType, values) {
            this.$initialize();
            this.elementsFactory = Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.Markup.IElementFactory, Granular.Compatibility.Linq.Enumerable.select(Object, System.Windows.Markup.IElementFactory, values, function (value) {
                return System.Windows.Markup.ElementFactory.fromValue(value, valueTargetType, System.Windows.Markup.XamlNamespaces.empty, null);
            }));
        },
        initializeElement: function (element, context) {
            var $t;
            $t = Bridge.getEnumerator(this.elementsFactory, System.Windows.Markup.IElementFactory);
            while ($t.moveNext()) {
                var elementFactory = $t.getCurrent();
                element.add(elementFactory.System$Windows$Markup$IElementFactory$createElement(context));
            }
        }
    });

    Bridge.define("System.Windows.Markup.ElementDictionaryContentInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        statics: {
            createElementsFactories: function (dictionaryType, keyType, valueType, values) {
                var $t;
                if (Granular.Compatibility.Linq.Enumerable.any$1(Object, values, $asm.$.System.Windows.Markup.ElementDictionaryContentInitializer.f1)) {
                    throw new Granular.Exception("Can't add a value of type \"{0}\" to a dictionary, as it cannot have a key", [Bridge.Reflection.getTypeName(Bridge.getType(Granular.Compatibility.Linq.Enumerable.first$1(Object, values, $asm.$.System.Windows.Markup.ElementDictionaryContentInitializer.f1)))]);
                }

                var valuesElements = System.Linq.Enumerable.from(values).select(function(x) { return Bridge.cast(x, System.Windows.Markup.XamlElement); });

                var isValueProviderSupported = Granular.Compatibility.Linq.Enumerable.any(System.Windows.Markup.SupportsValueProviderAttribute, Granular.Compatibility.Linq.Enumerable.ofType(System.Windows.Markup.SupportsValueProviderAttribute, Bridge.Reflection.getAttributes(dictionaryType, null, true)));

                var list = new (System.Collections.Generic.List$1(System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory))();

                $t = Bridge.getEnumerator(valuesElements, System.Windows.Markup.XamlElement);
                while ($t.moveNext()) {
                    var contentChild = $t.getCurrent();
                    var isShared = Granular.Compatibility.Linq.Enumerable.all(System.Windows.Markup.XamlMember, contentChild.getDirectives(), $asm.$.System.Windows.Markup.ElementDictionaryContentInitializer.f2);

                    if (!isShared && !isValueProviderSupported) {
                        throw new Granular.Exception(System.String.format("Can't add a non shared value to \"{0}\" as it does not declare a \"SupportsValueProvider\" attribute", Bridge.Reflection.getTypeFullName(dictionaryType)));
                    }

                    var contentChildFactory = isValueProviderSupported ? new System.Windows.Markup.ElementDictionaryContentInitializer.DeferredValueFactory(contentChild, valueType, isShared) : System.Windows.Markup.ElementFactory.fromXamlElement(contentChild, valueType);

                    list.add(new System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory(keyType, contentChildFactory, contentChild, isValueProviderSupported));
                }

                return list;
            }
        },
        keyElementFactories: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (dictionaryType, keyType, valueType, values) {
            this.$initialize();
            this.keyElementFactories = System.Windows.Markup.ElementDictionaryContentInitializer.createElementsFactories(dictionaryType, keyType, valueType, values);
        },
        initializeElement: function (element, context) {
            var $t;
            $t = Bridge.getEnumerator(this.keyElementFactories, System.Windows.Markup.ElementDictionaryContentInitializer.KeyValueElementFactory);
            while ($t.moveNext()) {
                var keyElementFactory = $t.getCurrent();
                var pair = keyElementFactory.createElement(context);

                element.add(pair.key, pair.value);
            }
        }
    });

    Bridge.ns("System.Windows.Markup.ElementDictionaryContentInitializer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.ElementDictionaryContentInitializer, {
        f1: function (value) {
            return !(Bridge.is(value, System.Windows.Markup.XamlElement));
        },
        f2: function (directive) {
            return System.Windows.Markup.XamlName.op_Inequality(directive.getName(), System.Windows.Markup.XamlLanguage.sharedDirective) || System.Nullable.getValue(Bridge.cast(System.Windows.Markup.TypeConverter.convertValue(System.Windows.Markup.XamlMemberExtensions.getSingleValue(directive), Boolean, System.Windows.Markup.XamlNamespaces.empty, null), Boolean));
        }
    });

    Bridge.define("System.Windows.Markup.ElementDictionaryContentInitializer.DeferredKeyFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        provider: null,
        element: null,
        config: {
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (provider, element) {
            this.$initialize();
            this.provider = provider;
            this.element = element;
        },
        getElementType: function () {
            return Object;
        },
        createElement: function (context) {
            return this.provider.System$Windows$Markup$IDeferredValueKeyProvider$getValueKey(this.element);
        }
    });

    Bridge.define("System.Windows.Markup.ElementDictionaryContentInitializer.DeferredValueFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        element: null,
        targetType: null,
        isShared: false,
        elementFactory: null,
        config: {
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (element, targetType, isShared) {
            this.$initialize();
            this.element = element;
            this.targetType = targetType;
            this.isShared = isShared;
        },
        getElementType: function () {
            return System.Windows.Markup.ValueProvider;
        },
        createElement: function (context) {
            var value = null;

            return new System.Windows.Markup.ValueProvider(Bridge.fn.bind(this, function () {
                if (this.elementFactory == null) {
                    this.elementFactory = System.Windows.Markup.ElementFactory.fromXamlElement(this.element, this.targetType);
                }

                if (value == null || !this.isShared) {
                    value = this.elementFactory.System$Windows$Markup$IElementFactory$createElement(context);
                }

                return value;
            }));
        }
    });

    Bridge.define("System.Windows.Markup.ElementEventMemberInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        statics: {
            createEventHandler: function (eventHandlerType, source, eventHandlerName) {
                var methodInfo = Bridge.Reflection.getMembers(Bridge.getType(source), 8, Granular.Compatibility.BindingFlags.InstancePublicNonPublicFlattenHierarchy | 256, eventHandlerName);

                if (methodInfo == null) {
                    throw new Granular.Exception("Type \"{0}\" does not contain an event handler named \"{1}\"", [Bridge.Reflection.getTypeName(Bridge.getType(source)), eventHandlerName]);
                }

                return Bridge.Reflection.midel(methodInfo, source);
            }
        },
        eventAdapter: null,
        eventHandlerName: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (eventAdapter, eventHandlerName) {
            this.$initialize();
            this.eventAdapter = eventAdapter;
            this.eventHandlerName = eventHandlerName;
        },
        initializeElement: function (element, context) {
            this.eventAdapter.System$Windows$Markup$IEventAdapter$addHandler(element, System.Windows.Markup.ElementEventMemberInitializer.createEventHandler(this.eventAdapter.System$Windows$Markup$IEventAdapter$getHandlerType(), context.getRoot(), this.eventHandlerName));
        }
    });

    Bridge.define("System.Windows.Markup.ElementFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        statics: {
            fromValue: function (value, targetType, namespaces, sourceUri) {
                if (Bridge.is(value, System.Windows.Markup.XamlElement)) {
                    return System.Windows.Markup.ElementFactory.fromXamlElement(Bridge.cast(value, System.Windows.Markup.XamlElement), targetType);
                }

                return System.Windows.Markup.ElementFactory.fromElementFactory(new System.Windows.Markup.ConstantElementFactory(value), targetType, namespaces, sourceUri);
            },
            fromXamlElement: function (element, targetType) {
                var elementType = System.Windows.Markup.XamlElementExtensions.getElementType(element);

                if (Granular.Compatibility.Linq.Enumerable.any(Object, element.getValues()) && Granular.Extensions.StringExtensions.isNullOrEmpty(System.Windows.Markup.ContentPropertyAttribute.getPropertyName(elementType)) && !System.Windows.Markup.ElementCollectionContentInitailizer.isCollectionType(elementType)) {
                    return System.Windows.Markup.ElementFactory.fromElementFactory(System.Windows.Markup.ElementFactory.fromXamlElementContent(element), targetType, element.getNamespaces(), element.getSourceUri());
                }

                var elementInitializer = new System.Windows.Markup.ElementInitializer(element);
                var elementFactory = new System.Windows.Markup.ElementFactory(elementType, elementInitializer);

                return System.Windows.Markup.ElementFactory.fromElementFactory(elementFactory, targetType, element.getNamespaces(), element.getSourceUri());
            },
            fromXamlElementContent: function (element) {
                if (Granular.Compatibility.Linq.Enumerable.any(System.Windows.Markup.XamlMember, element.getMembers())) {
                    throw new Granular.Exception("Element \"{0}\" can't have members, as it's not a collection type and does not declare ContentProperty and can only be converted from its content", [element.getName()]);
                }

                if (Granular.Compatibility.Linq.Enumerable.count(Object, element.getValues()) > 1) {
                    throw new Granular.Exception("Element \"{0}\" can't have multiple children, as it's not a collection type and does not declare ContentProperty and can only be converted from its content", [element.getName()]);
                }

                return System.Windows.Markup.ElementFactory.fromValue(Granular.Compatibility.Linq.Enumerable.first(Object, element.getValues()), System.Windows.Markup.XamlElementExtensions.getElementType(element), element.getNamespaces(), element.getSourceUri());
            },
            fromElementFactory: function (elementFactory, targetType, namespaces, sourceUri) {
                if (Bridge.Reflection.isAssignableFrom(System.Windows.Markup.IMarkupExtension, elementFactory.System$Windows$Markup$IElementFactory$getElementType())) {
                    return new System.Windows.Markup.MarkupExtensionElementFactory(elementFactory);
                }

                if (targetType != null && !Bridge.Reflection.isAssignableFrom(targetType, elementFactory.System$Windows$Markup$IElementFactory$getElementType())) {
                    return new System.Windows.Markup.ConvertedElementFactory(elementFactory, targetType, namespaces, sourceUri);
                }

                return elementFactory;
            }
        },
        elementInitializer: null,
        config: {
            properties: {
                ElementType: null
            },
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "setElementType", "System$Windows$Markup$IElementFactory$setElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (elementType, elementInitializer) {
            this.$initialize();
            this.setElementType(elementType);
            this.elementInitializer = elementInitializer;
        },
        createElement: function (context) {
            var target = Bridge.createInstance(this.getElementType());
            this.elementInitializer.System$Windows$Markup$IElementInitializer$initializeElement(target, context);
            return target;
        }
    });

    Bridge.define("System.Windows.Markup.ElementInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        statics: {
            empty: null,
            config: {
                init: function () {
                    this.empty = new System.Windows.Markup.ElementInitializer.EmptyElementInitializer();
                }
            },
            createContentInitializer: function (element, elementType) {
                if (!Granular.Compatibility.Linq.Enumerable.any(Object, element.getValues())) {
                    return null;
                }

                var contentPropertyName = System.Windows.Markup.ContentPropertyAttribute.getPropertyName(elementType);
                if (!Granular.Extensions.StringExtensions.isNullOrEmpty(contentPropertyName)) {
                    return System.Windows.Markup.ElementMemberInitializer.create(elementType, contentPropertyName, element.getValues(), element.getNamespaces(), element.getSourceUri());
                }

                if (System.Windows.Markup.ElementCollectionContentInitailizer.isCollectionType(elementType)) {
                    return System.Windows.Markup.ElementCollectionContentInitailizer.create(element.getValues(), elementType);
                }

                throw new Granular.Exception("Cannot add content to element of type \"{0}\" as it's not a collection type and does not declare ContentProperty", [Bridge.Reflection.getTypeName(elementType)]);
            },
            createMemberInitializers: function (element, elementType) {
                var $t;
                var list = new (System.Collections.Generic.List$1(System.Windows.Markup.IElementInitializer))();

                var index = 0;
                $t = Bridge.getEnumerator(element.getMembers(), System.Windows.Markup.XamlMember);
                while ($t.moveNext()) {
                    var member = $t.getCurrent();
                    // markup extensions may contain members with an empty name, the name should be resolved from the member index
                    var memberName = member.getName().getIsEmpty() ? System.Windows.Markup.ElementInitializer.getParameterName(elementType, index) : member.getName();

                    list.add(System.Windows.Markup.ElementMemberInitializer.create(System.Windows.Markup.XamlNameExtensions.resolveContainingType(memberName, elementType), memberName.getMemberName(), member.getValues(), member.getNamespaces(), member.getSourceUri()));
                    index = (index + 1) | 0;
                }

                return list;
            },
            getParameterName: function (type, index) {
                var parameterAttribute = Granular.Compatibility.Linq.Enumerable.firstOrDefault$1(System.Windows.Markup.MarkupExtensionParameterAttribute, Granular.Compatibility.Linq.Enumerable.ofType(System.Windows.Markup.MarkupExtensionParameterAttribute, Bridge.Reflection.getAttributes(type, null, true)), function (attribute) {
                    return attribute.getIndex() === index;
                });

                if (parameterAttribute == null) {
                    throw new Granular.Exception("Type \"{0}\" does not declare MarkupExtensionParameter for index {1}", [Bridge.Reflection.getTypeName(type), index]);
                }

                return new System.Windows.Markup.XamlName(parameterAttribute.getName());
            },
            getNameDirectiveValue: function (element) {
                var nameDirective = Granular.Compatibility.Linq.Enumerable.firstOrDefault$1(System.Windows.Markup.XamlMember, element.getDirectives(), $asm.$.System.Windows.Markup.ElementInitializer.f1);
                return nameDirective != null ? Bridge.cast(System.Windows.Markup.XamlMemberExtensions.getSingleValue(nameDirective), String) : null;
            },
            getNameProperty: function (type) {
                var propertyName = System.Windows.Markup.RuntimeNamePropertyAttribute.getPropertyName(type);
                return !Granular.Extensions.StringExtensions.isNullOrWhiteSpace(propertyName) ? System.Windows.Markup.PropertyAdapter.createAdapter(type, propertyName) : null;
            },
            setFieldValue: function (target, fieldName, fieldValue) {
                var fieldInfo = Bridge.Reflection.getMembers(Bridge.getType(target), 4, Granular.Compatibility.BindingFlags.InstanceNonPublic | 256, fieldName);

                if (fieldInfo == null) {
                    return;
                }

                if (!Bridge.referenceEquals(fieldInfo.rt, Bridge.getType(fieldValue))) {
                    throw new Granular.Exception("Cannot assign \"{0}\" of type \"{1}\" to field \"{2}.{3}\" of type \"{4}\"", [fieldName, Bridge.Reflection.getTypeName(Bridge.getType(fieldValue)), Bridge.Reflection.getTypeName(Bridge.getType(target)), fieldName, fieldInfo.rt]);
                }

                Bridge.Reflection.fieldAccess(fieldInfo, target, fieldValue);
            }
        },
        elementType: null,
        namespaces: null,
        sourceUri: null,
        memberInitializers: null,
        contentInitializer: null,
        nameProperty: null,
        nameDirectiveValue: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (element) {
            this.$initialize();
            this.elementType = System.Windows.Markup.XamlElementExtensions.getElementType(element);
            this.namespaces = element.getNamespaces();
            this.sourceUri = element.getSourceUri();

            this.memberInitializers = System.Windows.Markup.ElementInitializer.createMemberInitializers(element, this.elementType);
            this.contentInitializer = System.Windows.Markup.ElementInitializer.createContentInitializer(element, this.elementType);

            this.nameDirectiveValue = System.Windows.Markup.ElementInitializer.getNameDirectiveValue(element);
            this.nameProperty = System.Windows.Markup.ElementInitializer.getNameProperty(System.Windows.Markup.XamlElementExtensions.getElementType(element));
        },
        initializeElement: function (element, context) {
            var $t, $t1;
            context = System.Windows.Markup.InitializeContextExtensions.createChildContext(context, element);

            if (!Bridge.Reflection.isAssignableFrom(this.elementType, Bridge.getType(element))) {
                throw new Granular.Exception("Can't initialize element of type \"{0}\" as it's not a subclass of \"{1}\"", [Bridge.Reflection.getTypeName(Bridge.getType(element)), Bridge.Reflection.getTypeName(this.elementType)]);
            }

            if (Bridge.is(element, System.Windows.Markup.ISupportInitialize)) {
                Bridge.cast(element, System.Windows.Markup.ISupportInitialize).System$Windows$Markup$ISupportInitialize$beginInit();
            }

            if (Bridge.is(element, System.Windows.Markup.IUriContext)) {
                Bridge.cast(element, System.Windows.Markup.IUriContext).System$Windows$Markup$IUriContext$setBaseUri(this.sourceUri);
            }

            if (Bridge.referenceEquals(element, context.getRoot()) && Bridge.is(element, System.Windows.DependencyObject)) {
                System.Windows.NameScope.setNameScope(Bridge.cast(element, System.Windows.DependencyObject), context.getNameScope());
            }

            if (Bridge.is(element, System.Windows.FrameworkElement)) {
                Bridge.cast(element, System.Windows.FrameworkElement).setTemplatedParent(context.getTemplatedParent());
            }

            $t = Bridge.getEnumerator(this.memberInitializers, System.Windows.Markup.IElementInitializer);
            while ($t.moveNext()) {
                var memberInitializer = $t.getCurrent();
                memberInitializer.System$Windows$Markup$IElementInitializer$initializeElement(element, context);
            }

            var name = Granular.Extensions.StringExtensions.defaultIfNullOrEmpty(this.nameDirectiveValue, this.nameProperty != null ? Bridge.cast(this.nameProperty.System$Windows$Markup$IPropertyAdapter$getValue(element), String) : "");

            if (!Granular.Extensions.StringExtensions.isNullOrEmpty(this.nameDirectiveValue) && this.nameProperty != null) {
                // name property exists, but the name directive was used, so update the property
                this.nameProperty.System$Windows$Markup$IPropertyAdapter$setValue(element, name, context.getValueSource());
            }

            if (!Granular.Extensions.StringExtensions.isNullOrEmpty(name)) {
                context.getNameScope().System$Windows$INameScope$registerName(name, element);
            }

            if (this.contentInitializer != null) {
                this.contentInitializer.System$Windows$Markup$IElementInitializer$initializeElement(element, context);
            }

            if (Bridge.referenceEquals(element, context.getRoot())) {
                $t1 = Bridge.getEnumerator(context.getNameScope(), System.Collections.Generic.KeyValuePair$2(String,Object));
                while ($t1.moveNext()) {
                    var pair = $t1.getCurrent();
                    System.Windows.Markup.ElementInitializer.setFieldValue(element, pair.key, pair.value);
                }
            }

            if (Bridge.is(element, System.Windows.Markup.ISupportInitialize)) {
                Bridge.cast(element, System.Windows.Markup.ISupportInitialize).System$Windows$Markup$ISupportInitialize$endInit();
            }
        }
    });

    Bridge.ns("System.Windows.Markup.ElementInitializer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.ElementInitializer, {
        f1: function (directive) {
            return System.Windows.Markup.XamlName.op_Equality(directive.getName(), System.Windows.Markup.XamlLanguage.nameDirective);
        }
    });

    Bridge.define("System.Windows.Markup.ElementInitializer.EmptyElementInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        initializeElement: function (element, context) {
            //
        }
    });

    Bridge.define("System.Windows.Markup.ElementPropertyMemberInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        statics: {
            create: function (propertyAdapter, values, namespaces, sourceUri) {
                if (!Granular.Compatibility.Linq.Enumerable.any(Object, values)) {
                    return System.Windows.Markup.ElementInitializer.empty;
                }

                if (Granular.Compatibility.Linq.Enumerable.count(Object, values) === 1) {
                    var value = Granular.Compatibility.Linq.Enumerable.first(Object, values);

                    if (Bridge.referenceEquals(propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType(), System.Windows.IFrameworkElementFactory)) {
                        return new System.Windows.Markup.FrameworkElementFactoryInitializer(propertyAdapter, System.Windows.Markup.ElementFactory.fromValue(value, null, namespaces, sourceUri));
                    }

                    var valueType = Bridge.is(value, System.Windows.Markup.XamlElement) ? System.Windows.Markup.XamlElementExtensions.getElementType(Bridge.cast(value, System.Windows.Markup.XamlElement)) : Bridge.getType(value);

                    var typeConverter = { };
                    if (Bridge.Reflection.isAssignableFrom(propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType(), valueType) || Bridge.Reflection.isAssignableFrom(System.Windows.Markup.IMarkupExtension, valueType) || System.Windows.Markup.TypeConverter.tryGetTypeConverter(valueType, propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType(), typeConverter)) {
                        var contentFactory = System.Windows.Markup.ElementFactory.fromValue(value, propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType(), namespaces, sourceUri);
                        return new System.Windows.Markup.ElementPropertyMemberInitializer(propertyAdapter, contentFactory);
                    }
                }

                if (System.Windows.Markup.ElementCollectionContentInitailizer.isCollectionType(propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType())) {
                    var propertyContentInitializer = System.Windows.Markup.ElementCollectionContentInitailizer.create(values, propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType());

                    // wrap with a factory that creates the collection (when it's null) before adding its values
                    return new System.Windows.Markup.ElementPropertyMemberInitializer.ElementPropertyMemberFactoryInitializer(propertyAdapter, propertyContentInitializer);
                }

                if (Granular.Compatibility.Linq.Enumerable.count(Object, values) === 1) {
                    var value1 = Granular.Compatibility.Linq.Enumerable.first(Object, values);
                    throw new Granular.Exception("Cannot assign value of type \"{0}\" to member of type \"{1}\"", [Bridge.is(value1, System.Windows.Markup.XamlElement) ? System.Windows.Markup.XamlElementExtensions.getElementType(Bridge.cast(value1, System.Windows.Markup.XamlElement)) : Bridge.getType(value1), Bridge.Reflection.getTypeName(propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType())]);
                }

                throw new Granular.Exception("Member of type \"{0}\" cannot have more than one child", [Bridge.Reflection.getTypeName(propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType())]);
            }
        },
        propertyAdapter: null,
        propertyValueFactory: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (propertyAdapter, propertyValueFactory) {
            this.$initialize();
            this.propertyAdapter = propertyAdapter;
            this.propertyValueFactory = propertyValueFactory;
        },
        initializeElement: function (element, context) {
            this.propertyAdapter.System$Windows$Markup$IPropertyAdapter$setValue(element, this.propertyValueFactory.System$Windows$Markup$IElementFactory$createElement(context), context.getValueSource());
        }
    });

    Bridge.define("System.Windows.Markup.ElementPropertyMemberInitializer.ElementPropertyMemberFactoryInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        propertyAdapter: null,
        propertyValueInitializer: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (propertyAdapter, propertyContentInitializer) {
            this.$initialize();
            this.propertyAdapter = propertyAdapter;
            this.propertyValueInitializer = propertyContentInitializer;
        },
        initializeElement: function (element, context) {
            var contentTarget = this.propertyAdapter.System$Windows$Markup$IPropertyAdapter$getValue(element);

            if (contentTarget == null) {
                contentTarget = Bridge.createInstance(this.propertyAdapter.System$Windows$Markup$IPropertyAdapter$getPropertyType());
                this.propertyAdapter.System$Windows$Markup$IPropertyAdapter$setValue(element, contentTarget, context.getValueSource());
            }

            this.propertyValueInitializer.System$Windows$Markup$IElementInitializer$initializeElement(contentTarget, context);
        }
    });

    Bridge.define("System.Windows.Markup.EnumTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        type: null,
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function (type) {
            this.$initialize();
            this.type = type;
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Enum.parse(this.type, value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Markup.EventPropertyAdapter", {
        inherits: [System.Windows.Markup.IEventAdapter],
        eventProperty: null,
        config: {
            alias: [
            "getHandlerType", "System$Windows$Markup$IEventAdapter$getHandlerType",
            "addHandler", "System$Windows$Markup$IEventAdapter$addHandler"
            ]
        },
        ctor: function (eventProperty) {
            this.$initialize();
            this.eventProperty = eventProperty;
        },
        getHandlerType: function () {
            return this.eventProperty.rt;
        },
        addHandler: function (target, handler) {
            Bridge.Reflection.midel(this.eventProperty.s, target).apply(null, System.Array.init(0, null, Object).concat(handler));
        }
    });

    Bridge.define("System.Windows.Markup.FrameworkElementFactoryInitializer", {
        inherits: [System.Windows.Markup.IElementInitializer],
        propertyAdapter: null,
        elementFactory: null,
        config: {
            alias: [
            "initializeElement", "System$Windows$Markup$IElementInitializer$initializeElement"
            ]
        },
        ctor: function (propertyAdapter, elementFactory) {
            this.$initialize();
            this.propertyAdapter = propertyAdapter;
            this.elementFactory = elementFactory;
        },
        initializeElement: function (element, context) {
            this.propertyAdapter.System$Windows$Markup$IPropertyAdapter$setValue(element, new System.Windows.FrameworkElementFactory(this.elementFactory, context), context.getValueSource());
        }
    });

    Bridge.define("System.Windows.Markup.Int32TypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.Int32TypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Int32.parse(value.toString());
        }
    });

    Bridge.define("System.Windows.Markup.MarkupExtensionElementFactory", {
        inherits: [System.Windows.Markup.IElementFactory],
        valueFactory: null,
        config: {
            alias: [
            "getElementType", "System$Windows$Markup$IElementFactory$getElementType",
            "createElement", "System$Windows$Markup$IElementFactory$createElement"
            ]
        },
        ctor: function (valueFactory) {
            this.$initialize();
            this.valueFactory = valueFactory;
        },
        getElementType: function () {
            return Object;
        },
        createElement: function (context) {
            return Bridge.cast(this.valueFactory.System$Windows$Markup$IElementFactory$createElement(context), System.Windows.Markup.IMarkupExtension).System$Windows$Markup$IMarkupExtension$provideValue(context);
        }
    });

    Bridge.define("System.Windows.Markup.MarkupExtensionParameterAttribute", {
        inherits: [System.Windows.Markup.PropertyAttribute],
        config: {
            properties: {
                Index: 0
            }
        },
        ctor: function (name, index) {
            if (index === void 0) { index = 0; }

            this.$initialize();
            System.Windows.Markup.PropertyAttribute.ctor.call(this, name);
            this.setIndex(index);
        }
    });

    Bridge.define("System.Windows.Markup.ObjectTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.ObjectTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return value;
        }
    });

    Bridge.define("System.Windows.Markup.RoutedEventAdapter", {
        inherits: [System.Windows.Markup.IEventAdapter],
        routedEvent: null,
        config: {
            alias: [
            "getHandlerType", "System$Windows$Markup$IEventAdapter$getHandlerType",
            "addHandler", "System$Windows$Markup$IEventAdapter$addHandler"
            ]
        },
        ctor: function (routedEvent) {
            this.$initialize();
            this.routedEvent = routedEvent;
        },
        getHandlerType: function () {
            return this.routedEvent.getHandlerType();
        },
        addHandler: function (target, handler) {
            Bridge.cast(target, System.Windows.UIElement).addHandler(this.routedEvent, handler);
        }
    });

    Bridge.define("System.Windows.Markup.RuntimeNamePropertyAttribute", {
        inherits: [System.Windows.Markup.PropertyAttribute],
        statics: {
            propertyNameCache: null,
            config: {
                init: function () {
                    this.propertyNameCache = Granular.Collections.CacheDictionary$2(Function,String).createUsingStringKeys($asm.$.System.Windows.Markup.RuntimeNamePropertyAttribute.f1, $asm.$.System.Windows.Markup.RuntimeNamePropertyAttribute.f2);
                }
            },
            getPropertyName: function (type) {
                return System.Windows.Markup.RuntimeNamePropertyAttribute.propertyNameCache.getValue(type);
            }
        },
        ctor: function (name) {
            this.$initialize();
            System.Windows.Markup.PropertyAttribute.ctor.call(this, name);
            //
        }
    });

    Bridge.ns("System.Windows.Markup.RuntimeNamePropertyAttribute", $asm.$);

    Bridge.apply($asm.$.System.Windows.Markup.RuntimeNamePropertyAttribute, {
        f1: function (type) {
            return System.Windows.Markup.PropertyAttribute.resolvePropertyName(System.Windows.Markup.RuntimeNamePropertyAttribute, type);
        },
        f2: function (type) {
            return Bridge.Reflection.getTypeFullName(type);
        }
    });

    Bridge.define("System.Windows.Markup.StringTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.StringTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return value.toString();
        }
    });

    Bridge.define("System.Windows.Markup.TimeSpanTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.TimeSpanTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var timeSpan = { };
            if (Granular.Compatibility.TimeSpan.tryParse(value.toString(), timeSpan)) {
                return timeSpan.v;
            }

            throw new Granular.Exception("Can't parse TimeSpan value \"{0}\"", [value]);
        }
    });

    Bridge.define("System.Windows.Markup.TypeConverter.EmptyTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return value;
        }
    });

    Bridge.define("System.Windows.Markup.TypeTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.TypeTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Markup.TypeParser.parseType(value.toString().trim(), namespaces);
        }
    });

    Bridge.define("System.Windows.Markup.UriTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Markup.UriTypeConverter();
                }
            }
        },
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return Granular.Compatibility.Uri.createRelativeOrAbsoluteUri(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Markup.ValueProvider", {
        inherits: [System.Windows.Markup.IValueProvider],
        provideValue$1: null,
        config: {
            alias: [
            "provideValue", "System$Windows$Markup$IValueProvider$provideValue"
            ]
        },
        ctor: function (provideValue) {
            this.$initialize();
            this.provideValue$1 = provideValue;
        },
        provideValue: function () {
            return this.provideValue$1();
        }
    });

    Bridge.define("System.Windows.Markup.XamlTypes.NullProvider", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        config: {
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return null;
        }
    });

    Bridge.define("System.Windows.Markup.XamlTypes.TypeProvider", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        config: {
            properties: {
                Type: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return this.getType();
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimatableRootClock", {
        inherits: [System.Windows.Media.Animation.IRootClock],
        rootClock: null,
        clocks: null,
        isConnected: false,
        config: {
            alias: [
            "getTime", "System$Windows$Media$Animation$IRootClock$getTime",
            "addClock", "System$Windows$Media$Animation$IRootClock$addClock",
            "removeClock", "System$Windows$Media$Animation$IRootClock$removeClock"
            ]
        },
        ctor: function (rootClock, isConnected) {
            this.$initialize();
            this.rootClock = rootClock;
            this.isConnected = isConnected;

            this.clocks = new (System.Collections.Generic.List$1(System.Windows.Media.Animation.IClock))();
        },
        getTime: function () {
            return this.rootClock.System$Windows$Media$Animation$IRootClock$getTime();
        },
        getIsConnected: function () {
            return this.isConnected;
        },
        setIsConnected: function (value) {
            var $t, $t1;
            if (this.isConnected === value) {
                return;
            }

            this.isConnected = value;

            if (this.isConnected) {
                $t = Bridge.getEnumerator(this.clocks);
                while ($t.moveNext()) {
                    var clock = $t.getCurrent();
                    this.rootClock.System$Windows$Media$Animation$IRootClock$addClock(clock);
                }
            } else {
                $t1 = Bridge.getEnumerator(this.clocks);
                while ($t1.moveNext()) {
                    var clock1 = $t1.getCurrent();
                    this.rootClock.System$Windows$Media$Animation$IRootClock$removeClock(clock1);
                }

                this.cleanClocks();
            }
        },
        addClock: function (clock) {
            if (this.clocks.contains(clock)) {
                return;
            }

            this.clocks.add(clock);

            if (this.getIsConnected()) {
                this.rootClock.System$Windows$Media$Animation$IRootClock$addClock(clock);
            }
        },
        removeClock: function (clock) {
            this.clocks.remove(clock);

            if (this.getIsConnected()) {
                this.rootClock.System$Windows$Media$Animation$IRootClock$removeClock(clock);
            }
        },
        cleanClocks: function () {
            var time = this.getTime();

            var i = 0;
            while (i < this.clocks.getCount()) {
                if (System.TimeSpan.lt(this.clocks.getItem(i).System$Windows$Media$Animation$IClock$getLastTick(), time)) {
                    this.clocks.removeAt(i);
                } else {
                    i = (i + 1) | 0;
                }
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        config: {
            properties: {
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (duration) {
            this.$initialize();
            this.setDuration(duration);
        },
        getFirstTick: function () {
            return System.TimeSpan.zero;
        },
        getLastTick: function () {
            return this.getDuration();
        },
        tick: function (time) {
            var previousTick;
            var nextTick;
            var progressState = new System.Windows.Media.Animation.ClockProgressState();
            var progress;

            if (System.TimeSpan.lt(time, System.TimeSpan.zero)) {
                previousTick = Granular.Compatibility.TimeSpan.minValue;
                nextTick = System.TimeSpan.zero;

                progress = 0;
                progressState = System.Windows.Media.Animation.ClockProgressState.BeforeStarted;
            } else if (System.TimeSpan.lt(time, this.getDuration())) {
                previousTick = time;
                nextTick = time;

                progress = Granular.Extensions.TimeSpanExtensions.divide(time, this.getDuration());
                progressState = System.Windows.Media.Animation.ClockProgressState.Active;
            } else {
                previousTick = this.getDuration();
                nextTick = Granular.Compatibility.TimeSpan.maxValue;

                progress = 1;
                progressState = System.Windows.Media.Animation.ClockProgressState.AfterEnded;
            }

            return new System.Windows.Media.Animation.ClockState(progressState, progress, 0, previousTick, nextTick);
        }
    });

    Bridge.define("System.Windows.Media.Animation.TimelineClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        statics: {
            createClock: function (baseClock, timeline) {
                if (timeline.getDuration().getHasTimeSpan()) {
                    baseClock = new System.Windows.Media.Animation.DurationClock(baseClock, timeline.getDuration().getTimeSpan());
                }

                if (timeline.getAutoReverse()) {
                    baseClock = new System.Windows.Media.Animation.ReverseClock(baseClock);
                }

                if (!Bridge.referenceEquals(timeline.getRepeatBehavior(), System.Windows.Media.Animation.RepeatBehavior.oneTime)) {
                    var iterationsCount = Granular.Extensions.DoubleExtensions.defaultIfNaN(timeline.getRepeatBehavior().getCount(), timeline.getRepeatBehavior().getDuration().getTicks() / System.Int64.toNumber(baseClock.System$Windows$Media$Animation$IClock$getDuration().getTicks()));
                    baseClock = new System.Windows.Media.Animation.RepeatClock(baseClock, iterationsCount);
                }

                if (System.TimeSpan.neq(timeline.getBeginTime(), System.TimeSpan.zero)) {
                    baseClock = new System.Windows.Media.Animation.OffsetClock(baseClock, timeline.getBeginTime());
                }

                return baseClock;
            }
        },
        clock: null,
        rootClock: null,
        currentFillBehavior: 0,
        config: {
            events: {
                Invalidated: null
            },
            properties: {
                Timeline: null,
                CurrentState: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.beginTime = new System.TimeSpan();
                this.pauseOffset = new System.TimeSpan();
            }
        },
        ctor: function (baseClock, timeline) {
            this.$initialize();
            this.clock = System.Windows.Media.Animation.TimelineClock.createClock(baseClock, timeline);
            this.setTimeline(timeline);
            this.setCurrentState(System.Windows.Media.Animation.ClockState.empty);
        },
        getFirstTick: function () {
            return System.TimeSpan.add(this.beginTime, this.clock.System$Windows$Media$Animation$IClock$getFirstTick());
        },
        getLastTick: function () {
            return System.TimeSpan.eq(this.clock.System$Windows$Media$Animation$IClock$getLastTick(), Granular.Compatibility.TimeSpan.maxValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.add(this.beginTime, this.clock.System$Windows$Media$Animation$IClock$getLastTick());
        },
        getDuration: function () {
            return this.clock.System$Windows$Media$Animation$IClock$getDuration();
        },
        getIsFilling: function () {
            return this.getCurrentState().getProgressState() === System.Windows.Media.Animation.ClockProgressState.AfterEnded && this.currentFillBehavior === System.Windows.Media.Animation.FillBehavior.HoldEnd;
        },
        tick: function (time) {
            var state = this.clock.System$Windows$Media$Animation$IClock$tick(System.TimeSpan.sub(time, this.beginTime));

            var previousTick = System.TimeSpan.eq(state.getPreviousTick(), Granular.Compatibility.TimeSpan.minValue) ? Granular.Compatibility.TimeSpan.minValue : System.TimeSpan.add(this.beginTime, state.getPreviousTick());
            var nextTick = System.TimeSpan.eq(state.getNextTick(), Granular.Compatibility.TimeSpan.maxValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.add(this.beginTime, state.getNextTick());

            this.setCurrentState(new System.Windows.Media.Animation.ClockState(state.getProgressState(), state.getProgress(), state.getIteration(), previousTick, nextTick));

            Granular.Extensions.EventHandlerExtensions.raise$2(this.Invalidated, this);

            return this.getCurrentState();
        },
        begin: function (rootClock) {
            this.rootClock = rootClock;
            this.verifyRootClock();
            this.beginTime = rootClock.System$Windows$Media$Animation$IRootClock$getTime();
            this.currentFillBehavior = this.getTimeline().getFillBehavior();
            rootClock.System$Windows$Media$Animation$IRootClock$addClock(this);
            this.tick(rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        pause: function () {
            this.verifyRootClock();
            this.pauseOffset = System.TimeSpan.sub(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime(), this.beginTime);
            this.rootClock.System$Windows$Media$Animation$IRootClock$removeClock(this);
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        remove: function () {
            this.verifyRootClock();
            this.rootClock.System$Windows$Media$Animation$IRootClock$removeClock(this);
        },
        resume: function () {
            this.verifyRootClock();
            this.beginTime = System.TimeSpan.sub(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime(), this.pauseOffset);
            this.rootClock.System$Windows$Media$Animation$IRootClock$addClock(this);
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        seek: function (time) {
            this.verifyRootClock();
            this.beginTime = System.TimeSpan.sub(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime(), time);
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        seekOffset: function (offset) {
            this.verifyRootClock();
            this.beginTime = System.TimeSpan.add(this.beginTime, offset);
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        skipToFill: function () {
            this.verifyRootClock();
            this.beginTime = System.TimeSpan.sub(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime(), this.clock.System$Windows$Media$Animation$IClock$getDuration());
            this.currentFillBehavior = System.Windows.Media.Animation.FillBehavior.HoldEnd;
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        stop: function () {
            this.verifyRootClock();
            this.beginTime = System.TimeSpan.eq(this.clock.System$Windows$Media$Animation$IClock$getDuration(), Granular.Compatibility.TimeSpan.maxValue) ? System.TimeSpan.zero : System.TimeSpan.sub(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime(), this.clock.System$Windows$Media$Animation$IClock$getDuration());
            this.currentFillBehavior = System.Windows.Media.Animation.FillBehavior.Stop;
            this.rootClock.System$Windows$Media$Animation$IRootClock$removeClock(this);
            this.tick(this.rootClock.System$Windows$Media$Animation$IRootClock$getTime());
        },
        verifyRootClock: function () {
            if (this.rootClock == null) {
                throw new Granular.Exception("RootClock was not provided");
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.ColorAnimationOperations", {
        inherits: [System.Windows.Media.Animation.IAnimationOperations$1(System.Windows.Media.Color)],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.Animation.ColorAnimationOperations();
                }
            }
        },
        config: {
            alias: [
            "getZero", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Media$Color$getZero",
            "add", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Media$Color$add",
            "subtract", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Media$Color$subtract",
            "scale", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Media$Color$scale",
            "interpolate", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Media$Color$interpolate"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        getZero: function () {
            return System.Windows.Media.Color.fromUInt32(0);
        },
        add: function (value1, value2) {
            return System.Windows.Media.Color.op_Addition(value1, value2);
        },
        subtract: function (value1, value2) {
            return System.Windows.Media.Color.op_Subtraction(value1, value2);
        },
        scale: function (value, factor) {
            return System.Windows.Media.Color.op_Multiply(factor, value);
        },
        interpolate: function (value1, value2, progress) {
            return System.Windows.Media.Color.op_Addition(System.Windows.Media.Color.op_Multiply((1 - progress), value1), System.Windows.Media.Color.op_Multiply(progress, value2));
        }
    });

    Bridge.define("System.Windows.Media.Animation.DoubleAnimationOperations", {
        inherits: [System.Windows.Media.Animation.IAnimationOperations$1(System.Nullable$1(System.Double))],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.Animation.DoubleAnimationOperations();
                }
            }
        },
        config: {
            alias: [
            "getZero", "System$Windows$Media$Animation$IAnimationOperations$1$System$Nullable$1$System$Double$getZero",
            "add", "System$Windows$Media$Animation$IAnimationOperations$1$System$Nullable$1$System$Double$add",
            "subtract", "System$Windows$Media$Animation$IAnimationOperations$1$System$Nullable$1$System$Double$subtract",
            "scale", "System$Windows$Media$Animation$IAnimationOperations$1$System$Nullable$1$System$Double$scale",
            "interpolate", "System$Windows$Media$Animation$IAnimationOperations$1$System$Nullable$1$System$Double$interpolate"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        getZero: function () {
            return 0;
        },
        add: function (value1, value2) {
            return System.Nullable.getValue(value1) + System.Nullable.getValue(value2);
        },
        subtract: function (value1, value2) {
            return System.Nullable.getValue(value1) - System.Nullable.getValue(value2);
        },
        scale: function (value, factor) {
            return factor * System.Nullable.getValue(value);
        },
        interpolate: function (value1, value2, progress) {
            return System.Nullable.add(System.Nullable.mul((1 - progress), value1), System.Nullable.mul(progress, value2));
        }
    });

    Bridge.define("System.Windows.Media.Animation.DurationClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clock: null,
        config: {
            properties: {
                FirstTick: null,
                LastTick: null,
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "setFirstTick", "System$Windows$Media$Animation$IClock$setFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "setLastTick", "System$Windows$Media$Animation$IClock$setLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.FirstTick = new System.TimeSpan();
                this.LastTick = new System.TimeSpan();
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (clock, duration) {
            this.$initialize();
            this.clock = clock;
            this.setDuration(duration);

            this.setTickBounds();
        },
        setTickBounds: function () {
            if (System.TimeSpan.lt(this.getDuration(), this.clock.System$Windows$Media$Animation$IClock$getFirstTick())) {
                this.setFirstTick(System.TimeSpan.zero);
                this.setLastTick(this.getDuration());
            } else {
                this.setFirstTick(this.clock.System$Windows$Media$Animation$IClock$getFirstTick());
                this.setLastTick(Granular.Extensions.TimeSpanExtensions.min(this.getDuration(), this.clock.System$Windows$Media$Animation$IClock$getLastTick()));
            }
        },
        tick: function (time) {
            if (System.TimeSpan.lt(time, System.TimeSpan.zero)) {
                var state = this.clock.System$Windows$Media$Animation$IClock$tick(System.TimeSpan.zero);

                var previousTick = Granular.Compatibility.TimeSpan.minValue;
                var nextTick = System.TimeSpan.zero;

                return new System.Windows.Media.Animation.ClockState(System.Windows.Media.Animation.ClockProgressState.BeforeStarted, state.getProgress(), state.getIteration(), previousTick, nextTick);
            }

            if (System.TimeSpan.gte(time, this.getDuration())) {
                var state1 = this.clock.System$Windows$Media$Animation$IClock$tick(this.getDuration());

                var previousTick1 = this.getDuration();
                var nextTick1 = Granular.Compatibility.TimeSpan.maxValue;

                return new System.Windows.Media.Animation.ClockState(System.Windows.Media.Animation.ClockProgressState.AfterEnded, state1.getProgress(), state1.getIteration(), previousTick1, nextTick1);
            }

            return this.clock.System$Windows$Media$Animation$IClock$tick(time);
        }
    });

    Bridge.define("System.Windows.Media.Animation.KeyTimeTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Media.Animation.KeyTime.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Media.Animation.OffsetClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clock: null,
        config: {
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.offset = new System.TimeSpan();
            }
        },
        ctor: function (clock, offset) {
            this.$initialize();
            this.clock = clock;
            this.offset = offset;
        },
        getFirstTick: function () {
            return System.TimeSpan.add(this.offset, this.clock.System$Windows$Media$Animation$IClock$getFirstTick());
        },
        getLastTick: function () {
            return System.TimeSpan.eq(this.clock.System$Windows$Media$Animation$IClock$getLastTick(), Granular.Compatibility.TimeSpan.maxValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.add(this.offset, this.clock.System$Windows$Media$Animation$IClock$getLastTick());
        },
        getDuration: function () {
            return System.TimeSpan.eq(this.clock.System$Windows$Media$Animation$IClock$getDuration(), Granular.Compatibility.TimeSpan.maxValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.add(this.offset, this.clock.System$Windows$Media$Animation$IClock$getDuration());
        },
        tick: function (time) {
            var state = this.clock.System$Windows$Media$Animation$IClock$tick(System.TimeSpan.sub(time, this.offset));

            var previousTick = System.TimeSpan.eq(state.getPreviousTick(), Granular.Compatibility.TimeSpan.minValue) ? Granular.Compatibility.TimeSpan.minValue : System.TimeSpan.add(this.offset, state.getPreviousTick());
            var nextTick = System.TimeSpan.eq(state.getNextTick(), Granular.Compatibility.TimeSpan.maxValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.add(this.offset, state.getNextTick());

            return new System.Windows.Media.Animation.ClockState(state.getProgressState(), state.getProgress(), state.getIteration(), previousTick, nextTick);
        }
    });

    Bridge.define("System.Windows.Media.Animation.ParallelClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clocks: null,
        config: {
            properties: {
                FirstTick: null,
                LastTick: null,
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "setFirstTick", "System$Windows$Media$Animation$IClock$setFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "setLastTick", "System$Windows$Media$Animation$IClock$setLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.FirstTick = new System.TimeSpan();
                this.LastTick = new System.TimeSpan();
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (clocks) {
            this.$initialize();
            this.clocks = clocks;

            this.setFirstTick(System.Linq.Enumerable.from(System.Linq.Enumerable.from(clocks).select($asm.$.System.Windows.Media.Animation.ParallelClock.f1).defaultIfEmpty(System.TimeSpan.zero)).min());
            this.setLastTick(System.Linq.Enumerable.from(System.Linq.Enumerable.from(clocks).select($asm.$.System.Windows.Media.Animation.ParallelClock.f2).defaultIfEmpty(System.TimeSpan.zero)).max());
            this.setDuration(System.Linq.Enumerable.from(System.Linq.Enumerable.from(clocks).select($asm.$.System.Windows.Media.Animation.ParallelClock.f3).defaultIfEmpty(System.TimeSpan.zero)).max());
        },
        tick: function (time) {
            var states = System.Linq.Enumerable.from(this.clocks).select(function (clock) {
                    return clock.System$Windows$Media$Animation$IClock$tick(time);
                }).toArray();

            var nextTick;
            var previousTick;
            var progressState = new System.Windows.Media.Animation.ClockProgressState();

            nextTick = System.Linq.Enumerable.from(System.Linq.Enumerable.from(states).select($asm.$.System.Windows.Media.Animation.ParallelClock.f4).defaultIfEmpty(System.TimeSpan.zero)).min();
            previousTick = System.Linq.Enumerable.from(System.Linq.Enumerable.from(states).select($asm.$.System.Windows.Media.Animation.ParallelClock.f5).defaultIfEmpty(System.TimeSpan.zero)).max();

            if (System.Linq.Enumerable.from(states).all($asm.$.System.Windows.Media.Animation.ParallelClock.f6)) {
                progressState = System.Windows.Media.Animation.ClockProgressState.BeforeStarted;
            } else if (System.Linq.Enumerable.from(states).all($asm.$.System.Windows.Media.Animation.ParallelClock.f7)) {
                progressState = System.Windows.Media.Animation.ClockProgressState.AfterEnded;
            } else {
                progressState = System.Windows.Media.Animation.ClockProgressState.Active;
            }

            return new System.Windows.Media.Animation.ClockState(progressState, 0, 0, previousTick, nextTick);
        }
    });

    Bridge.ns("System.Windows.Media.Animation.ParallelClock", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.ParallelClock, {
        f1: function (clock) {
            return clock.System$Windows$Media$Animation$IClock$getFirstTick();
        },
        f2: function (clock) {
            return clock.System$Windows$Media$Animation$IClock$getLastTick();
        },
        f3: function (clock) {
            return clock.System$Windows$Media$Animation$IClock$getDuration();
        },
        f4: function (state) {
            return state.getNextTick();
        },
        f5: function (state) {
            return state.getPreviousTick();
        },
        f6: function (state) {
            return state.getProgressState() === System.Windows.Media.Animation.ClockProgressState.BeforeStarted;
        },
        f7: function (state) {
            return state.getProgressState() === System.Windows.Media.Animation.ClockProgressState.AfterEnded;
        }
    });

    Bridge.define("System.Windows.Media.Animation.RectAnimationOperations", {
        inherits: [System.Windows.Media.Animation.IAnimationOperations$1(System.Windows.Rect)],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.Animation.RectAnimationOperations();
                }
            }
        },
        config: {
            alias: [
            "getZero", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Rect$getZero",
            "add", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Rect$add",
            "subtract", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Rect$subtract",
            "scale", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Rect$scale",
            "interpolate", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Rect$interpolate"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        getZero: function () {
            return System.Windows.Rect.zero;
        },
        add: function (value1, value2) {
            return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Addition(value1.getLocation(), value2.getLocation()), System.Windows.Size.op_Addition(value1.getSize(), value2.getSize()));
        },
        subtract: function (value1, value2) {
            return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Subtraction(value1.getLocation(), value2.getLocation()), System.Windows.Size.op_Subtraction(value1.getSize(), value2.getSize()));
        },
        scale: function (value, factor) {
            return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Multiply(factor, value.getLocation()), System.Windows.Size.op_Multiply(factor, value.getSize()));
        },
        interpolate: function (value1, value2, progress) {
            return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Addition(System.Windows.Point.op_Multiply((1 - progress), value1.getLocation()), System.Windows.Point.op_Multiply(progress, value2.getLocation())), System.Windows.Size.op_Addition(System.Windows.Size.op_Multiply((1 - progress), value1.getSize()), System.Windows.Size.op_Multiply(progress, value2.getSize())));
        }
    });

    Bridge.define("System.Windows.Media.Animation.RepeatBehaviorTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Media.Animation.RepeatBehavior.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Media.Animation.RepeatClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clock: null,
        iterationsCount: 0,
        config: {
            properties: {
                FirstTick: null,
                LastTick: null,
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "setFirstTick", "System$Windows$Media$Animation$IClock$setFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "setLastTick", "System$Windows$Media$Animation$IClock$setLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.iterationDuration = new System.TimeSpan();
                this.FirstTick = new System.TimeSpan();
                this.LastTick = new System.TimeSpan();
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (clock, iterationsCount) {
            this.$initialize();
            this.clock = clock;
            this.iterationDuration = clock.System$Windows$Media$Animation$IClock$getDuration();
            this.iterationsCount = iterationsCount;
            this.setDuration(Granular.Compatibility.Double.isInfinity(iterationsCount) ? Granular.Compatibility.TimeSpan.maxValue : Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, iterationsCount));

            if (iterationsCount <= 0) {
                throw new Granular.Exception("Invalid iterations count \"{0}\"", [iterationsCount]);
            }

            if (System.TimeSpan.lte(this.iterationDuration, System.TimeSpan.zero)) {
                throw new Granular.Exception("Invalid iteration duration \"{0}\"", [this.iterationDuration]);
            }

            this.setTickBounds();
        },
        setTickBounds: function () {
            if (Granular.Compatibility.Double.isInfinity(this.iterationsCount)) {
                this.setFirstTick(System.TimeSpan.zero);
                this.setLastTick(Granular.Compatibility.TimeSpan.maxValue);
                return;
            }

            var totalIterationsTime = Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, this.iterationsCount);

            if (System.TimeSpan.lt(totalIterationsTime, this.clock.System$Windows$Media$Animation$IClock$getFirstTick())) {
                this.setFirstTick(System.TimeSpan.zero);
                this.setLastTick(totalIterationsTime);
            } else {
                this.setFirstTick(this.clock.System$Windows$Media$Animation$IClock$getFirstTick());

                if (System.TimeSpan.lt(totalIterationsTime, this.clock.System$Windows$Media$Animation$IClock$getLastTick())) {
                    this.setLastTick(totalIterationsTime);
                } else if (System.TimeSpan.lt(totalIterationsTime, this.iterationDuration)) {
                    this.setLastTick(this.clock.System$Windows$Media$Animation$IClock$getLastTick());
                } else {
                    var lastIterationRemainder = this.iterationsCount - Math.floor(this.iterationsCount);
                    var lastIterationDuration = Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, lastIterationRemainder);

                    if (System.TimeSpan.lt(lastIterationDuration, this.clock.System$Windows$Media$Animation$IClock$getFirstTick())) {
                        this.setLastTick(System.TimeSpan.add(this.clock.System$Windows$Media$Animation$IClock$getLastTick(), Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, Math.floor(this.iterationsCount - 1))));
                    } else if (System.TimeSpan.lt(lastIterationDuration, this.clock.System$Windows$Media$Animation$IClock$getLastTick())) {
                        this.setLastTick(totalIterationsTime);
                    } else {
                        this.setLastTick(System.TimeSpan.add(this.clock.System$Windows$Media$Animation$IClock$getLastTick(), Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, Math.floor(this.iterationsCount))));
                    }
                }
            }
        },
        tick: function (time) {
            var iteration = Granular.Extensions.TimeSpanExtensions.divide(time, this.iterationDuration);

            var progressState = System.TimeSpan.lt(time, this.getFirstTick()) ? System.Windows.Media.Animation.ClockProgressState.BeforeStarted : (System.TimeSpan.gte(time, this.getLastTick()) ? System.Windows.Media.Animation.ClockProgressState.AfterEnded : System.Windows.Media.Animation.ClockProgressState.Active);

            iteration = Math.min(Math.max(iteration, 0), this.iterationsCount);

            var iterationRemainder = iteration - Math.floor(iteration);

            var currentIterationStart;
            var currentIterationTime;

            if (progressState === System.Windows.Media.Animation.ClockProgressState.AfterEnded && iterationRemainder === 0) {
                currentIterationStart = Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, iteration - 1);
                currentIterationTime = this.iterationDuration;
            } else {
                currentIterationStart = Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, iteration - iterationRemainder);
                currentIterationTime = Granular.Extensions.TimeSpanExtensions.scale(this.iterationDuration, iterationRemainder);
            }

            var state = this.clock.System$Windows$Media$Animation$IClock$tick(currentIterationTime);

            var previousTick;
            var nextTick;

            if (System.TimeSpan.lt(time, this.getFirstTick())) {
                previousTick = Granular.Compatibility.TimeSpan.minValue;
                nextTick = this.getFirstTick();
            } else if (System.TimeSpan.gte(time, this.getLastTick())) {
                previousTick = this.getLastTick();
                nextTick = Granular.Compatibility.TimeSpan.maxValue;
            } else {
                if (System.TimeSpan.gt(currentIterationTime, this.clock.System$Windows$Media$Animation$IClock$getFirstTick()) || Math.floor(iteration) === 0) {
                    previousTick = Granular.Extensions.TimeSpanExtensions.max((System.TimeSpan.add(currentIterationStart, state.getPreviousTick())), this.getFirstTick());
                } else {
                    previousTick = Granular.Extensions.TimeSpanExtensions.max((System.TimeSpan.add(System.TimeSpan.sub(currentIterationStart, this.iterationDuration), this.clock.System$Windows$Media$Animation$IClock$getLastTick())), this.getFirstTick());
                }

                if (System.TimeSpan.lt(currentIterationTime, this.clock.System$Windows$Media$Animation$IClock$getLastTick()) || Math.floor(iteration) === Math.floor(this.iterationsCount)) {
                    nextTick = Granular.Extensions.TimeSpanExtensions.min((System.TimeSpan.add(currentIterationStart, state.getNextTick())), this.getLastTick());
                } else {
                    nextTick = Granular.Extensions.TimeSpanExtensions.min((System.TimeSpan.add(System.TimeSpan.add(currentIterationStart, this.iterationDuration), this.clock.System$Windows$Media$Animation$IClock$getFirstTick())), this.getLastTick());
                }
            }

            if (progressState === System.Windows.Media.Animation.ClockProgressState.Active) {
                progressState = state.getProgressState();
            }

            return new System.Windows.Media.Animation.ClockState(progressState, state.getProgress(), iteration, previousTick, nextTick);
        }
    });

    Bridge.define("System.Windows.Media.Animation.ReverseClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clock: null,
        config: {
            properties: {
                LastTick: null,
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "setLastTick", "System$Windows$Media$Animation$IClock$setLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.LastTick = new System.TimeSpan();
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (clock) {
            this.$initialize();
            this.clock = clock;

            this.setDuration(Granular.Extensions.TimeSpanExtensions.scale(clock.System$Windows$Media$Animation$IClock$getDuration(), 2));
            this.setLastTick(System.TimeSpan.sub(this.getDuration(), clock.System$Windows$Media$Animation$IClock$getFirstTick()));
        },
        getFirstTick: function () {
            return this.clock.System$Windows$Media$Animation$IClock$getFirstTick();
        },
        tick: function (time) {
            var isReversed = System.TimeSpan.gt(time, this.clock.System$Windows$Media$Animation$IClock$getDuration());

            var reversedTime = System.TimeSpan.sub(this.getDuration(), time);

            var previousTick;
            var nextTick;

            var state;

            if (!isReversed) {
                state = this.clock.System$Windows$Media$Animation$IClock$tick(time);

                previousTick = state.getPreviousTick();
                nextTick = System.TimeSpan.gte(time, this.clock.System$Windows$Media$Animation$IClock$getLastTick()) ? System.TimeSpan.sub(this.getDuration(), this.clock.System$Windows$Media$Animation$IClock$getLastTick()) : state.getNextTick();
            } else {
                state = this.clock.System$Windows$Media$Animation$IClock$tick(reversedTime);

                previousTick = System.TimeSpan.gte(reversedTime, this.clock.System$Windows$Media$Animation$IClock$getLastTick()) ? this.clock.System$Windows$Media$Animation$IClock$getLastTick() : System.TimeSpan.sub(this.getDuration(), state.getNextTick());
                nextTick = System.TimeSpan.eq(state.getPreviousTick(), Granular.Compatibility.TimeSpan.minValue) ? Granular.Compatibility.TimeSpan.maxValue : System.TimeSpan.sub(this.getDuration(), state.getPreviousTick());
            }

            return new System.Windows.Media.Animation.ClockState(state.getProgressState(), state.getProgress(), state.getIteration(), previousTick, nextTick);
        }
    });

    Bridge.define("System.Windows.Media.Animation.RootClock", {
        inherits: [System.Windows.Media.Animation.IRootClock],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.tickFrequency = System.TimeSpan.fromMilliseconds(20) || new System.TimeSpan();
                    this.default = new System.Windows.Media.Animation.RootClock();
                }
            }
        },
        scheduledTick: null,
        clocksSchedule: null,
        config: {
            alias: [
            "getTime", "System$Windows$Media$Animation$IRootClock$getTime",
            "addClock", "System$Windows$Media$Animation$IRootClock$addClock",
            "removeClock", "System$Windows$Media$Animation$IRootClock$removeClock"
            ],
            init: function () {
                this.startTime = new Date(-864e13);
                this.scheduledTickTime = new System.TimeSpan();
                this.lastTickTime = new System.TimeSpan();
            }
        },
        ctor: function () {
            this.$initialize();
            this.clocksSchedule = new (System.Collections.Generic.List$1(System.Windows.Media.Animation.RootClock.ClockSchedule))();

            this.startTime = new Date();
            this.lastTickTime = Granular.Compatibility.TimeSpan.minValue;
        },
        getTime: function () {
            return Granular.Compatibility.TimeSpan.subtract(new Date(), this.startTime);
        },
        addClock: function (clock) {
            if (System.Linq.Enumerable.from(this.clocksSchedule).any(function (clockSchedule) {
                    return Bridge.referenceEquals(clockSchedule.getClock(), clock);
                }) || System.TimeSpan.eq(clock.System$Windows$Media$Animation$IClock$getFirstTick(), Granular.Compatibility.TimeSpan.maxValue)) {
                return;
            }

            this.clocksSchedule.add(new System.Windows.Media.Animation.RootClock.ClockSchedule(clock));

            this.scheduleTick(clock.System$Windows$Media$Animation$IClock$getFirstTick());
        },
        scheduleTick: function (tickTime) {
            // keep TickFrequency interval between ticks
            tickTime = Granular.Extensions.TimeSpanExtensions.max(tickTime, System.TimeSpan.add(this.lastTickTime, System.Windows.Media.Animation.RootClock.tickFrequency));

            if (this.scheduledTick != null) {
                if (System.TimeSpan.lte(this.scheduledTickTime, tickTime)) {
                    // earlier tick is already scheduled
                    return;
                }

                this.scheduledTick.System$IDisposable$dispose();
            }

            this.scheduledTick = System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTaskScheduler().System$Windows$Threading$ITaskScheduler$scheduleTask(Granular.Extensions.TimeSpanExtensions.max((System.TimeSpan.sub(tickTime, this.getTime())), System.TimeSpan.zero), Bridge.fn.bind(this, $asm.$.System.Windows.Media.Animation.RootClock.f1));
            this.scheduledTickTime = tickTime;
        },
        removeClock: function (clock) {
            this.clocksSchedule.remove(System.Linq.Enumerable.from(this.clocksSchedule).firstOrDefault(function (clockSchedule) {
                    return Bridge.referenceEquals(clockSchedule.getClock(), clock);
                }, null));
        },
        tick: function () {
            var $t;
            var tickTime = this.getTime();

            this.lastTickTime = tickTime;
            this.scheduledTick = null;

            var nextTick = Granular.Compatibility.TimeSpan.maxValue;

            $t = Bridge.getEnumerator(this.clocksSchedule);
            while ($t.moveNext()) {
                var clockSchedule = $t.getCurrent();
                if (System.TimeSpan.lte(clockSchedule.getNextTick(), tickTime)) {
                    clockSchedule.tick(tickTime);
                    nextTick = Granular.Extensions.TimeSpanExtensions.min(nextTick, clockSchedule.getNextTick());
                }
            }

            this.cleanClocks();

            if (System.TimeSpan.lt(nextTick, Granular.Compatibility.TimeSpan.maxValue)) {
                this.scheduleTick(nextTick);
            }
        },
        cleanClocks: function () {
            var i = 0;
            while (i < this.clocksSchedule.getCount()) {
                if (System.TimeSpan.eq(this.clocksSchedule.getItem(i).getNextTick(), Granular.Compatibility.TimeSpan.maxValue)) {
                    this.clocksSchedule.removeAt(i);
                } else {
                    i = (i + 1) | 0;
                }
            }
        }
    });

    Bridge.ns("System.Windows.Media.Animation.RootClock", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.RootClock, {
        f1: function () {
            System.Windows.Threading.Dispatcher.currentDispatcher.invokeAsync(Bridge.fn.cacheBind(this, this.tick), System.Windows.Threading.DispatcherPriority.Render);
        }
    });

    Bridge.define("System.Windows.Media.Animation.SequentialClock", {
        inherits: [System.Windows.Media.Animation.IClock],
        clocks: null,
        config: {
            properties: {
                FirstTick: null,
                LastTick: null,
                Duration: null
            },
            alias: [
            "getFirstTick", "System$Windows$Media$Animation$IClock$getFirstTick",
            "setFirstTick", "System$Windows$Media$Animation$IClock$setFirstTick",
            "getLastTick", "System$Windows$Media$Animation$IClock$getLastTick",
            "setLastTick", "System$Windows$Media$Animation$IClock$setLastTick",
            "getDuration", "System$Windows$Media$Animation$IClock$getDuration",
            "setDuration", "System$Windows$Media$Animation$IClock$setDuration",
            "tick", "System$Windows$Media$Animation$IClock$tick"
            ],
            init: function () {
                this.FirstTick = new System.TimeSpan();
                this.LastTick = new System.TimeSpan();
                this.Duration = new System.TimeSpan();
            }
        },
        ctor: function (clocks) {
            this.$initialize();
            this.clocks = clocks;

            if (!System.Linq.Enumerable.from(clocks).any()) {
                this.setFirstTick(System.TimeSpan.zero);
                this.setLastTick(System.TimeSpan.zero);
                this.setDuration(System.TimeSpan.zero);
            } else {
                this.setFirstTick(System.Linq.Enumerable.from(clocks).first().System$Windows$Media$Animation$IClock$getFirstTick());
                this.setLastTick(System.TimeSpan.add(System.Linq.Enumerable.from(clocks).take(((System.Linq.Enumerable.from(clocks).count() - 1) | 0)).select($asm.$.System.Windows.Media.Animation.SequentialClock.f1).aggregate($asm.$.System.Windows.Media.Animation.SequentialClock.f2), System.Linq.Enumerable.from(clocks).last().System$Windows$Media$Animation$IClock$getLastTick()));
                this.setDuration(System.Linq.Enumerable.from(clocks).select($asm.$.System.Windows.Media.Animation.SequentialClock.f1).aggregate($asm.$.System.Windows.Media.Animation.SequentialClock.f2));
            }
        },
        tick: function (time) {
            var $t;
            var progressState = new System.Windows.Media.Animation.ClockProgressState();

            if (System.TimeSpan.lt(time, this.getFirstTick())) {
                progressState = System.Windows.Media.Animation.ClockProgressState.BeforeStarted;
            } else if (System.TimeSpan.lt(time, this.getLastTick())) {
                progressState = System.Windows.Media.Animation.ClockProgressState.Active;
            } else {
                progressState = System.Windows.Media.Animation.ClockProgressState.AfterEnded;
            }

            var previousTick = Granular.Compatibility.TimeSpan.minValue;
            var nextTick = Granular.Compatibility.TimeSpan.maxValue;
            var totalDuration = System.TimeSpan.zero;

            $t = Bridge.getEnumerator(this.clocks, System.Windows.Media.Animation.IClock);
            while ($t.moveNext()) {
                var clock = $t.getCurrent();
                var state = clock.System$Windows$Media$Animation$IClock$tick(System.TimeSpan.sub(time, totalDuration));

                if (System.TimeSpan.neq(state.getPreviousTick(), Granular.Compatibility.TimeSpan.minValue)) {
                    previousTick = Granular.Extensions.TimeSpanExtensions.max(previousTick, System.TimeSpan.add(state.getPreviousTick(), totalDuration));
                }

                if (System.TimeSpan.neq(state.getNextTick(), Granular.Compatibility.TimeSpan.maxValue)) {
                    nextTick = Granular.Extensions.TimeSpanExtensions.min(nextTick, System.TimeSpan.add(state.getNextTick(), totalDuration));
                }

                totalDuration = System.TimeSpan.add(totalDuration, clock.System$Windows$Media$Animation$IClock$getDuration());
            }

            return new System.Windows.Media.Animation.ClockState(progressState, 0, 0, previousTick, nextTick);
        }
    });

    Bridge.ns("System.Windows.Media.Animation.SequentialClock", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.SequentialClock, {
        f1: function (clock) {
            return clock.System$Windows$Media$Animation$IClock$getDuration();
        },
        f2: function (t1, t2) {
            return System.TimeSpan.add(t1, t2);
        }
    });

    Bridge.define("System.Windows.Media.Animation.ThicknessAnimationOperations", {
        inherits: [System.Windows.Media.Animation.IAnimationOperations$1(System.Windows.Thickness)],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Media.Animation.ThicknessAnimationOperations();
                }
            }
        },
        config: {
            alias: [
            "getZero", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Thickness$getZero",
            "add", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Thickness$add",
            "subtract", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Thickness$subtract",
            "scale", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Thickness$scale",
            "interpolate", "System$Windows$Media$Animation$IAnimationOperations$1$System$Windows$Thickness$interpolate"
            ]
        },
        ctor: function () {
            this.$initialize();
            //
        },
        getZero: function () {
            return System.Windows.Thickness.zero;
        },
        add: function (value1, value2) {
            return System.Windows.Thickness.op_Addition(value1, value2);
        },
        subtract: function (value1, value2) {
            return System.Windows.Thickness.op_Subtraction(value1, value2);
        },
        scale: function (value, factor) {
            return System.Windows.Thickness.op_Multiply(factor, value);
        },
        interpolate: function (value1, value2, progress) {
            return System.Windows.Thickness.op_Addition(System.Windows.Thickness.op_Multiply((1 - progress), value1), System.Windows.Thickness.op_Multiply(progress, value2));
        }
    });

    Bridge.define("System.Windows.Media.BrushTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        colorTypeConverter: null,
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.colorTypeConverter = new System.Windows.Media.ColorTypeConverter();
        },
        convertFrom: function (namespaces, sourceUri, value) {
            if (Bridge.is(value, String)) {
                return new System.Windows.Media.SolidColorBrush.$ctor1(Bridge.cast(this.colorTypeConverter.convertFrom(namespaces, sourceUri, value), System.Windows.Media.Color));
            }

            throw new Granular.Exception("Can't convert \"{0}\" to Color", [value]);
        }
    });

    Bridge.define("System.Windows.Media.ColorTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            if (Bridge.is(value, String)) {
                var stringValue = Bridge.cast(value, String).trim();

                if (stringValue.length === 9 && stringValue.charCodeAt(0) === 35) {
                    return System.Windows.Media.Color.fromUInt32(Granular.Compatibility.Convert.toUInt32(stringValue.substr(1), 16));
                }

                if (stringValue.length === 7 && stringValue.charCodeAt(0) === 35) {
                    return System.Windows.Media.Color.fromUInt32(((4278190080 | Granular.Compatibility.Convert.toUInt32(stringValue.substr(1), 16)) >>> 0));
                }

                if (stringValue.length === 4 && stringValue.charCodeAt(0) === 35) {
                    return System.Windows.Media.Color.fromUInt32(((4278190080 | Granular.Compatibility.Convert.toUInt32(System.String.format("{0}{0}{1}{1}{2}{2}", String.fromCharCode(stringValue.charCodeAt(1)), String.fromCharCode(stringValue.charCodeAt(2)), String.fromCharCode(stringValue.charCodeAt(3))), 16)) >>> 0));
                }

                var propertyInfo = Bridge.Reflection.getMembers(System.Windows.Media.Colors, 16, 24 | 256, stringValue);
                if (propertyInfo != null) {
                    return Bridge.Reflection.midel(propertyInfo.g, null).apply(null, System.Array.init(0, null, Object));
                }
            }

            throw new Granular.Exception("Can't convert \"{0}\" to Color", [value]);
        }
    });

    Bridge.define("System.Windows.Media.FontFamilyTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Media.FontFamily.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Media.ImageSourceTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var bitmapImage = new System.Windows.Media.Imaging.BitmapImage.ctor();
            bitmapImage.beginInit();
            bitmapImage.setBaseUri(sourceUri);
            bitmapImage.setUriSource(Granular.Compatibility.Uri.createRelativeOrAbsoluteUri(Bridge.cast(value, String)));
            bitmapImage.endInit();

            return bitmapImage;
        }
    });

    Bridge.define("System.Windows.Media.MatrixTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Media.Matrix.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Media.TransformTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return Bridge.merge(new System.Windows.Media.MatrixTransform(), {
                setMatrix: System.Windows.Media.Matrix.parse(value.toString())
            } );
        }
    });

    Bridge.define("System.Windows.MultiDataTrigger.MultiDataTriggerConditionProvider", {
        inherits: [System.Windows.IDataTriggerConditionProvider],
        condition: null,
        config: {
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        ctor: function (condition) {
            this.$initialize();
            this.condition = condition;
        },
        createDataTriggerCondition: function (element) {
            return this.condition.createDataTriggerCondition(element);
        }
    });

    Bridge.define("System.Windows.MultiDataTriggerCondition", {
        inherits: [System.Windows.IDataTriggerCondition,System.IDisposable],
        statics: {
            register: function (element, conditionProviders) {
                var condition = new System.Windows.MultiDataTriggerCondition(element, conditionProviders);
                condition.register();
                return condition;
            }
        },
        isMatched: false,
        element: null,
        conditionProviders: null,
        conditions: null,
        config: {
            events: {
                IsMatchedChanged: null
            },
            alias: [
            "addIsMatchedChanged", "System$Windows$IDataTriggerCondition$addIsMatchedChanged",
            "removeIsMatchedChanged", "System$Windows$IDataTriggerCondition$removeIsMatchedChanged",
            "getIsMatched", "System$Windows$IDataTriggerCondition$getIsMatched",
            "setIsMatched", "System$Windows$IDataTriggerCondition$setIsMatched",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (element, conditionProviders) {
            this.$initialize();
            this.element = element;
            this.conditionProviders = conditionProviders;
        },
        getIsMatched: function () {
            return this.isMatched;
        },
        setIsMatched: function (value) {
            if (this.isMatched === value) {
                return;
            }

            this.isMatched = value;
            Granular.Extensions.EventHandlerExtensions.raise$2(this.IsMatchedChanged, this);
        },
        register: function () {
            var $t;
            this.conditions = System.Linq.Enumerable.from(this.conditionProviders).select(Bridge.fn.bind(this, $asm.$.System.Windows.MultiDataTriggerCondition.f1)).toArray();

            $t = Bridge.getEnumerator(this.conditions, System.Windows.IDataTriggerCondition);
            while ($t.moveNext()) {
                var condition = $t.getCurrent();
                condition.System$Windows$IDataTriggerCondition$addIsMatchedChanged(Bridge.fn.cacheBind(this, this.onConditionIsMatchedChanged));
            }

            this.setIsMatched(System.Linq.Enumerable.from(this.conditions).all($asm.$.System.Windows.MultiDataTriggerCondition.f2));
        },
        dispose: function () {
            var $t;
            $t = Bridge.getEnumerator(this.conditions, System.Windows.IDataTriggerCondition);
            while ($t.moveNext()) {
                var condition = $t.getCurrent();
                condition.System$Windows$IDataTriggerCondition$removeIsMatchedChanged(Bridge.fn.cacheBind(this, this.onConditionIsMatchedChanged));

                if (Bridge.is(condition, System.IDisposable)) {
                    Bridge.cast(condition, System.IDisposable).System$IDisposable$dispose();
                }
            }
        },
        onConditionIsMatchedChanged: function (sender, e) {
            this.setIsMatched(System.Linq.Enumerable.from(this.conditions).all($asm.$.System.Windows.MultiDataTriggerCondition.f3));
        }
    });

    Bridge.ns("System.Windows.MultiDataTriggerCondition", $asm.$);

    Bridge.apply($asm.$.System.Windows.MultiDataTriggerCondition, {
        f1: function (conditionProvider) {
            return conditionProvider.System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition(this.element);
        },
        f2: function (condition1) {
            return condition1.System$Windows$IDataTriggerCondition$getIsMatched();
        },
        f3: function (condition) {
            return condition.System$Windows$IDataTriggerCondition$getIsMatched();
        }
    });

    Bridge.define("System.Windows.MultiTrigger.TriggerConditionProvider", {
        inherits: [System.Windows.IDataTriggerConditionProvider],
        condition: null,
        config: {
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        ctor: function (condition) {
            this.$initialize();
            this.condition = condition;
        },
        createDataTriggerCondition: function (element) {
            return this.condition.createTriggerCondition(element);
        }
    });

    Bridge.define("System.Windows.NameScope", {
        inherits: [System.Windows.INameScope],
        statics: {
            nameScopeProperty: null,
            config: {
                init: function () {
                    this.nameScopeProperty = System.Windows.DependencyProperty.registerAttached("NameScope", System.Windows.INameScope, System.Windows.NameScope, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            getNameScope: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.NameScope.nameScopeProperty), System.Windows.INameScope);
            },
            setNameScope: function (obj, value) {
                obj.setValue(System.Windows.NameScope.nameScopeProperty, value);
            },
            getTemplateNameScope: function (templatedParent) {
                var templateRoot = System.Linq.Enumerable.from(templatedParent.getVisualChildren()).firstOrDefault(null, null);
                return templateRoot != null ? System.Windows.NameScope.getNameScope(templateRoot) : null;
            },
            getContainingNameScope: function (element) {
                while (element != null) {
                    var nameScope = System.Windows.NameScope.getNameScope(element);
                    if (nameScope != null) {
                        return nameScope;
                    }

                    if (Bridge.is(element, System.Windows.UIElement)) {
                        element = Bridge.cast(element, System.Windows.UIElement).getLogicalParent();
                    } else if (Bridge.is(element, System.Windows.IContextElement)) {
                        element = Bridge.as(Bridge.cast(element, System.Windows.IContextElement).System$Windows$IContextElement$getContextParent(), System.Windows.DependencyObject);
                    } else {
                        return null;
                    }
                }

                return null;
            }
        },
        items: null,
        parent: null,
        config: {
            alias: [
            "registerName", "System$Windows$INameScope$registerName",
            "unregisterName", "System$Windows$INameScope$unregisterName",
            "findName", "System$Windows$INameScope$findName",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$String$Object$getEnumerator"
            ]
        },
        ctor: function (parent) {
            if (parent === void 0) { parent = null; }

            this.$initialize();
            this.parent = parent;
            this.items = new (System.Collections.Generic.Dictionary$2(String,Object))();
        },
        registerName: function (name, value) {
            if (this.items.containsKey(name)) {
                throw new Granular.Exception("Scope already contains an item named \"{0}\"", [name]);
            }

            this.items.add(name, value);
        },
        unregisterName: function (name) {
            if (!this.items.containsKey(name)) {
                throw new Granular.Exception("Scope doesn't contain an item named \"{0}\"", [name]);
            }

            this.items.remove(name);
        },
        findName: function (name) {
            return this.items.containsKey(name) ? this.items.get(name) : (this.parent != null ? this.parent.System$Windows$INameScope$findName(name) : null);
        },
        getEnumerator: function () {
            return this.parent != null ? System.Linq.Enumerable.from(this.parent).concat(this.items).getEnumerator() : this.items.getEnumerator();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.PointTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Point.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.PropertyPathElement", {
        inherits: [System.Windows.IPropertyPathElement],
        statics: {
            tryGetValue: function (target, propertyName, value) {
                var containingType = System.Windows.Markup.XamlNameExtensions.resolveContainingType(propertyName, Bridge.getType(target));

                var dependencyProperty = System.Windows.DependencyProperty.getProperty(containingType, propertyName.getMemberName());
                if (dependencyProperty != null && Bridge.is(target, System.Windows.DependencyObject)) {
                    value.v = Bridge.cast(target, System.Windows.DependencyObject).getValue(dependencyProperty);
                    return true;
                }

                var propertyInfo = Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, propertyName.getMemberName());
                if (propertyInfo != null && !Granular.Compatibility.Linq.Enumerable.any(Object, (propertyInfo.ipi || []))) {
                    value.v = Bridge.Reflection.midel(propertyInfo.g, target).apply(null, System.Array.init(0, null, Object));
                    return true;
                }

                value.v = null;
                return false;
            }
        },
        config: {
            properties: {
                PropertyName: null
            },
            alias: [
            "tryGetValue", "System$Windows$IPropertyPathElement$tryGetValue",
            "tryGetDependencyProperty", "System$Windows$IPropertyPathElement$tryGetDependencyProperty",
            "createPropertyObserver", "System$Windows$IPropertyPathElement$createPropertyObserver"
            ]
        },
        ctor: function (propertyName) {
            this.$initialize();
            this.setPropertyName(propertyName);
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.PropertyPathElement);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && System.Windows.Markup.XamlName.op_Equality(this.getPropertyName(), other.getPropertyName());
        },
        getHashCode: function () {
            return this.getPropertyName().getHashCode();
        },
        toString: function () {
            return this.getPropertyName().getHasContainingTypeName() ? System.String.format("({0})", this.getPropertyName().getLocalName()) : this.getPropertyName().getLocalName();
        },
        tryGetValue: function (target, value) {
            return System.Windows.PropertyPathElement.tryGetValue(target, this.getPropertyName(), value);
        },
        tryGetDependencyProperty: function (containingType, dependencyProperty) {
            dependencyProperty.v = System.Windows.DependencyProperty.getProperty(System.Windows.Markup.XamlNameExtensions.resolveContainingType(this.getPropertyName(), containingType), this.getPropertyName().getMemberName());
            return dependencyProperty.v != null;
        },
        createPropertyObserver: function (baseValueType) {
            var containingType = System.Windows.Markup.XamlNameExtensions.resolveContainingType(this.getPropertyName(), baseValueType);

            var dependencyProperty = System.Windows.DependencyProperty.getProperty(containingType, this.getPropertyName().getMemberName());
            if (dependencyProperty != null) {
                return new System.Windows.Data.DependencyPropertyObserver(dependencyProperty);
            }

            var propertyInfo = Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, this.getPropertyName().getMemberName());
            if (propertyInfo != null) {
                return new System.Windows.Data.ClrPropertyObserver(propertyInfo, System.Array.init(0, null, Object));
            }

            return null;
        }
    });

    Bridge.define("System.Windows.PropertyPathElementTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return new System.Windows.PropertyPathElement(System.Windows.Markup.XamlName.fromPrefixedName(Bridge.cast(value, String), namespaces));
        }
    });

    Bridge.define("System.Windows.PropertyPathTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.PropertyPath.parse(Bridge.cast(value, String), namespaces);
        }
    });

    Bridge.define("System.Windows.ReadOnlyDependencyPropertyValueEntry", {
        inherits: [System.Windows.IDependencyPropertyValueEntry],
        source: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$IDependencyPropertyValueEntry$addValueChanged",
            "removeValueChanged", "System$Windows$IDependencyPropertyValueEntry$removeValueChanged",
            "getValue", "System$Windows$IDependencyPropertyValueEntry$getValue",
            "getValuePriority", "System$Windows$IDependencyPropertyValueEntry$getValuePriority",
            "getValue$1", "System$Windows$IDependencyPropertyValueEntry$getValue$1",
            "setValue", "System$Windows$IDependencyPropertyValueEntry$setValue",
            "getBaseValuePriority", "System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority",
            "coerceValue", "System$Windows$IDependencyPropertyValueEntry$coerceValue"
            ]
        },
        ctor: function (source) {
            this.$initialize();
            this.source = source;

            source.System$Windows$IDependencyPropertyValueEntry$addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.ReadOnlyDependencyPropertyValueEntry.f1));
        },
        getValue: function () {
            return this.source.System$Windows$IDependencyPropertyValueEntry$getValue();
        },
        getValuePriority: function () {
            return this.source.System$Windows$IDependencyPropertyValueEntry$getValuePriority();
        },
        getValue$3: function (flattened) {
            return this.source.System$Windows$IDependencyPropertyValueEntry$getValue$1(this.source.System$Windows$IDependencyPropertyValueEntry$getValuePriority(), flattened);
        },
        getValue$1: function (priority, flattened) {
            return this.source.System$Windows$IDependencyPropertyValueEntry$getValue$1(priority, flattened);
        },
        setValue: function (priority, value) {
            throw new Granular.Exception("Can't modify a readonly dependency property value");
        },
        getBaseValuePriority: function () {
            return this.source.System$Windows$IDependencyPropertyValueEntry$getBaseValuePriority();
        },
        coerceValue: function () {
            this.source.System$Windows$IDependencyPropertyValueEntry$coerceValue();
        }
    });

    Bridge.ns("System.Windows.ReadOnlyDependencyPropertyValueEntry", $asm.$);

    Bridge.apply($asm.$.System.Windows.ReadOnlyDependencyPropertyValueEntry, {
        f1: function (sender, e) {
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.ValueChanged, this, e);
        }
    });

    Bridge.define("System.Windows.RectTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Rect.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.ResourceDictionary", {
        inherits: [System.Collections.Generic.IDictionary$2(Object,Object),System.Windows.IResourceContainer,System.Windows.Markup.IUriContext],
        statics: {
            getMergedDictionariesKeys: function (dictionary) {
                return System.Linq.Enumerable.from(Bridge.cast(dictionary, System.Collections.Generic.IDictionary$2(Object,Object)).System$Collections$Generic$IDictionary$2$Object$Object$getKeys()).concat(System.Linq.Enumerable.from(dictionary.getMergedDictionaries()).selectMany(System.Windows.ResourceDictionary.getMergedDictionariesKeys));
            },
            loadResourceDictionary: function (source) {
                return Bridge.as(System.Windows.Application.loadComponent(source), System.Windows.ResourceDictionary);
            }
        },
        sourceDictionary: null,
        source: null,
        dictionary: null,
        config: {
            events: {
                ResourcesChanged: null
            },
            properties: {
                MergedDictionaries: null,
                BaseUri: null
            },
            alias: [
            "addResourcesChanged", "System$Windows$IResourceContainer$addResourcesChanged",
            "removeResourcesChanged", "System$Windows$IResourceContainer$removeResourcesChanged",
            "getBaseUri", "System$Windows$Markup$IUriContext$getBaseUri",
            "setBaseUri", "System$Windows$Markup$IUriContext$setBaseUri",
            "getCount", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$getCount",
            "getIsEmpty", "System$Windows$IResourceContainer$getIsEmpty",
            "getKeys", "System$Collections$Generic$IDictionary$2$Object$Object$getKeys",
            "getValues", "System$Collections$Generic$IDictionary$2$Object$Object$getValues",
            "getItem", "System$Collections$Generic$IDictionary$2$Object$Object$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$Object$Object$setItem",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$getIsReadOnly",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$Object$Object$tryGetValue",
            "add", "System$Collections$Generic$IDictionary$2$Object$Object$add",
            "clear", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$clear"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.setMergedDictionaries(new (Granular.Collections.ObservableCollection$1(System.Windows.ResourceDictionary)).ctor());
            this.getMergedDictionaries().addCollectionChanged(Bridge.fn.cacheBind(this, this.onMergedDictionariesCollectionChanged));

            this.dictionary = new (System.Collections.Generic.Dictionary$2(Object,Object))();
        },
        getSource: function () {
            return this.source;
        },
        setSource: function (value) {
            if (Bridge.referenceEquals(this.source, value)) {
                return;
            }

            if (this.sourceDictionary != null) {
                this.getMergedDictionaries().remove(this.sourceDictionary);
            }

            this.source = value;
            this.sourceDictionary = System.Windows.ResourceDictionary.loadResourceDictionary(System.UriExtensions.resolveAbsoluteUri(this.source, this.getBaseUri()));

            if (this.sourceDictionary != null) {
                this.getMergedDictionaries().add(this.sourceDictionary);
            }
        },
        getCount: function () {
            return this.dictionary.getCount();
        },
        getIsEmpty: function () {
            return this.getCount() === 0 && System.Linq.Enumerable.from(this.getMergedDictionaries()).all($asm.$.System.Windows.ResourceDictionary.f1);
        },
        getKeys: function () {
            return this.dictionary.getKeys();
        },
        getValues: function () {
            return this.dictionary.getValues();
        },
        getItem: function (key) {
            return this.getValue(key);
        },
        setItem: function (key, value) {
            this.add(key, value);
        },
        getIsReadOnly: function () {
            return false;
        },
        getValue: function (key) {
            var value = { };

            if (!this.tryGetValue(key, value)) {
                throw new Granular.Exception("Cannot find resource named \"{0}\"", [key]);
            }

            return value.v;
        },
        tryGetValue: function (key, value) {
            var $t;
            if (this.dictionary.tryGetValue(key, value)) {
                if (Bridge.is(value.v, System.Windows.Markup.IValueProvider)) {
                    value.v = Bridge.cast(value.v, System.Windows.Markup.IValueProvider).System$Windows$Markup$IValueProvider$provideValue();
                }

                return true;
            }

            $t = Bridge.getEnumerator(this.getMergedDictionaries());
            while ($t.moveNext()) {
                var mergedDictionary = $t.getCurrent();
                if (mergedDictionary.tryGetValue(key, value)) {
                    return true;
                }
            }

            value.v = null;
            return false;
        },
        add: function (key, value) {
            this.dictionary.set(key, value);
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, System.Windows.ResourcesChangedEventArgs.fromKey(key));
        },
        System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$add: function (item) {
            this.add(item.key, item.value);
        },
        clear: function () {
            var e = System.Windows.ResourcesChangedEventArgs.fromKeyCollection(System.Linq.Enumerable.from(this.dictionary.getKeys()).toArray());
            this.dictionary.clear();
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, e);
        },
        contains: function (key) {
            return System.Array.contains(this.dictionary.getKeys(), key, Object) || System.Linq.Enumerable.from(this.getMergedDictionaries()).any(function (d) {
                    return System.Array.contains(Bridge.cast(d, System.Collections.Generic.IDictionary$2(Object,Object)).System$Collections$Generic$IDictionary$2$Object$Object$getKeys(), key, Object);
                });
        },
        System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$contains: function (item) {
            var value = { };
            return this.tryGetValue(item.key, value) && Bridge.referenceEquals(item.value, value.v);
        },
        remove: function (key) {
            if (this.dictionary.remove(key)) {
                Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, System.Windows.ResourcesChangedEventArgs.fromKey(key));
                return true;
            }

            return false;
        },
        System$Collections$Generic$IDictionary$2$Object$Object$remove: function (key) {
            return this.remove(key);
        },
        System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$remove: function (item) {
            return System.Array.contains(Bridge.cast(this, System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(Object,Object))), item, System.Collections.Generic.KeyValuePair$2(Object,Object)) && this.remove(item.key);
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.dictionary.getEnumerator();
        },
        System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$Object$Object$getEnumerator: function () {
            return this.dictionary.getEnumerator();
        },
        onMergedDictionariesCollectionChanged: function (sender, e) {
            var $t, $t1;
            $t = Bridge.getEnumerator(e.getOldItems(), Object);
            while ($t.moveNext()) {
                var dictionary = Bridge.cast($t.getCurrent(), System.Windows.ResourceDictionary);
                dictionary.removeResourcesChanged(Bridge.fn.cacheBind(this, this.onMergeDictionaryResourcesChanged));
            }

            $t1 = Bridge.getEnumerator(e.getNewItems(), Object);
            while ($t1.moveNext()) {
                var dictionary1 = Bridge.cast($t1.getCurrent(), System.Windows.ResourceDictionary);
                dictionary1.addResourcesChanged(Bridge.fn.cacheBind(this, this.onMergeDictionaryResourcesChanged));
            }

            if (e.getAction() !== Granular.Collections.NotifyCollectionChangedAction.Move) {
                var keys = System.Linq.Enumerable.from(e.getOldItems()).concat(e.getNewItems()).select(function(x) {{ return Bridge.cast(x, System.Windows.ResourceDictionary); }}).selectMany(System.Windows.ResourceDictionary.getMergedDictionariesKeys);
                Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, System.Windows.ResourcesChangedEventArgs.fromKeyCollection(keys));
            }
        },
        onMergeDictionaryResourcesChanged: function (sender, e) {
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, e);
        },
        System$Windows$IResourceContainer$tryGetResource: function (resourceKey, value) {
            return this.tryGetValue(resourceKey, value);
        },
        System$Collections$Generic$IDictionary$2$Object$Object$containsKey: function (key) {
            return this.contains(key);
        },
        System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$Object$Object$copyTo: function (array, arrayIndex) {
            var $t;
            ($t=System.Linq.Enumerable.from(this.dictionary).toArray(), System.Array.copy($t, 0, array, arrayIndex, $t.length));
        }
    });

    Bridge.ns("System.Windows.ResourceDictionary", $asm.$);

    Bridge.apply($asm.$.System.Windows.ResourceDictionary, {
        f1: function (dictionary) {
            return dictionary.getIsEmpty();
        }
    });

    Bridge.define("System.Windows.ResourceReferenceExpressionProvider", {
        inherits: [System.Windows.IExpressionProvider],
        resourceKey: null,
        config: {
            alias: [
            "createExpression", "System$Windows$IExpressionProvider$createExpression"
            ]
        },
        ctor: function (resourceKey) {
            this.$initialize();
            this.resourceKey = resourceKey;
        },
        createExpression: function (dependencyObject, dependencyProperty) {
            var resourceContainer = Bridge.as(dependencyObject, System.Windows.IResourceContainer);

            if (resourceContainer == null) {
                throw new Granular.Exception("ResourceReferenceExpression cannot be attached to \"{0}\" as it does not implement \"{1}\"", [Bridge.Reflection.getTypeName(Bridge.getType(dependencyObject)), Bridge.Reflection.getTypeName(System.Windows.IResourceContainer)]);
            }

            return new System.Windows.ResourceReferenceExpression(resourceContainer, this.resourceKey);
        }
    });

    Bridge.define("System.Windows.RoutedEventTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            var text = value.toString().trim();

            var eventName = System.Windows.Markup.XamlName.fromPrefixedName(text, namespaces);
            var containingType = System.Windows.Markup.XamlNameExtensions.resolveContainingType(eventName, null);

            if (containingType == null) {
                throw new Granular.Exception("Invalid routed event name \"{0}\"", [eventName.getLocalName()]);
            }

            var routedEvent = System.Windows.EventManager.getEvent(containingType, eventName.getMemberName());

            if (routedEvent == null) {
                throw new Granular.Exception("Can't find a routed event named \"{0}\"", [eventName]);
            }

            return routedEvent;
        }
    });

    Bridge.define("System.Windows.RoutedPropertyChangedEventArgs$1", function (T) { return {
        inherits: [System.Windows.RoutedEventArgs],
        config: {
            properties: {
                OldValue: Bridge.getDefaultValue(T),
                NewValue: Bridge.getDefaultValue(T)
            }
        },
        ctor: function (routedEvent, originalSource, oldValue, newValue) {
            this.$initialize();
            System.Windows.RoutedEventArgs.ctor.call(this, routedEvent, originalSource);
            this.setOldValue(oldValue);
            this.setNewValue(newValue);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.RoutedEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    }; });

    Bridge.define("System.Windows.Setter", {
        inherits: [System.Windows.ITriggerAction],
        statics: {
            getResolvedTarget: function (target, targetName, valueSource) {
                return Granular.Extensions.StringExtensions.isNullOrEmpty(targetName) ? target : Bridge.as((valueSource === System.Windows.BaseValueSource.Local ? System.Windows.NameScope.getContainingNameScope(target) : System.Windows.NameScope.getTemplateNameScope(target)).System$Windows$INameScope$findName(targetName), System.Windows.FrameworkElement);
            },
            getResolvedValueSource: function (valueSource, target) {
                return valueSource === System.Windows.BaseValueSource.TemplateTrigger && target.getTemplatedParent() != null ? System.Windows.BaseValueSource.ParentTemplateTrigger : valueSource;
            },
            getInitializedValueOverlapExpression: function (target, property, valueSource) {
                var valueOverlapExpression = Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue$1(target.getValueEntry(property), valueSource, false), System.Windows.Setter.ValueOverlapExpression);

                if (valueOverlapExpression == null) {
                    valueOverlapExpression = new System.Windows.Setter.ValueOverlapExpression();
                    target.setValue(property, valueOverlapExpression, valueSource);
                }

                return valueOverlapExpression;
            },
            isStyleValueSource: function (valueSource) {
                return valueSource === System.Windows.BaseValueSource.ThemeStyle || valueSource === System.Windows.BaseValueSource.Style;
            }
        },
        config: {
            properties: {
                Property: null,
                Value: null,
                TargetName: null
            },
            alias: [
            "apply", "System$Windows$ITriggerAction$apply",
            "clean", "System$Windows$ITriggerAction$clean",
            "isActionOverlaps", "System$Windows$ITriggerAction$isActionOverlaps"
            ]
        },
        apply: function (target, valueSource) {
            if (this.getProperty() == null) {
                throw new Granular.Exception("Setter.Property cannot be null");
            }

            var resolvedTarget = System.Windows.Setter.getResolvedTarget(target, this.getTargetName(), valueSource);
            var resolvedProperty = System.Windows.PropertyPathElementExtensions.getDependencyProperty(this.getProperty(), Bridge.getType(resolvedTarget));
            var resolvedValue = this.getValue() == null || Bridge.is(this.getValue(), System.Windows.IExpressionProvider) || Bridge.Reflection.isInstanceOfType(this.getValue(), resolvedProperty.getPropertyType()) ? this.getValue() : System.Windows.Markup.TypeConverter.convertValue(this.getValue().toString(), resolvedProperty.getPropertyType(), System.Windows.Markup.XamlNamespaces.empty, null);
            var resolvedValueSource = System.Windows.Setter.getResolvedValueSource(valueSource, resolvedTarget);

            if (System.Windows.Setter.isStyleValueSource(valueSource)) {
                resolvedTarget.setValue(resolvedProperty, resolvedValue, resolvedValueSource);
            } else {
                System.Windows.Setter.getInitializedValueOverlapExpression(resolvedTarget, resolvedProperty, resolvedValueSource).setValue$1(this, resolvedValue);
            }
        },
        clean: function (target, valueSource) {
            if (this.getProperty() == null) {
                throw new Granular.Exception("Setter.Property cannot be null");
            }

            var resolvedTarget = System.Windows.Setter.getResolvedTarget(target, this.getTargetName(), valueSource);
            var resolvedProperty = System.Windows.PropertyPathElementExtensions.getDependencyProperty(this.getProperty(), Bridge.getType(resolvedTarget));
            var resolvedValueSource = System.Windows.Setter.getResolvedValueSource(valueSource, resolvedTarget);

            if (System.Windows.Setter.isStyleValueSource(valueSource)) {
                resolvedTarget.clearValue(resolvedProperty, resolvedValueSource);
            } else {
                System.Windows.Setter.getInitializedValueOverlapExpression(resolvedTarget, resolvedProperty, resolvedValueSource).clearValue(this);
            }
        },
        isActionOverlaps: function (action) {
            if (this.getProperty() == null) {
                throw new Granular.Exception("Setter.Property cannot be null");
            }

            return Bridge.is(action, System.Windows.Setter) && Bridge.referenceEquals(this.getTargetName(), Bridge.cast(action, System.Windows.Setter).getTargetName()) && Bridge.equals(this.getProperty(), Bridge.cast(action, System.Windows.Setter).getProperty());
        }
    });

    Bridge.define("System.Windows.SizeTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Size.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.StaticResourceExtension", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        statics: {
            getStaticResource: function (context, resourceKey) {
                if (context == null) {
                    throw new Granular.Exception("StaticResource \"{0}\" was not found", [resourceKey]);
                }

                var value = { };
                return Bridge.is(context.getTarget(), System.Windows.IResourceContainer) && Bridge.cast(context.getTarget(), System.Windows.IResourceContainer).System$Windows$IResourceContainer$tryGetResource(resourceKey, value) ? value.v : System.Windows.StaticResourceExtension.getStaticResource(context.getParentContext(), resourceKey);
            }
        },
        config: {
            properties: {
                ResourceKey: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return System.Windows.StaticResourceExtension.getStaticResource(context, this.getResourceKey());
        }
    });

    Bridge.define("System.Windows.StyleKey", {
        inherits: [System.Windows.IResourceKey],
        hashCode: 0,
        config: {
            properties: {
                TargetType: null
            },
            alias: [
            "getAssembly", "System$Windows$IResourceKey$getAssembly"
            ]
        },
        ctor: function (targetType) {
            this.$initialize();
            this.setTargetType(targetType);

            this.hashCode = Bridge.getHashCode(this.getTargetType());
        },
        getAssembly: function () {
            return this.getTargetType() != null ? Bridge.Reflection.getTypeAssembly(this.getTargetType()) : null;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.StyleKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getTargetType(), other.getTargetType());
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("StyleKey({0})", Bridge.Reflection.getTypeName(this.getTargetType()));
        }
    });

    Bridge.define("System.Windows.StyleKeyProvider", {
        inherits: [System.Windows.Markup.IDeferredValueKeyProvider],
        config: {
            alias: [
            "getValueKey", "System$Windows$Markup$IDeferredValueKeyProvider$getValueKey"
            ]
        },
        getValueKey: function (element) {
            var keyMember = System.Linq.Enumerable.from(element.getMembers()).singleOrDefault($asm.$.System.Windows.StyleKeyProvider.f1, null);
            if (keyMember != null) {
                return System.Windows.Markup.ElementFactory.fromValue(System.Linq.Enumerable.from(keyMember.getValues()).single(), Object, element.getNamespaces(), element.getSourceUri()).System$Windows$Markup$IElementFactory$createElement(new System.Windows.Markup.InitializeContext.ctor());
            }

            var targetTypeMember = System.Linq.Enumerable.from(element.getMembers()).singleOrDefault($asm.$.System.Windows.StyleKeyProvider.f2, null);
            if (targetTypeMember != null) {
                return new System.Windows.StyleKey(Bridge.cast(System.Windows.Markup.ElementFactory.fromValue(System.Linq.Enumerable.from(targetTypeMember.getValues()).single(), Function, element.getNamespaces(), element.getSourceUri()).System$Windows$Markup$IElementFactory$createElement(new System.Windows.Markup.InitializeContext.ctor()), Function));
            }

            throw new Granular.Exception(System.String.format("Can't create value key from \"{0}\"", element.getName()));
        }
    });

    Bridge.ns("System.Windows.StyleKeyProvider", $asm.$);

    Bridge.apply($asm.$.System.Windows.StyleKeyProvider, {
        f1: function (member) {
            return Bridge.referenceEquals(member.getName().getLocalName(), "Key");
        },
        f2: function (member) {
            return Bridge.referenceEquals(member.getName().getLocalName(), "TargetType");
        }
    });

    Bridge.define("System.Windows.SystemResources", {
        inherits: [System.Windows.IResourceContainer],
        statics: {
            ThemeName: "Generic",
            ThemeNameAndColor: "Generic",
            resolveAssemblyThemeResources: function (assembly, value) {
                var themeInfoAttribute = Granular.Extensions.AssemblyExtensions.firstOrDefaultCustomAttributeCached(System.Windows.ThemeInfoAttribute, assembly);

                if (themeInfoAttribute == null || themeInfoAttribute.getGenericDictionaryLocation() === System.Windows.ResourceDictionaryLocation.None) {
                    value.v = null;
                    return false;
                }

                var themeResourcesAssemblyName = themeInfoAttribute.getGenericDictionaryLocation() === System.Windows.ResourceDictionaryLocation.SourceAssembly ? System.AssemblyExtensions.getName(assembly).getName() : System.String.format("{0}.{1}", System.AssemblyExtensions.getName(assembly).getName(), System.Windows.SystemResources.ThemeName);

                value.v = Bridge.cast(System.Windows.EmbeddedResourceLoader.loadResourceElement(Granular.Compatibility.Uri.createAbsoluteUri(System.String.format("pack://application:,,,/{0};component/Themes/{1}.xaml", themeResourcesAssemblyName, System.Windows.SystemResources.ThemeNameAndColor))), System.Windows.ResourceDictionary);
                return true;
            }
        },
        themeResourcesCache: null,
        config: {
            alias: [
            "getIsEmpty", "System$Windows$IResourceContainer$getIsEmpty",
            "tryGetResource", "System$Windows$IResourceContainer$tryGetResource"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.themeResourcesCache = Granular.Collections.CacheDictionary$2(System.Reflection.Assembly,System.Windows.ResourceDictionary).createUsingStringKeys$1(System.Windows.SystemResources.resolveAssemblyThemeResources, $asm.$.System.Windows.SystemResources.f1);
        },
        getIsEmpty: function () {
            return false;
        },
        System$Windows$IResourceContainer$addResourcesChanged: function (value) {
        },
        System$Windows$IResourceContainer$removeResourcesChanged: function (value) {
        },
        tryGetResource: function (resourceKey, value) {
            var $t;
            value.v = null;

            var assembly = ($t = (Bridge.as(resourceKey, System.Windows.IResourceKey))) != null ? $t.System$Windows$IResourceKey$getAssembly() : null;
            if (assembly == null) {
                return false;
            }

            var themeResources = { };
            return this.themeResourcesCache.tryGetValue(assembly, themeResources) && themeResources.v.tryGetValue(resourceKey, value);
        }
    });

    Bridge.ns("System.Windows.SystemResources", $asm.$);

    Bridge.apply($asm.$.System.Windows.SystemResources, {
        f1: function (assembly) {
            return assembly.name;
        }
    });

    Bridge.define("System.Windows.TemplateBindingExtension", {
        inherits: [System.Windows.Markup.IMarkupExtension],
        config: {
            properties: {
                Property: null,
                Converter: null,
                ConverterParameter: null
            },
            alias: [
            "provideValue", "System$Windows$Markup$IMarkupExtension$provideValue"
            ]
        },
        provideValue: function (context) {
            return Bridge.merge(new System.Windows.Data.Binding(), {
                setPath: new System.Windows.PropertyPath(System.Array.init([this.getProperty()], System.Windows.IPropertyPathElement)),
                setRelativeSource: Bridge.merge(new System.Windows.Data.RelativeSource(), {
                    setMode: System.Windows.Data.RelativeSourceMode.TemplatedParent
                } ),
                setConverter: this.getConverter(),
                setConverterParameter: this.getConverterParameter()
            } );
        }
    });

    Bridge.define("System.Windows.TemplateKey", {
        inherits: [System.Windows.IResourceKey],
        hashCode: 0,
        config: {
            properties: {
                TargetType: null
            },
            alias: [
            "getAssembly", "System$Windows$IResourceKey$getAssembly"
            ]
        },
        ctor: function (targetType) {
            this.$initialize();
            this.setTargetType(targetType);
            this.hashCode = Bridge.getHashCode(targetType);
        },
        getAssembly: function () {
            return this.getTargetType() != null ? Bridge.Reflection.getTypeAssembly(this.getTargetType()) : null;
        },
        equals: function (obj) {
            var other = Bridge.as(obj, System.Windows.TemplateKey);

            return Bridge.referenceEquals(this, other) || !Bridge.referenceEquals(other, null) && Bridge.equals(this.getTargetType(), other.getTargetType());
        },
        getHashCode: function () {
            return this.hashCode;
        },
        toString: function () {
            return System.String.format("TemplateKey({0})", Bridge.Reflection.getTypeName(this.getTargetType()));
        }
    });

    Bridge.define("System.Windows.ThicknessTypeConverter", {
        inherits: [System.Windows.Markup.ITypeConverter],
        config: {
            alias: [
            "convertFrom", "System$Windows$Markup$ITypeConverter$convertFrom"
            ]
        },
        convertFrom: function (namespaces, sourceUri, value) {
            return System.Windows.Thickness.parse(value.toString().trim());
        }
    });

    Bridge.define("System.Windows.Threading.DispatcherOperation$1", function (TResult) { return {
        inherits: [System.Windows.Threading.DispatcherOperation],
        ctor: function (action, priority) {
            this.$initialize();
            System.Windows.Threading.DispatcherOperation.$ctor1.call(this, function () {
                return action();
            }, priority);
            //
        },
        getResult$1: function () {
            return Bridge.cast(this.getResult(), TResult);
        }
    }; });

    Bridge.define("System.Windows.TriggerCondition", {
        inherits: [System.Windows.IDataTriggerCondition,System.IDisposable],
        statics: {
            register: function (element, property, value) {
                var condition = new System.Windows.TriggerCondition(element, property, value);
                condition.register();

                return condition;
            }
        },
        isMatched: false,
        element: null,
        property: null,
        value: null,
        config: {
            events: {
                IsMatchedChanged: null
            },
            alias: [
            "addIsMatchedChanged", "System$Windows$IDataTriggerCondition$addIsMatchedChanged",
            "removeIsMatchedChanged", "System$Windows$IDataTriggerCondition$removeIsMatchedChanged",
            "getIsMatched", "System$Windows$IDataTriggerCondition$getIsMatched",
            "setIsMatched", "System$Windows$IDataTriggerCondition$setIsMatched",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (element, property, value) {
            this.$initialize();
            this.element = element;
            this.property = property;
            this.value = value;
        },
        getIsMatched: function () {
            return this.isMatched;
        },
        setIsMatched: function (value) {
            if (this.isMatched === value) {
                return;
            }

            this.isMatched = value;
            Granular.Extensions.EventHandlerExtensions.raise$2(this.IsMatchedChanged, this);
        },
        register: function () {
            this.setIsMatched(Granular.Compatibility.EqualityComparer.default.equals2(this.element.getValue(this.property), this.value));

            this.element.addPropertyChanged(Bridge.fn.cacheBind(this, this.onPropertyChanged));
        },
        dispose: function () {
            this.element.removePropertyChanged(Bridge.fn.cacheBind(this, this.onPropertyChanged));
        },
        onPropertyChanged: function (sender, e) {
            if (!Bridge.referenceEquals(e.getProperty(), this.property)) {
                return;
            }

            this.setIsMatched(Granular.Compatibility.EqualityComparer.default.equals2(e.getNewValue(), this.value));
        }
    });

    Bridge.define("System.Windows.UIElement", {
        inherits: [System.Windows.Media.Visual,System.Windows.Media.Animation.IAnimatable,System.Windows.IInputElement],
        statics: {
            ctor: function () {
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseEnterEvent, System.Windows.UIElement.onMouseEnter, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseLeaveEvent, System.Windows.UIElement.onMouseLeave, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.queryCursorEvent, $asm.$.System.Windows.UIElement.f1, true);

                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.previewMouseMoveEvent, $asm.$.System.Windows.UIElement.f2, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.previewMouseDownEvent, $asm.$.System.Windows.UIElement.f3, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.previewMouseUpEvent, $asm.$.System.Windows.UIElement.f4, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.previewMouseWheelEvent, $asm.$.System.Windows.UIElement.f5, false);

                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseMoveEvent, $asm.$.System.Windows.UIElement.f6, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseDownEvent, $asm.$.System.Windows.UIElement.f7, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseUpEvent, $asm.$.System.Windows.UIElement.f8, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Mouse.mouseWheelEvent, $asm.$.System.Windows.UIElement.f9, false);

                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.gotKeyboardFocusEvent, System.Windows.UIElement.onGotKeyboardFocus, true);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.lostKeyboardFocusEvent, System.Windows.UIElement.onLostKeyboardFocus, true);

                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.previewKeyDownEvent, $asm.$.System.Windows.UIElement.f10, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.previewKeyUpEvent, $asm.$.System.Windows.UIElement.f11, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.keyDownEvent, $asm.$.System.Windows.UIElement.f12, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.Keyboard.keyUpEvent, $asm.$.System.Windows.UIElement.f13, false);

                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.FocusManager.gotFocusEvent, System.Windows.UIElement.onGotFocus, false);
                System.Windows.EventManager.registerClassHandler(System.Windows.UIElement, System.Windows.Input.FocusManager.lostFocusEvent, System.Windows.UIElement.onLostFocus, false);
            },
            opacityProperty: null,
            visibilityProperty: null,
            isVisiblePropertyKey: null,
            isVisibleProperty: null,
            isEnabledProperty: null,
            isHitTestVisibleProperty: null,
            clipToBoundsProperty: null,
            focusableProperty: null,
            isMouseOverPropertyKey: null,
            isMouseOverProperty: null,
            isFocusedPropertyKey: null,
            isFocusedProperty: null,
            isKeyboardFocusedPropertyKey: null,
            isKeyboardFocusedProperty: null,
            isKeyboardFocusWithinPropertyKey: null,
            isKeyboardFocusWithinProperty: null,
            renderTransformProperty: null,
            renderTransformOriginProperty: null,
            previewMouseMoveEvent: null,
            previewMouseDownEvent: null,
            previewMouseUpEvent: null,
            previewMouseWheelEvent: null,
            mouseMoveEvent: null,
            mouseDownEvent: null,
            mouseUpEvent: null,
            mouseWheelEvent: null,
            mouseEnterEvent: null,
            mouseLeaveEvent: null,
            queryCursorEvent: null,
            previewKeyDownEvent: null,
            previewKeyUpEvent: null,
            previewGotKeyboardFocusEvent: null,
            previewLostKeyboardFocusEvent: null,
            keyDownEvent: null,
            keyUpEvent: null,
            gotKeyboardFocusEvent: null,
            lostKeyboardFocusEvent: null,
            gotFocusEvent: null,
            lostFocusEvent: null,
            config: {
                init: function () {
                    this.opacityProperty = System.Windows.DependencyProperty.register("Opacity", System.Double, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor6(1.0, $asm.$.System.Windows.UIElement.f14));
                    this.visibilityProperty = System.Windows.DependencyProperty.register("Visibility", System.Windows.Visibility, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Visibility.Visible, System.Windows.FrameworkPropertyMetadataOptions.AffectsParentMeasure, $asm.$.System.Windows.UIElement.f15));
                    this.isVisiblePropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsVisible", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor7(true, $asm.$.System.Windows.UIElement.f16, $asm.$.System.Windows.UIElement.f17));
                    this.isVisibleProperty = System.Windows.UIElement.isVisiblePropertyKey.getDependencyProperty();
                    this.isEnabledProperty = System.Windows.DependencyProperty.register("IsEnabled", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor7(true, $asm.$.System.Windows.UIElement.f18, $asm.$.System.Windows.UIElement.f19));
                    this.isHitTestVisibleProperty = System.Windows.DependencyProperty.register("IsHitTestVisible", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor7(true, $asm.$.System.Windows.UIElement.f20, $asm.$.System.Windows.UIElement.f21));
                    this.clipToBoundsProperty = System.Windows.DependencyProperty.register("ClipToBounds", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor6(false, $asm.$.System.Windows.UIElement.f22));
                    this.focusableProperty = System.Windows.DependencyProperty.register("Focusable", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.UIElement.f23));
                    this.isMouseOverPropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsMouseOver", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isMouseOverProperty = System.Windows.UIElement.isMouseOverPropertyKey.getDependencyProperty();
                    this.isFocusedPropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsFocused", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isFocusedProperty = System.Windows.UIElement.isFocusedPropertyKey.getDependencyProperty();
                    this.isKeyboardFocusedPropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsKeyboardFocused", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isKeyboardFocusedProperty = System.Windows.UIElement.isKeyboardFocusedPropertyKey.getDependencyProperty();
                    this.isKeyboardFocusWithinPropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsKeyboardFocusWithin", Boolean, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isKeyboardFocusWithinProperty = System.Windows.UIElement.isKeyboardFocusWithinPropertyKey.getDependencyProperty();
                    this.renderTransformProperty = System.Windows.DependencyProperty.register("RenderTransform", System.Windows.Media.Transform, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Media.Transform.identity, $asm.$.System.Windows.UIElement.f24));
                    this.renderTransformOriginProperty = System.Windows.DependencyProperty.register("RenderTransformOrigin", System.Windows.Point, System.Windows.UIElement, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Point.zero, $asm.$.System.Windows.UIElement.f25));
                    this.previewMouseMoveEvent = System.Windows.Input.Mouse.previewMouseMoveEvent.addOwner(System.Windows.UIElement);
                    this.previewMouseDownEvent = System.Windows.Input.Mouse.previewMouseDownEvent.addOwner(System.Windows.UIElement);
                    this.previewMouseUpEvent = System.Windows.Input.Mouse.previewMouseUpEvent.addOwner(System.Windows.UIElement);
                    this.previewMouseWheelEvent = System.Windows.Input.Mouse.previewMouseWheelEvent.addOwner(System.Windows.UIElement);
                    this.mouseMoveEvent = System.Windows.Input.Mouse.mouseMoveEvent.addOwner(System.Windows.UIElement);
                    this.mouseDownEvent = System.Windows.Input.Mouse.mouseDownEvent.addOwner(System.Windows.UIElement);
                    this.mouseUpEvent = System.Windows.Input.Mouse.mouseUpEvent.addOwner(System.Windows.UIElement);
                    this.mouseWheelEvent = System.Windows.Input.Mouse.mouseWheelEvent.addOwner(System.Windows.UIElement);
                    this.mouseEnterEvent = System.Windows.Input.Mouse.mouseEnterEvent.addOwner(System.Windows.UIElement);
                    this.mouseLeaveEvent = System.Windows.Input.Mouse.mouseLeaveEvent.addOwner(System.Windows.UIElement);
                    this.queryCursorEvent = System.Windows.Input.Mouse.queryCursorEvent.addOwner(System.Windows.UIElement);
                    this.previewKeyDownEvent = System.Windows.Input.Keyboard.previewKeyDownEvent.addOwner(System.Windows.UIElement);
                    this.previewKeyUpEvent = System.Windows.Input.Keyboard.previewKeyUpEvent.addOwner(System.Windows.UIElement);
                    this.previewGotKeyboardFocusEvent = System.Windows.Input.Keyboard.previewGotKeyboardFocusEvent.addOwner(System.Windows.UIElement);
                    this.previewLostKeyboardFocusEvent = System.Windows.Input.Keyboard.previewLostKeyboardFocusEvent.addOwner(System.Windows.UIElement);
                    this.keyDownEvent = System.Windows.Input.Keyboard.keyDownEvent.addOwner(System.Windows.UIElement);
                    this.keyUpEvent = System.Windows.Input.Keyboard.keyUpEvent.addOwner(System.Windows.UIElement);
                    this.gotKeyboardFocusEvent = System.Windows.Input.Keyboard.gotKeyboardFocusEvent.addOwner(System.Windows.UIElement);
                    this.lostKeyboardFocusEvent = System.Windows.Input.Keyboard.lostKeyboardFocusEvent.addOwner(System.Windows.UIElement);
                    this.gotFocusEvent = System.Windows.Input.FocusManager.gotFocusEvent.addOwner(System.Windows.UIElement);
                    this.lostFocusEvent = System.Windows.Input.FocusManager.lostFocusEvent.addOwner(System.Windows.UIElement);
                }
            },
            addHandler: function (element, routedEvent, handler, handledEventsToo) {
                if (handledEventsToo === void 0) { handledEventsToo = false; }
                if (Bridge.is(element, System.Windows.UIElement)) {
                    Bridge.cast(element, System.Windows.UIElement).addHandler(routedEvent, handler, handledEventsToo);
                }
            },
            removeHandler: function (element, routedEvent, handler) {
                if (Bridge.is(element, System.Windows.UIElement)) {
                    Bridge.cast(element, System.Windows.UIElement).removeHandler(routedEvent, handler);
                }
            },
            onMouseEnter: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsMouseOver(true);
                Bridge.cast(sender, System.Windows.UIElement).onMouseEnter(e);
            },
            onMouseLeave: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsMouseOver(false);
                Bridge.cast(sender, System.Windows.UIElement).onMouseLeave(e);
            },
            onGotKeyboardFocus: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsKeyboardFocused(Bridge.referenceEquals(e.getOriginalSource(), sender));
                Bridge.cast(sender, System.Windows.UIElement).setIsKeyboardFocusWithin(true);
                Bridge.cast(sender, System.Windows.UIElement).onGotKeyboardFocus(e);
            },
            onLostKeyboardFocus: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsKeyboardFocused(false);
                Bridge.cast(sender, System.Windows.UIElement).setIsKeyboardFocusWithin(false);
                Bridge.cast(sender, System.Windows.UIElement).onLostKeyboardFocus(e);
            },
            onGotFocus: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsFocused(true);
                Bridge.cast(sender, System.Windows.UIElement).onGotFocus(e);
            },
            onLostFocus: function (sender, e) {
                Bridge.cast(sender, System.Windows.UIElement).setIsFocused(false);
                Bridge.cast(sender, System.Windows.UIElement).onLostFocus(e);
            }
        },
        logicalParent: null,
        logicalChildren: null,
        isRootElement: false,
        animatableRootClock: null,
        disableMeasureInvalidationRequests: 0,
        disableMeasureInvalidationToken: null,
        routedEventHandlers: null,
        routedEventHandlersCache: null,
        previousDesiredSize: null,
        focus$1: null,
        config: {
            events: {
                LayoutUpdated: null
            },
            properties: {
                IsMeasureValid: false,
                IsArrangeValid: false,
                DesiredSize: null,
                LogicalChildren: null,
                PreviousAvailableSize: null,
                PreviousFinalRect: null
            },
            alias: [
            "raiseEvent", "System$Windows$IInputElement$raiseEvent",
            "setAnimationClocks", "System$Windows$Media$Animation$IAnimatable$setAnimationClocks",
            "addAnimationClocks", "System$Windows$Media$Animation$IAnimatable$addAnimationClocks",
            "removeAnimationClocks", "System$Windows$Media$Animation$IAnimatable$removeAnimationClocks"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Visual.ctor.call(this);
            this.logicalChildren = new (System.Collections.Generic.List$1(Object))();
            this.setLogicalChildren(new (System.Collections.ObjectModel.ReadOnlyCollection$1(Object))(this.logicalChildren));
            this.routedEventHandlers = new (Granular.Collections.ListDictionary$2(System.Windows.RoutedEvent,System.Windows.RoutedEventHandlerItem))();
            this.routedEventHandlersCache = Granular.Collections.CacheDictionary$2(System.Windows.RoutedEvent,System.Collections.Generic.IEnumerable$1(System.Windows.RoutedEventHandlerItem)).createUsingStringKeys(Bridge.fn.cacheBind(this, this.resolveRoutedEventHandlers), $asm.$.System.Windows.UIElement.f26);
            this.setDesiredSize(System.Windows.Size.zero);
            this.setPreviousFinalRect(System.Windows.Rect.empty);
            this.setPreviousAvailableSize(System.Windows.Size.infinity);
            this.previousDesiredSize = System.Windows.Size.empty;

            this.setVisualClipToBounds(this.getClipToBounds());
            this.setVisualIsHitTestVisible(this.getIsHitTestVisible());
            this.setVisualIsVisible(this.getIsVisible());
            this.setVisualOpacity(this.getOpacity());

            this.disableMeasureInvalidationToken = new Granular.Disposable(Bridge.fn.bind(this, $asm.$.System.Windows.UIElement.f27));
        },
        getLogicalParent: function () {
            return this.logicalParent;
        },
        setLogicalParent: function (value) {
            if (Bridge.referenceEquals(this.logicalParent, value)) {
                return;
            }

            var oldLogicalParent = this.logicalParent;
            this.logicalParent = value;
            this.setInheritanceParent$1();
            this.onLogicalParentChanged(oldLogicalParent, this.logicalParent);
        },
        getRenderSize: function () {
            return this.getVisualSize();
        },
        getOpacity: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.opacityProperty), System.Double));
        },
        setOpacity: function (value) {
            this.setValue(System.Windows.UIElement.opacityProperty, value);
        },
        getVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.visibilityProperty), System.Int32));
        },
        setVisibility: function (value) {
            this.setValue(System.Windows.UIElement.visibilityProperty, value);
        },
        getIsVisible: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.UIElement.isVisiblePropertyKey), Boolean));
        },
        setIsVisible: function (value) {
            this.setValue$1(System.Windows.UIElement.isVisiblePropertyKey, value);
        },
        getIsEnabled: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.isEnabledProperty), Boolean));
        },
        setIsEnabled: function (value) {
            this.setValue(System.Windows.UIElement.isEnabledProperty, value);
        },
        getIsHitTestVisible: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.isHitTestVisibleProperty), Boolean));
        },
        setIsHitTestVisible: function (value) {
            this.setValue(System.Windows.UIElement.isHitTestVisibleProperty, value);
        },
        getClipToBounds: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.clipToBoundsProperty), Boolean));
        },
        setClipToBounds: function (value) {
            this.setValue(System.Windows.UIElement.clipToBoundsProperty, value);
        },
        getFocusable: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.UIElement.focusableProperty), Boolean));
        },
        setFocusable: function (value) {
            this.setValue(System.Windows.UIElement.focusableProperty, value);
        },
        getIsMouseOver: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.UIElement.isMouseOverPropertyKey), Boolean));
        },
        setIsMouseOver: function (value) {
            this.setValue$1(System.Windows.UIElement.isMouseOverPropertyKey, value);
        },
        getIsFocused: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.UIElement.isFocusedPropertyKey), Boolean));
        },
        setIsFocused: function (value) {
            this.setValue$1(System.Windows.UIElement.isFocusedPropertyKey, value);
        },
        getIsKeyboardFocused: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.UIElement.isKeyboardFocusedPropertyKey), Boolean));
        },
        setIsKeyboardFocused: function (value) {
            this.setValue$1(System.Windows.UIElement.isKeyboardFocusedPropertyKey, value);
        },
        getIsKeyboardFocusWithin: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.UIElement.isKeyboardFocusWithinPropertyKey), Boolean));
        },
        setIsKeyboardFocusWithin: function (value) {
            this.setValue$1(System.Windows.UIElement.isKeyboardFocusWithinPropertyKey, value);
        },
        getRenderTransform: function () {
            return Bridge.cast(this.getValue(System.Windows.UIElement.renderTransformProperty), System.Windows.Media.Transform);
        },
        setRenderTransform: function (value) {
            this.setValue(System.Windows.UIElement.renderTransformProperty, value);
        },
        getRenderTransformOrigin: function () {
            return Bridge.cast(this.getValue(System.Windows.UIElement.renderTransformOriginProperty), System.Windows.Point);
        },
        setRenderTransformOrigin: function (value) {
            this.setValue(System.Windows.UIElement.renderTransformOriginProperty, value);
        },
        getIsRootElement: function () {
            return this.isRootElement;
        },
        setIsRootElement: function (value) {
            if (this.isRootElement === value) {
                return;
            }

            this.isRootElement = value;
            this.coerceValue(System.Windows.UIElement.isVisibleProperty);
        },
        System$Windows$Media$Animation$IAnimatable$getRootClock: function () {
            if (this.animatableRootClock == null) {
                this.animatableRootClock = new System.Windows.Media.Animation.AnimatableRootClock(System.Windows.Media.Animation.RootClock.default, this.getIsVisible());
            }

            return this.animatableRootClock;
        },
        addPreviewMouseMove: function (value) {
            this.addHandler(System.Windows.Input.Mouse.previewMouseMoveEvent, value, false);
        },
        removePreviewMouseMove: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.previewMouseMoveEvent, value);
        },
        addPreviewMouseDown: function (value) {
            this.addHandler(System.Windows.Input.Mouse.previewMouseDownEvent, value, false);
        },
        removePreviewMouseDown: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.previewMouseDownEvent, value);
        },
        addPreviewMouseUp: function (value) {
            this.addHandler(System.Windows.Input.Mouse.previewMouseUpEvent, value, false);
        },
        removePreviewMouseUp: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.previewMouseUpEvent, value);
        },
        addPreviewMouseWheel: function (value) {
            this.addHandler(System.Windows.Input.Mouse.previewMouseWheelEvent, value, false);
        },
        removePreviewMouseWheel: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.previewMouseWheelEvent, value);
        },
        addMouseMove: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseMoveEvent, value, false);
        },
        removeMouseMove: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseMoveEvent, value);
        },
        addMouseDown: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseDownEvent, value, false);
        },
        removeMouseDown: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseDownEvent, value);
        },
        addMouseUp: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseUpEvent, value, false);
        },
        removeMouseUp: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseUpEvent, value);
        },
        addMouseWheel: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseWheelEvent, value, false);
        },
        removeMouseWheel: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseWheelEvent, value);
        },
        addMouseEnter: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseEnterEvent, value, false);
        },
        removeMouseEnter: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseEnterEvent, value);
        },
        addMouseLeave: function (value) {
            this.addHandler(System.Windows.Input.Mouse.mouseLeaveEvent, value, false);
        },
        removeMouseLeave: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.mouseLeaveEvent, value);
        },
        addQueryCursor: function (value) {
            this.addHandler(System.Windows.Input.Mouse.queryCursorEvent, value, false);
        },
        removeQueryCursor: function (value) {
            this.removeHandler(System.Windows.Input.Mouse.queryCursorEvent, value);
        },
        addPreviewKeyDown: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.previewKeyDownEvent, value, false);
        },
        removePreviewKeyDown: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.previewKeyDownEvent, value);
        },
        addPreviewKeyUp: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.previewKeyUpEvent, value, false);
        },
        removePreviewKeyUp: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.previewKeyUpEvent, value);
        },
        addPreviewGotKeyboardFocus: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.previewGotKeyboardFocusEvent, value, false);
        },
        removePreviewGotKeyboardFocus: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.previewGotKeyboardFocusEvent, value);
        },
        addPreviewLostKeyboardFocus: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.previewLostKeyboardFocusEvent, value, false);
        },
        removePreviewLostKeyboardFocus: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.previewLostKeyboardFocusEvent, value);
        },
        addKeyDown: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.keyDownEvent, value, false);
        },
        removeKeyDown: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.keyDownEvent, value);
        },
        addKeyUp: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.keyUpEvent, value, false);
        },
        removeKeyUp: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.keyUpEvent, value);
        },
        addGotKeyboardFocus: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.gotKeyboardFocusEvent, value, false);
        },
        removeGotKeyboardFocus: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.gotKeyboardFocusEvent, value);
        },
        addLostKeyboardFocus: function (value) {
            this.addHandler(System.Windows.Input.Keyboard.lostKeyboardFocusEvent, value, false);
        },
        removeLostKeyboardFocus: function (value) {
            this.removeHandler(System.Windows.Input.Keyboard.lostKeyboardFocusEvent, value);
        },
        addGotFocus: function (value) {
            this.addHandler(System.Windows.UIElement.gotFocusEvent, value);
        },
        removeGotFocus: function (value) {
            this.removeHandler(System.Windows.UIElement.gotFocusEvent, value);
        },
        addLostFocus: function (value) {
            this.addHandler(System.Windows.UIElement.lostFocusEvent, value);
        },
        removeLostFocus: function (value) {
            this.removeHandler(System.Windows.UIElement.lostFocusEvent, value);
        },
        addLogicalChild: function (child) {
            var childElement = Bridge.as(child, System.Windows.UIElement);

            if (childElement != null) {
                if (Bridge.referenceEquals(childElement.getLogicalParent(), this)) {
                    return;
                }

                if (childElement.getLogicalParent() != null) {
                    childElement.getLogicalParent().removeLogicalChild(childElement);
                }

                childElement.setLogicalParent(this);
            }

            this.logicalChildren.add(child);
        },
        removeLogicalChild: function (child) {
            var childElement = Bridge.as(child, System.Windows.UIElement);

            if (childElement != null) {
                if (!Bridge.referenceEquals(childElement.getLogicalParent(), this)) {
                    return;
                }

                childElement.setLogicalParent(null);
            }

            this.logicalChildren.remove(child);
        },
        addHandler: function (routedEvent, handler, handledEventsToo) {
            if (handledEventsToo === void 0) { handledEventsToo = false; }
            this.routedEventHandlers.add(routedEvent, new System.Windows.RoutedEventHandlerItem(handler, handledEventsToo));
            this.routedEventHandlersCache.remove(routedEvent);
        },
        removeHandler: function (routedEvent, handler) {
            this.routedEventHandlers.remove(routedEvent, System.Linq.Enumerable.from(this.routedEventHandlers.getValues(routedEvent)).firstOrDefault(function (item) {
                    return Bridge.staticEquals(item.getHandler(), handler);
                }, null));
            this.routedEventHandlersCache.remove(routedEvent);
        },
        raiseEvent: function (e) {
            var eventRoute = new System.Windows.EventRoute(e.getRoutedEvent(), this.getEventRouteItems(e.getRoutedEvent(), this, this));
            e.setSource(this);
            eventRoute.invokeHandlers(e);
        },
        getEventRouteItems: function (routedEvent, originalSource, logicalSource) {
            var items = System.Linq.Enumerable.from(this.getRoutedEventHandlers(routedEvent)).select(Bridge.fn.bind(this, function (handler) {
                    return new System.Windows.EventRouteItem(handler, originalSource, logicalSource, this);
                }));

            if (routedEvent.getRoutingStrategy() === System.Windows.RoutingStrategy.Bubble || routedEvent.getRoutingStrategy() === System.Windows.RoutingStrategy.Tunnel) {
                var visualParent = Bridge.as(this.getVisualParent(), System.Windows.UIElement);

                if (visualParent != null) {
                    var parentItems = visualParent.getEventRouteItems(routedEvent, originalSource, !Bridge.referenceEquals(this.getLogicalParent(), visualParent) ? visualParent : logicalSource);

                    if (routedEvent.getRoutingStrategy() === System.Windows.RoutingStrategy.Bubble) {
                        items = System.Linq.Enumerable.from(items).concat(parentItems);
                    } else {
                        items = System.Linq.Enumerable.from(parentItems).concat(items);
                    }
                }
            }

            return System.Linq.Enumerable.from(items).toArray();
        },
        getRoutedEventHandlers: function (routedEvent) {
            return this.routedEventHandlersCache.getValue(routedEvent);
        },
        resolveRoutedEventHandlers: function (routedEvent) {
            return System.Linq.Enumerable.from(routedEvent.getClassHandlers(Bridge.getType(this))).concat(this.getRoutedEventHandlersOverride(routedEvent)).concat(this.routedEventHandlers.getValues(routedEvent)).toArray();
        },
        getRoutedEventHandlersOverride: function (routedEvent) {
            return System.Array.init(0, null, System.Windows.RoutedEventHandlerItem);
        },
        updateLayout: function () {
            System.Windows.LayoutManager.current.updateLayout();
        },
        measure: function (availableSize) {
            var $t, $t1;
            $t = System.Windows.Threading.Dispatcher.currentDispatcher.disableProcessing();
            try {
                $t1 = this.disableMeasureInvalidation();
                try {
                    if (this.getVisibility() === System.Windows.Visibility.Collapsed) {
                        this.setDesiredSize(System.Windows.Size.zero);
                    } else if (this.getIsMeasureValid() && System.Windows.SizeExtensions.isClose(this.getPreviousAvailableSize(), availableSize)) {
                        this.setDesiredSize(this.previousDesiredSize);
                    } else {
                        this.setDesiredSize(this.measureCore(availableSize));

                        this.setPreviousAvailableSize(availableSize);
                        this.previousDesiredSize = this.getDesiredSize();
                    }

                    this.setIsMeasureValid(true);
                    System.Windows.LayoutManager.current.removeMeasure(this);
                }
                finally {
                    if (Bridge.hasValue($t1)) {
                        $t1.dispose();
                    }
                }
            }
            finally {
                if (Bridge.hasValue($t)) {
                    $t.dispose();
                }
            }
        },
        measureCore: function (availableSize) {
            return System.Windows.Size.empty;
        },
        invalidateMeasure: function () {
            if (this.disableMeasureInvalidationRequests > 0 || !this.getIsMeasureValid()) {
                return;
            }

            this.setIsMeasureValid(false);
            System.Windows.LayoutManager.current.addMeasure(this);
        },
        invalidateParentMeasure: function () {
            if (this.getVisualParent() != null) {
                Bridge.cast(this.getVisualParent(), System.Windows.UIElement).invalidateMeasure();
            }
        },
        arrange: function (finalRect) {
            var $t, $t1;
            $t = System.Windows.Threading.Dispatcher.currentDispatcher.disableProcessing();
            try {
                $t1 = this.disableMeasureInvalidation();
                try {
                    if (this.getVisibility() !== System.Windows.Visibility.Visible || this.getIsArrangeValid() && System.Windows.RectExtensions.isClose(finalRect, this.getPreviousFinalRect())) {
                        System.Windows.LayoutManager.current.removeArrange(this);
                        return;
                    }

                    if (!this.getIsMeasureValid()) {
                        this.measure(finalRect.getSize());
                    }

                    this.arrangeCore(finalRect);

                    this.setPreviousFinalRect(finalRect);
                    this.setIsArrangeValid(true);
                    System.Windows.LayoutManager.current.removeArrange(this);
                    System.Windows.LayoutManager.current.addUpdatedElement(this);
                }
                finally {
                    if (Bridge.hasValue($t1)) {
                        $t1.dispose();
                    }
                }
            }
            finally {
                if (Bridge.hasValue($t)) {
                    $t.dispose();
                }
            }
        },
        arrangeCore: function (finalRect) {
            //
        },
        invalidateArrange: function () {
            if (!this.getIsArrangeValid()) {
                return;
            }

            this.setIsArrangeValid(false);
            System.Windows.LayoutManager.current.addArrange(this);
        },
        invalidateParentArrange: function () {
            if (this.getVisualParent() != null) {
                Bridge.cast(this.getVisualParent(), System.Windows.UIElement).invalidateArrange();
            }
        },
        disableMeasureInvalidation: function () {
            this.disableMeasureInvalidationRequests = (this.disableMeasureInvalidationRequests + 1) | 0;
            return this.disableMeasureInvalidationToken;
        },
        raiseLayoutUpdated: function () {
            this.onLayoutUpdated();
            Granular.Extensions.EventHandlerExtensions.raise$3(this.LayoutUpdated, this, Object.empty);
        },
        onLayoutUpdated: function () {
            //
        },
        onVisualParentChanged: function (oldVisualParent, newVisualParent) {
            this.coerceValue(System.Windows.UIElement.isVisibleProperty);
            this.coerceValue(System.Windows.UIElement.isEnabledProperty);
            this.coerceValue(System.Windows.UIElement.isHitTestVisibleProperty);

            this.setInheritanceParent$1();

            if (oldVisualParent != null) {
                Bridge.cast(oldVisualParent, System.Windows.UIElement).invalidateMeasure();
            }

            if (newVisualParent != null) {
                Bridge.cast(newVisualParent, System.Windows.UIElement).invalidateMeasure();
            }
        },
        onLogicalParentChanged: function (oldLogicalParent, newLogicalParent) {
            //
        },
        setInheritanceParent$1: function () {
            this.setInheritanceParent(this.getLogicalParent() || this.getVisualParent());
        },
        setAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.setClocks(animationClocks, layerOwner);
        },
        addAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.addClocks(animationClocks, layerOwner);
        },
        removeAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.removeClocks(animationClocks, layerOwner);
        },
        getInitializedAnimationExpression: function (dependencyProperty) {
            var entry = this.getValueEntry(dependencyProperty);
            var animationExpression = Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getAnimationValue(entry, false), System.Windows.Media.Animation.AnimationExpression);

            if (animationExpression == null) {
                animationExpression = new System.Windows.Media.Animation.AnimationExpression(this, dependencyProperty);

                System.Windows.DependencyPropertyValueEntryExtensions.setAnimationValue(entry, animationExpression);
            }

            return animationExpression;
        },
        getHitTestBoundsOverride: function () {
            if (!this.getIsHitTestVisible() || !this.getIsVisible() || !this.getIsEnabled()) {
                return System.Windows.Rect.empty;
            }

            return System.Windows.Media.Visual.prototype.getHitTestBoundsOverride.call(this);
        },
        hitTest: function (position) {
            if (!System.Windows.RectExtensions.contains(this.getHitTestBounds(), position)) {
                return null;
            }

            var relativePosition = System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.getVisualTransform()) ? System.Windows.Point.op_Subtraction(position, this.getVisualOffset()) : System.Windows.Media.Matrix.op_Multiply$1((System.Windows.Point.op_Subtraction(position, this.getVisualOffset())), this.getVisualTransform().getInverse());

            for (var i = (this.getVisualChildren().getCount() - 1) | 0; i >= 0; i = (i - 1) | 0) {
                var childHit = Bridge.cast(this.getVisualChildren().get(i), System.Windows.UIElement).hitTest(relativePosition);

                if (childHit != null) {
                    return childHit;
                }
            }

            return this.hitTestOverride(relativePosition) ? this : null;
        },
        hitTestOverride: function (position) {
            return false;
        },
        focus: function () {
            if (!this.getIsFocused() && this.getFocusable()) {
                this.focus$1 = Granular.Disposable.combine(System.Windows.Input.Keyboard.focus(this), System.Windows.Input.FocusManager.focus(this));
            }
        },
        clearFocus: function () {
            if (this.focus$1 != null) {
                this.focus$1.System$IDisposable$dispose();
                this.focus$1 = null;
            }
        },
        setAnimatableRootClock: function (animatableRootClock) {
            if (this.animatableRootClock != null) {
                throw new Granular.Exception("AnimatableRootClock was already initialized");
            }

            this.animatableRootClock = animatableRootClock;
        },
        forceDefaultValueInheritance: function (e) {
            // clear modified value if it's equal to a default value that should be inherited
            if (Granular.Compatibility.EqualityComparer.default.equals2(e.getNewValue(), e.getProperty().getMetadata(Bridge.getType(this)).getDefaultValue()) && !this.getValueSource(e.getProperty()).getIsExpression()) {
                this.clearValue(e.getProperty());
            }
        },
        onVisibilityChanged: function (e) {
            this.setDesiredSize(this.getVisibility() === System.Windows.Visibility.Collapsed ? System.Windows.Size.zero : this.previousDesiredSize);

            this.setIsVisible(this.getVisibility() === System.Windows.Visibility.Visible);
        },
        onIsVisibleChanged: function (e) {
            this.clearFocus();

            if (this.animatableRootClock != null) {
                // add or remove animation clocks from the global root clock
                this.animatableRootClock.setIsConnected(this.getIsVisible());
            }

            this.setVisualIsVisible(this.getIsVisible());

            this.coerceChildrenInheritedValue(System.Windows.UIElement.isVisibleProperty);
            this.invalidateHitTestBounds();
        },
        onIsEnabledChanged: function (e) {
            this.clearFocus();

            this.coerceChildrenInheritedValue(System.Windows.UIElement.isEnabledProperty);
            this.invalidateHitTestBounds();
        },
        onIsHitTestVisibleChanged: function (e) {
            this.setVisualIsHitTestVisible(this.getIsHitTestVisible());

            this.coerceChildrenInheritedValue(System.Windows.UIElement.isHitTestVisibleProperty);
            this.invalidateHitTestBounds();
        },
        onClipToBoundsChanged: function (e) {
            this.setVisualClipToBounds(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
        },
        coerceIsVisible: function (value) {
            return value && (this.getVisualParent() != null ? Bridge.cast(this.getVisualParent(), System.Windows.UIElement).getIsVisible() : this.getIsRootElement());
        },
        onRenderTransformChanged: function (e) {
            this.invalidateVisualTransform();
        },
        onRenderTransformOriginChanged: function (e) {
            if (System.Windows.Media.TransformExtensions.isNullOrIdentity(this.getRenderTransform())) {
                return;
            }

            this.invalidateVisualTransform();
        },
        onVisualBoundsChanged: function () {
            if (System.Windows.Media.TransformExtensions.isNullOrIdentity(this.getRenderTransform())) {
                return;
            }

            this.invalidateVisualTransform();
        },
        getVisualTransformOverride: function () {
            if (System.Windows.Media.TransformExtensions.isNullOrIdentity(this.getRenderTransform())) {
                return System.Windows.Media.Matrix.identity;
            }

            var offsetX = this.getRenderTransformOrigin().getX() * this.getRenderSize().getWidth();
            var offsetY = this.getRenderTransformOrigin().getY() * this.getRenderSize().getHeight();

            return System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix.translationMatrix(-offsetX, -offsetY), this.getRenderTransform().getValue$5()), System.Windows.Media.Matrix.translationMatrix(offsetX, offsetY));
        },
        coerceInheritedValue: function (dependencyProperty, value) {
            return this.getVisualParent() != null ? value && System.Nullable.getValue(Bridge.cast(this.getVisualParent().getValue(dependencyProperty), Boolean)) : value;
        },
        coerceChildrenInheritedValue: function (dependencyProperty) {
            var $t;
            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.coerceValue(dependencyProperty);
            }
        },
        onFocusableChanged: function (e) {
            this.clearFocus();
        },
        System$Windows$IInputElement$getPathFromRoot: function () {
            var path = new (System.Collections.Generic.List$1(System.Windows.IInputElement))();

            var element = this;

            while (element != null) {
                path.add(Bridge.cast(element, System.Windows.IInputElement));
                element = element.getVisualParent();
            }

            path.reverse();

            return path;
        },
        System$Windows$IInputElement$getRelativePosition: function (absolutePosition) {
            return this.pointFromRoot(absolutePosition);
        },
        onMouseEnter: function (e) {
            //
        },
        onMouseLeave: function (e) {
            //
        },
        onQueryCursor: function (e) {
            //
        },
        onPreviewMouseMove: function (e) {
            //
        },
        onPreviewMouseDown: function (e) {
            //
        },
        onPreviewMouseUp: function (e) {
            //
        },
        onPreviewMouseWheel: function (e) {
            //
        },
        onMouseMove: function (e) {
            //
        },
        onMouseDown: function (e) {
            //
        },
        onMouseUp: function (e) {
            //
        },
        onMouseWheel: function (e) {
            //
        },
        onGotKeyboardFocus: function (e) {
            //
        },
        onLostKeyboardFocus: function (e) {
            //
        },
        onPreviewKeyDown: function (e) {
            //
        },
        onPreviewKeyUp: function (e) {
            //
        },
        onKeyDown: function (e) {
            //
        },
        onKeyUp: function (e) {
            //
        },
        onGotFocus: function (e) {
            //
        },
        onLostFocus: function (e) {
            //
        }
    });

    Bridge.ns("System.Windows.UIElement", $asm.$);

    Bridge.apply($asm.$.System.Windows.UIElement, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onQueryCursor(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewMouseMove(e);
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewMouseDown(e);
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewMouseUp(e);
        },
        f5: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewMouseWheel(e);
        },
        f6: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onMouseMove(e);
        },
        f7: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onMouseDown(e);
        },
        f8: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onMouseUp(e);
        },
        f9: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onMouseWheel(e);
        },
        f10: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewKeyDown(e);
        },
        f11: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onPreviewKeyUp(e);
        },
        f12: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onKeyDown(e);
        },
        f13: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onKeyUp(e);
        },
        f14: function (sender, e) {
            (Bridge.as(sender, System.Windows.UIElement)).setVisualOpacity(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Double)));
        },
        f15: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onVisibilityChanged(e);
        },
        f16: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onIsVisibleChanged(e);
        },
        f17: function (sender, value) {
            return Bridge.cast(sender, System.Windows.UIElement).coerceIsVisible(System.Nullable.getValue(Bridge.cast(value, Boolean)));
        },
        f18: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onIsEnabledChanged(e);
        },
        f19: function (sender, value) {
            return Bridge.cast(sender, System.Windows.UIElement).coerceInheritedValue(System.Windows.UIElement.isEnabledProperty, System.Nullable.getValue(Bridge.cast(value, Boolean)));
        },
        f20: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onIsHitTestVisibleChanged(e);
        },
        f21: function (sender, value) {
            return Bridge.cast(sender, System.Windows.UIElement).coerceInheritedValue(System.Windows.UIElement.isHitTestVisibleProperty, System.Nullable.getValue(Bridge.cast(value, Boolean)));
        },
        f22: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onClipToBoundsChanged(e);
        },
        f23: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onFocusableChanged(e);
        },
        f24: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onRenderTransformChanged(e);
        },
        f25: function (sender, e) {
            Bridge.cast(sender, System.Windows.UIElement).onRenderTransformOriginChanged(e);
        },
        f26: function (routedEvent) {
            return routedEvent.getStringKey();
        },
        f27: function () {
            Bridge.identity(this.disableMeasureInvalidationRequests, (this.disableMeasureInvalidationRequests = (this.disableMeasureInvalidationRequests - 1) | 0));
        }
    });

    Bridge.define("System.Windows.Controls.ColumnDefinition", {
        inherits: [System.Windows.Freezable,System.Windows.Controls.IDefinitionBase],
        statics: {
            widthProperty: null,
            minWidthProperty: null,
            maxWidthProperty: null,
            actualWidthPropertyKey: null,
            actualWidthProperty: null,
            config: {
                init: function () {
                    this.widthProperty = System.Windows.DependencyProperty.register("Width", System.Windows.GridLength, System.Windows.Controls.ColumnDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.GridLength.star));
                    this.minWidthProperty = System.Windows.DependencyProperty.register("MinWidth", System.Double, System.Windows.Controls.ColumnDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor8(0.0));
                    this.maxWidthProperty = System.Windows.DependencyProperty.register("MaxWidth", System.Double, System.Windows.Controls.ColumnDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor1(Number.POSITIVE_INFINITY));
                    this.actualWidthPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ActualWidth", System.Double, System.Windows.Controls.ColumnDefinition, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.actualWidthProperty = System.Windows.Controls.ColumnDefinition.actualWidthPropertyKey.getDependencyProperty();
                }
            }
        },
        actualWidthValueEntry: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Freezable.ctor.call(this);
            this.actualWidthValueEntry = this.getValueEntry$1(System.Windows.Controls.ColumnDefinition.actualWidthPropertyKey);
        },
        getWidth: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ColumnDefinition.widthProperty), System.Windows.GridLength);
        },
        setWidth: function (value) {
            this.setValue(System.Windows.Controls.ColumnDefinition.widthProperty, value);
        },
        getMinWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ColumnDefinition.minWidthProperty), System.Double));
        },
        setMinWidth: function (value) {
            this.setValue(System.Windows.Controls.ColumnDefinition.minWidthProperty, value);
        },
        getMaxWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ColumnDefinition.maxWidthProperty), System.Double));
        },
        setMaxWidth: function (value) {
            this.setValue(System.Windows.Controls.ColumnDefinition.maxWidthProperty, value);
        },
        getActualWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.actualWidthValueEntry.System$Windows$IDependencyPropertyValueEntry$getValue(), System.Double));
        },
        setActualWidth: function (value) {
            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.actualWidthValueEntry, System.Windows.BaseValueSource.Local, value);
        },
        System$Windows$Controls$IDefinitionBase$getActualLength: function () {
            return this.getActualWidth();
        },
        System$Windows$Controls$IDefinitionBase$setActualLength: function (value) {
            this.setActualWidth(value);
        },
        System$Windows$Controls$IDefinitionBase$getMinLength: function () {
            return this.getMinWidth();
        },
        System$Windows$Controls$IDefinitionBase$getMaxLength: function () {
            return this.getMaxWidth();
        },
        System$Windows$Controls$IDefinitionBase$getLength: function () {
            return this.getWidth();
        }
    });

    Bridge.define("System.Windows.Controls.ControlTemplate", {
        inherits: [System.Windows.FrameworkTemplate],
        targetType: null,
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkTemplate.ctor.call(this);
            //
        },
        getTargetType: function () {
            return this.targetType;
        },
        setTargetType: function (value) {
            if (Bridge.referenceEquals(this.targetType, value)) {
                return;
            }

            this.targetType = value;
        }
    });

    Bridge.define("System.Windows.Controls.ItemsPanelTemplate", {
        inherits: [System.Windows.FrameworkTemplate]
    });

    Bridge.define("System.Windows.Controls.RowDefinition", {
        inherits: [System.Windows.Freezable,System.Windows.Controls.IDefinitionBase],
        statics: {
            heightProperty: null,
            minHeightProperty: null,
            maxHeightProperty: null,
            actualHeightPropertyKey: null,
            actualHeightProperty: null,
            config: {
                init: function () {
                    this.heightProperty = System.Windows.DependencyProperty.register("Height", System.Windows.GridLength, System.Windows.Controls.RowDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.GridLength.star));
                    this.minHeightProperty = System.Windows.DependencyProperty.register("MinHeight", System.Double, System.Windows.Controls.RowDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor8(0.0));
                    this.maxHeightProperty = System.Windows.DependencyProperty.register("MaxHeight", System.Double, System.Windows.Controls.RowDefinition, new System.Windows.FrameworkPropertyMetadata.$ctor1(Number.POSITIVE_INFINITY));
                    this.actualHeightPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ActualHeight", System.Double, System.Windows.Controls.RowDefinition, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.actualHeightProperty = System.Windows.Controls.RowDefinition.actualHeightPropertyKey.getDependencyProperty();
                }
            }
        },
        actualHeightValueEntry: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Freezable.ctor.call(this);
            this.actualHeightValueEntry = this.getValueEntry$1(System.Windows.Controls.RowDefinition.actualHeightPropertyKey);
        },
        getHeight: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.RowDefinition.heightProperty), System.Windows.GridLength);
        },
        setHeight: function (value) {
            this.setValue(System.Windows.Controls.RowDefinition.heightProperty, value);
        },
        getMinHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.RowDefinition.minHeightProperty), System.Double));
        },
        setMinHeight: function (value) {
            this.setValue(System.Windows.Controls.RowDefinition.minHeightProperty, value);
        },
        getMaxHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.RowDefinition.maxHeightProperty), System.Double));
        },
        setMaxHeight: function (value) {
            this.setValue(System.Windows.Controls.RowDefinition.maxHeightProperty, value);
        },
        getActualHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.actualHeightValueEntry.System$Windows$IDependencyPropertyValueEntry$getValue(), System.Double));
        },
        setActualHeight: function (value) {
            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.actualHeightValueEntry, System.Windows.BaseValueSource.Local, value);
        },
        System$Windows$Controls$IDefinitionBase$getActualLength: function () {
            return this.getActualHeight();
        },
        System$Windows$Controls$IDefinitionBase$setActualLength: function (value) {
            this.setActualHeight(value);
        },
        System$Windows$Controls$IDefinitionBase$getMinLength: function () {
            return this.getMinHeight();
        },
        System$Windows$Controls$IDefinitionBase$getMaxLength: function () {
            return this.getMaxHeight();
        },
        System$Windows$Controls$IDefinitionBase$getLength: function () {
            return this.getHeight();
        }
    });

    Bridge.define("System.Windows.Data.BindingExpression", {
        inherits: [System.Windows.IExpression,System.IDisposable],
        statics: {
            disconnectedItem: null,
            config: {
                init: function () {
                    this.disconnectedItem = new System.Windows.Data.NamedObject("BindingExpression.DisconnectedItem");
                }
            },
            createSourceObserver: function (target, source, relativeSource, elementName) {
                if (source != null) {
                    return new System.Windows.Data.StaticObservableValue(source);
                }

                if (relativeSource != null) {
                    return relativeSource.createSourceObserver(target);
                }

                if (!Granular.Extensions.StringExtensions.isNullOrEmpty(elementName)) {
                    return new System.Windows.Data.ScopeElementSourceObserver(target, elementName);
                }

                return new System.Windows.Data.DataContextSourceObserver(target);
            },
            getDefaultBindingMode: function (dependencyObject, dependencyProperty) {
                var FrameworkPropertyMetadata = Bridge.as(dependencyProperty.getMetadata(Bridge.getType(dependencyObject)), System.Windows.FrameworkPropertyMetadata);
                return FrameworkPropertyMetadata != null && FrameworkPropertyMetadata.getBindsTwoWayByDefault() ? System.Windows.Data.BindingMode.TwoWay : System.Windows.Data.BindingMode.OneWay;
            }
        },
        sourceObserver: null,
        sourceExpression: null,
        targetValue: null,
        isSourceUpdateMode: false,
        isTargetUpdateMode: false,
        disableSourceUpdate: null,
        disableTargetUpdate: null,
        config: {
            events: {
                ValueChanged: null
            },
            properties: {
                Target: null,
                TargetProperty: null,
                Path: null,
                Source: null,
                RelativeSource: null,
                ElementName: null,
                Mode: 0,
                UpdateSourceTrigger: 0,
                Converter: null,
                ConverterParameter: null,
                FallbackValue: null,
                TargetNullValue: null,
                Status: 0
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "dispose", "System$IDisposable$dispose",
            "setValue", "System$Windows$IExpression$setValue"
            ]
        },
        ctor: function (target, targetProperty, path, source, relativeSource, elementName, mode, updateSourceTrigger, converter, converterParameter, fallbackValue, targetNullValue) {
            if (source === void 0) { source = null; }
            if (relativeSource === void 0) { relativeSource = null; }
            if (elementName === void 0) { elementName = null; }
            if (mode === void 0) { mode = 3; }
            if (updateSourceTrigger === void 0) { updateSourceTrigger = 0; }
            if (converter === void 0) { converter = null; }
            if (converterParameter === void 0) { converterParameter = null; }
            if (fallbackValue === void 0) { fallbackValue = null; }
            if (targetNullValue === void 0) { targetNullValue = null; }

            this.$initialize();
            this.setTarget(target);
            this.setTargetProperty(targetProperty);
            this.setPath(path);
            this.setSource(source);
            this.setRelativeSource(relativeSource);
            this.setElementName(elementName);
            this.setMode(mode);
            this.setUpdateSourceTrigger(updateSourceTrigger);
            this.setConverter(converter);
            this.setConverterParameter(converterParameter);
            this.setFallbackValue(fallbackValue);
            this.setTargetNullValue(targetNullValue);

            this.setStatus(System.Windows.Data.BindingStatus.Inactive);

            this.disableSourceUpdate = new Granular.ReentrancyLock();
            this.disableTargetUpdate = new Granular.ReentrancyLock();

            this.targetValue = new System.Windows.Data.ObservableValue.$ctor1(this.getTarget().getValue(this.getTargetProperty()));
            this.targetValue.addValueChanged(Bridge.fn.cacheBind(this, this.onTargetValueChanged));

            var resolvedBindingMode = this.getMode() === System.Windows.Data.BindingMode.Default ? System.Windows.Data.BindingExpression.getDefaultBindingMode(this.getTarget(), this.getTargetProperty()) : this.getMode();

            this.isSourceUpdateMode = resolvedBindingMode === System.Windows.Data.BindingMode.TwoWay || resolvedBindingMode === System.Windows.Data.BindingMode.OneWayToSource;
            this.isTargetUpdateMode = resolvedBindingMode === System.Windows.Data.BindingMode.TwoWay || resolvedBindingMode === System.Windows.Data.BindingMode.OneWay;

            this.sourceObserver = System.Windows.Data.BindingExpression.createSourceObserver(this.getTarget(), this.getSource(), this.getRelativeSource(), this.getElementName());
            this.sourceExpression = new System.Windows.Data.ObservableExpression.$ctor1(this.sourceObserver, this.getPath() || System.Windows.PropertyPath.empty);

            // try to update the target (or the source on OneWayToSource)
            if (this.isTargetUpdateMode) {
                this.sourceExpression.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.BindingExpression.f1));
                this.updateTargetOnSourceChanged();
            } else if (this.isSourceUpdateMode) {
                this.sourceExpression.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.BindingExpression.f2));

                this.updateSourceOnTargetChanged();
            }

            if (this.getUpdateSourceTrigger() === System.Windows.Data.UpdateSourceTrigger.LostFocus && this.isSourceUpdateMode && Bridge.is(this.getTarget(), System.Windows.UIElement)) {
                Bridge.cast(this.getTarget(), System.Windows.UIElement).addLostFocus(Bridge.fn.cacheBind(this, this.onLostFocus));
            }
        },
        getValue: function () {
            return this.targetValue.getValue();
        },
        dispose: function () {
            this.sourceExpression.dispose();

            if (Bridge.is(this.sourceObserver, System.IDisposable)) {
                Bridge.cast(this.sourceObserver, System.IDisposable).System$IDisposable$dispose();
            }

            if (this.getUpdateSourceTrigger() === System.Windows.Data.UpdateSourceTrigger.LostFocus && this.isSourceUpdateMode && Bridge.is(this.getTarget(), System.Windows.UIElement)) {
                Bridge.cast(this.getTarget(), System.Windows.UIElement).removeLostFocus(Bridge.fn.cacheBind(this, this.onLostFocus));
            }

            this.setTarget(null);
            this.setTargetProperty(null);

            this.setStatus(System.Windows.Data.BindingStatus.Detached);
        },
        setValue: function (value) {
            this.targetValue.setBaseValue(value);
            return true;
        },
        updateTargetOnSourceChanged: function () {
            var $t;
            if (Granular.ReentrancyLock.op_Implicit(this.disableTargetUpdate)) {
                return;
            }

            $t = this.disableSourceUpdate.enter();
            try {
                this.updateTarget();
            }
            finally {
                if (Bridge.hasValue($t)) {
                    $t.dispose();
                }
            }
        },
        updateTarget: function () {
            var value = this.sourceExpression != null ? this.sourceExpression.getValue() : System.Windows.Data.ObservableValue.unsetValue;

            if (Bridge.referenceEquals(value, System.Windows.Data.ObservableValue.unsetValue) && this.getFallbackValue() != null) {
                value = this.getFallbackValue();
            } else if (value == null && this.getTargetNullValue() != null) {
                value = this.getTargetNullValue();
            } else if (!Bridge.referenceEquals(value, System.Windows.Data.ObservableValue.unsetValue) && this.getConverter() != null) {
                value = this.getConverter().System$Windows$Data$IValueConverter$convert(value, this.getTargetProperty().getPropertyType(), this.getConverterParameter());
            }

            this.targetValue.setBaseValue(value);

            this.setStatus(!Bridge.referenceEquals(value, System.Windows.Data.ObservableValue.unsetValue) ? System.Windows.Data.BindingStatus.Active : System.Windows.Data.BindingStatus.UpdateTargetError);
        },
        updateSourceOnTargetChanged: function () {
            var $t;
            if (Granular.ReentrancyLock.op_Implicit(this.disableSourceUpdate)) {
                return;
            }

            $t = this.disableTargetUpdate.enter();
            try {
                this.updateSource();
            }
            finally {
                if (Bridge.hasValue($t)) {
                    $t.dispose();
                }
            }
        },
        updateSource: function () {
            var convertedValue = this.getConverter() != null ? this.getConverter().System$Windows$Data$IValueConverter$convertBack(this.targetValue.getValue(), this.sourceExpression.getValueType(), this.getConverterParameter()) : this.targetValue.getValue();

            if (this.sourceExpression.trySetValue(convertedValue)) {
                this.setStatus(System.Windows.Data.BindingStatus.Active);
            } else {
                this.setStatus(System.Windows.Data.BindingStatus.UpdateSourceError);
            }
        },
        onTargetValueChanged: function (sender, oldValue, newValue) {
            if (this.getUpdateSourceTrigger() === System.Windows.Data.UpdateSourceTrigger.Default && this.isSourceUpdateMode) {
                this.updateSourceOnTargetChanged();
            }

            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        },
        onLostFocus: function (sender, e) {
            this.updateSourceOnTargetChanged();
        }
    });

    Bridge.ns("System.Windows.Data.BindingExpression", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.BindingExpression, {
        f1: function (sender, oldValue, newValue) {
            this.updateTargetOnSourceChanged();
        },
        f2: function (sender, oldValue, newValue) {
            if (this.getStatus() === System.Windows.Data.BindingStatus.UpdateSourceError && !Bridge.referenceEquals(this.sourceExpression.getValue(), System.Windows.Data.ObservableValue.unsetValue) && !Granular.ReentrancyLock.op_Implicit(this.disableTargetUpdate)) {
                // source was connected
                this.updateSourceOnTargetChanged();
            }
        }
    });

    Bridge.define("System.Windows.Data.ClrPropertyObserver", {
        inherits: [System.Windows.Data.IPropertyObserver,System.IDisposable],
        observableValue: null,
        propertyInfo: null,
        propertyGetMethod: null,
        propertySetMethod: null,
        index: null,
        currentPropertyNotifier: null,
        currentCollectionNotifier: null,
        baseValue: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "getValueType", "System$Windows$Data$IPropertyObserver$getValueType",
            "setBaseValue", "System$Windows$Data$IPropertyObserver$setBaseValue",
            "trySetValue", "System$Windows$Data$IPropertyObserver$trySetValue",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (propertyInfo, index) {
            this.$initialize();
            this.propertyInfo = propertyInfo;
            this.propertyGetMethod = System.Reflection.PropertyInfoExtensions.getGetMethod(propertyInfo);
            this.propertySetMethod = System.Reflection.PropertyInfoExtensions.getSetMethod(propertyInfo);
            this.index = index;

            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.ClrPropertyObserver.f1));
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        getValueType: function () {
            return this.propertyInfo.rt;
        },
        setBaseValue: function (baseValue) {
            this.baseValue = baseValue;
            this.registerNotifiers();
            this.observableValue.setBaseValue(this.getValue$1());
        },
        trySetValue: function (value) {
            if (System.Windows.Data.ObservableValue.isNullOrUnset(this.baseValue) || this.propertySetMethod == null) {
                return false;
            }

            Bridge.Reflection.midel(this.propertySetMethod, this.baseValue).apply(null, System.Linq.Enumerable.from(this.index).concat(System.Array.init([value], Object)).toArray());
            this.observableValue.setBaseValue(this.getValue$1());
            return true;
        },
        getValue$1: function () {
            if (System.Windows.Data.ObservableValue.isNullOrUnset(this.baseValue) || this.propertyGetMethod == null) {
                return System.Windows.Data.ObservableValue.unsetValue;
            }

            return Bridge.Reflection.midel(this.propertyGetMethod, this.baseValue).apply(null, System.Linq.Enumerable.from(this.index).toArray());
        },
        registerNotifiers: function () {
            if (this.currentPropertyNotifier != null) {
                this.currentPropertyNotifier.System$ComponentModel$INotifyPropertyChanged$removePropertyChanged(Bridge.fn.cacheBind(this, this.onNotifierPropertyChanged));
            }

            if (this.currentCollectionNotifier != null) {
                this.currentCollectionNotifier.Granular$Collections$INotifyCollectionChanged$removeCollectionChanged(Bridge.fn.cacheBind(this, this.onNotifierCollectionChanged));
            }

            this.currentPropertyNotifier = Bridge.as(this.baseValue, System.ComponentModel.INotifyPropertyChanged);

            if (System.Linq.Enumerable.from(this.index).any()) {
                this.currentCollectionNotifier = Bridge.as(this.baseValue, Granular.Collections.INotifyCollectionChanged);
            }

            if (this.currentPropertyNotifier != null) {
                this.currentPropertyNotifier.System$ComponentModel$INotifyPropertyChanged$addPropertyChanged(Bridge.fn.cacheBind(this, this.onNotifierPropertyChanged));
            }

            if (this.currentCollectionNotifier != null) {
                this.currentCollectionNotifier.Granular$Collections$INotifyCollectionChanged$addCollectionChanged(Bridge.fn.cacheBind(this, this.onNotifierCollectionChanged));
            }
        },
        onNotifierPropertyChanged: function (sender, e) {
            if (Bridge.referenceEquals(e.propertyName, this.propertyInfo.n)) {
                this.observableValue.setBaseValue(this.getValue$1());
            }
        },
        onNotifierCollectionChanged: function (sender, e) {
            this.observableValue.setBaseValue(this.getValue$1());
        },
        dispose: function () {
            if (this.currentPropertyNotifier != null) {
                this.currentPropertyNotifier.System$ComponentModel$INotifyPropertyChanged$removePropertyChanged(Bridge.fn.cacheBind(this, this.onNotifierPropertyChanged));
            }
        }
    });

    Bridge.ns("System.Windows.Data.ClrPropertyObserver", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.ClrPropertyObserver, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Data.DependencyPropertyObserver", {
        inherits: [System.Windows.Data.IPropertyObserver,System.IDisposable],
        observableValue: null,
        dependencyProperty: null,
        currentDependencyObject: null,
        baseValue: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "getValueType", "System$Windows$Data$IPropertyObserver$getValueType",
            "setBaseValue", "System$Windows$Data$IPropertyObserver$setBaseValue",
            "trySetValue", "System$Windows$Data$IPropertyObserver$trySetValue",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (dependencyProperty) {
            this.$initialize();
            this.dependencyProperty = dependencyProperty;

            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.DependencyPropertyObserver.f1));
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        getValueType: function () {
            return this.dependencyProperty.getPropertyType();
        },
        setBaseValue: function (baseValue) {
            this.baseValue = baseValue;
            this.registerDependencyObject();
            this.observableValue.setBaseValue(this.getValue$1());
        },
        trySetValue: function (value) {
            var dependencyObject = Bridge.as(this.baseValue, System.Windows.DependencyObject);

            if (dependencyObject == null || this.dependencyProperty.getIsReadOnly()) {
                return false;
            }

            dependencyObject.setValue(this.dependencyProperty, value);
            this.observableValue.setBaseValue(this.getValue$1());
            return true;
        },
        getValue$1: function () {
            var dependencyObject = Bridge.as(this.baseValue, System.Windows.DependencyObject);
            return dependencyObject != null ? dependencyObject.getValue(this.dependencyProperty) : System.Windows.Data.ObservableValue.unsetValue;
        },
        registerDependencyObject: function () {
            if (this.currentDependencyObject != null) {
                this.currentDependencyObject.removePropertyChanged(Bridge.fn.cacheBind(this, this.onDependencyObjectPropertyChanged));
            }

            this.currentDependencyObject = Bridge.as(this.baseValue, System.Windows.DependencyObject);

            if (this.currentDependencyObject != null) {
                this.currentDependencyObject.addPropertyChanged(Bridge.fn.cacheBind(this, this.onDependencyObjectPropertyChanged));
            }
        },
        onDependencyObjectPropertyChanged: function (sender, e) {
            if (Bridge.referenceEquals(e.getProperty(), this.dependencyProperty)) {
                this.observableValue.setBaseValue(this.getValue$1());
            }
        },
        dispose: function () {
            if (this.currentDependencyObject != null) {
                this.currentDependencyObject.removePropertyChanged(Bridge.fn.cacheBind(this, this.onDependencyObjectPropertyChanged));
            }
        }
    });

    Bridge.ns("System.Windows.Data.DependencyPropertyObserver", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.DependencyPropertyObserver, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Data.FindAncestorSourceObserver", {
        inherits: [System.Windows.Data.ContextSourceObserver],
        statics: {
            getAncestor: function (target, ancestorType, ancestorLevel) {
                var $t;
                if (!(Bridge.is(target, System.Windows.IContextElement))) {
                    return System.Windows.Data.ObservableValue.unsetValue;
                }

                var contextElement = Bridge.cast(target, System.Windows.IContextElement).System$Windows$IContextElement$getContextParent();
                var level = (ancestorLevel - 1) | 0;

                while (contextElement != null && (level > 0 || ancestorType != null && !Bridge.Reflection.isInstanceOfType(contextElement, ancestorType))) {
                    if (ancestorType == null || Bridge.Reflection.isInstanceOfType(contextElement, ancestorType)) {
                        level = (level - 1) | 0;
                    }

                    contextElement = contextElement.System$Windows$IContextElement$getContextParent();
                }

                return ($t = contextElement, $t != null ? $t : System.Windows.Data.ObservableValue.unsetValue);
            }
        },
        target$1: null,
        ancestorType: null,
        ancestorLevel: 0,
        ctor: function (target, ancestorType, ancestorLevel) {
            this.$initialize();
            System.Windows.Data.ContextSourceObserver.ctor.call(this, target, System.Windows.Data.FindAncestorSourceObserver.getAncestor(target, ancestorType, ancestorLevel));
            this.target$1 = target;
            this.ancestorType = ancestorType;
            this.ancestorLevel = ancestorLevel;
        },
        getBaseValue: function () {
            return System.Windows.Data.FindAncestorSourceObserver.getAncestor(this.target$1, this.ancestorType, this.ancestorLevel);
        }
    });

    Bridge.define("System.Windows.Data.IndexPropertyObserver", {
        inherits: [System.Windows.Data.IPropertyObserver,System.IDisposable],
        statics: {
            createBaseObserver: function (containingType, propertyName) {
                if (propertyName.getIsEmpty()) {
                    return null;
                }

                containingType = System.Windows.Markup.XamlNameExtensions.resolveContainingType(propertyName, containingType);

                var dependencyProperty = System.Windows.DependencyProperty.getProperty(containingType, propertyName.getMemberName());
                if (dependencyProperty != null) {
                    return new System.Windows.Data.DependencyPropertyObserver(dependencyProperty);
                }

                var propertyInfo = Granular.Extensions.TypeExtensions.getInstanceProperty(containingType, propertyName.getMemberName());
                if (propertyInfo != null && !System.Linq.Enumerable.from((propertyInfo.ipi || [])).any()) {
                    return new System.Windows.Data.ClrPropertyObserver(propertyInfo, System.Array.init(0, null, Object));
                }

                return null;
            }
        },
        baseObserver: null,
        indexerObserver: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "getValueType", "System$Windows$Data$IPropertyObserver$getValueType",
            "dispose", "System$IDisposable$dispose",
            "trySetValue", "System$Windows$Data$IPropertyObserver$trySetValue",
            "setBaseValue", "System$Windows$Data$IPropertyObserver$setBaseValue"
            ]
        },
        ctor: function (propertyContainingType, propertyPathElement, namespaces) {
            this.$initialize();
            this.baseObserver = System.Windows.Data.IndexPropertyObserver.createBaseObserver(propertyContainingType, propertyPathElement.getPropertyName());

            var indexPropertyInfo = this.baseObserver != null ? Granular.Extensions.TypeExtensions.getDefaultIndexProperty(this.baseObserver.System$Windows$Data$IPropertyObserver$getValueType()) : propertyPathElement.getPropertyName().getIsEmpty() ? Granular.Extensions.TypeExtensions.getDefaultIndexProperty(propertyContainingType) : Granular.Extensions.TypeExtensions.getInstanceProperty(propertyContainingType, propertyPathElement.getPropertyName().getMemberName());

            if (indexPropertyInfo == null) {
                throw new Granular.Exception("Property \"{0}.{1}\" does not have an indexer", [Bridge.Reflection.getTypeName(propertyContainingType), propertyPathElement.getPropertyName().getMemberName()]);
            }

            if (System.Linq.Enumerable.from((indexPropertyInfo.ipi || [])).count() !== System.Linq.Enumerable.from(propertyPathElement.getIndexRawValues()).count()) {
                throw new Granular.Exception("Invalid number of index parameters for \"{0}.{1}\"", [Bridge.Reflection.getTypeName(indexPropertyInfo.td), indexPropertyInfo.n]);
            }

            this.indexerObserver = new System.Windows.Data.ClrPropertyObserver(indexPropertyInfo, propertyPathElement.parseIndexValues(indexPropertyInfo));
            this.indexerObserver.System$Windows$Data$IObservableValue$addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.IndexPropertyObserver.f1));

            if (this.baseObserver != null) {
                this.baseObserver.System$Windows$Data$IObservableValue$addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Data.IndexPropertyObserver.f2));
                this.indexerObserver.System$Windows$Data$IPropertyObserver$setBaseValue(this.baseObserver.System$Windows$Data$IObservableValue$getValue());
            }
        },
        getValue: function () {
            return this.indexerObserver.System$Windows$Data$IObservableValue$getValue();
        },
        getValueType: function () {
            return this.indexerObserver.System$Windows$Data$IPropertyObserver$getValueType();
        },
        dispose: function () {
            if (Bridge.is(this.baseObserver, System.IDisposable)) {
                Bridge.cast(this.baseObserver, System.IDisposable).System$IDisposable$dispose();
            }

            if (Bridge.is(this.indexerObserver, System.IDisposable)) {
                Bridge.cast(this.indexerObserver, System.IDisposable).System$IDisposable$dispose();
            }
        },
        trySetValue: function (value) {
            return this.indexerObserver != null ? this.indexerObserver.System$Windows$Data$IPropertyObserver$trySetValue(value) : false;
        },
        setBaseValue: function (baseValue) {
            if (this.baseObserver != null) {
                this.baseObserver.System$Windows$Data$IPropertyObserver$setBaseValue(baseValue);
            } else {
                this.indexerObserver.System$Windows$Data$IPropertyObserver$setBaseValue(baseValue);
            }
        }
    });

    Bridge.ns("System.Windows.Data.IndexPropertyObserver", $asm.$);

    Bridge.apply($asm.$.System.Windows.Data.IndexPropertyObserver, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        },
        f2: function (sender, oldValue, newValue) {
            this.indexerObserver.System$Windows$Data$IPropertyObserver$setBaseValue(this.baseObserver.System$Windows$Data$IObservableValue$getValue());
        }
    });

    Bridge.define("System.Windows.Data.ScopeElementSourceObserver", {
        inherits: [System.Windows.Data.ContextSourceObserver],
        statics: {
            getScopeElement: function (target, elementName) {
                var nameScope = System.Windows.NameScope.getContainingNameScope(target);
                return nameScope != null ? nameScope.System$Windows$INameScope$findName(elementName) : System.Windows.Data.ObservableValue.unsetValue;
            }
        },
        target$1: null,
        elementName: null,
        ctor: function (target, elementName) {
            this.$initialize();
            System.Windows.Data.ContextSourceObserver.ctor.call(this, target, System.Windows.Data.ScopeElementSourceObserver.getScopeElement(target, elementName));
            this.target$1 = target;
            this.elementName = elementName;
        },
        getBaseValue: function () {
            return System.Windows.Data.ScopeElementSourceObserver.getScopeElement(this.target$1, this.elementName);
        }
    });

    Bridge.define("System.Windows.Data.TemplatedParentSourceObserver", {
        inherits: [System.Windows.Data.ContextSourceObserver],
        statics: {
            getTemplatedParent: function (target) {
                while (!(Bridge.is(target, System.Windows.FrameworkElement)) && Bridge.is(target, System.Windows.IContextElement)) {
                    target = Bridge.cast(target, System.Windows.IContextElement).System$Windows$IContextElement$getContextParent();
                }

                return Bridge.is(target, System.Windows.FrameworkElement) ? Bridge.cast(target, System.Windows.FrameworkElement).getTemplatedParent() : System.Windows.Data.ObservableValue.unsetValue;
            }
        },
        target$1: null,
        ctor: function (target) {
            this.$initialize();
            System.Windows.Data.ContextSourceObserver.ctor.call(this, target, System.Windows.Data.TemplatedParentSourceObserver.getTemplatedParent(target));
            this.target$1 = target;
        },
        getBaseValue: function () {
            return System.Windows.Data.TemplatedParentSourceObserver.getTemplatedParent(this.target$1);
        }
    });

    Bridge.define("System.Windows.DataTemplate", {
        inherits: [System.Windows.FrameworkTemplate],
        dataType: null,
        key: null,
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkTemplate.ctor.call(this);
            //
        },
        getDataType: function () {
            return this.dataType;
        },
        setDataType: function (value) {
            if (Bridge.referenceEquals(this.dataType, value)) {
                return;
            }

            this.dataType = value;
        },
        getKey: function () {
            var $t;
            return ($t = this.key, $t != null ? $t : new System.Windows.TemplateKey(this.getDataType()));
        },
        setKey: function (value) {
            this.key = value;
        }
    });

    Bridge.define("System.Windows.TriggerBase", {
        inherits: [System.Windows.Freezable,System.Windows.ITrigger]
    });

    Bridge.define("System.Windows.DataTriggerCondition", {
        inherits: [System.Windows.Freezable,System.Windows.IDataTriggerCondition,System.IDisposable],
        statics: {
            valueProperty: null,
            config: {
                init: function () {
                    this.valueProperty = System.Windows.DependencyProperty.register("Value", Object, System.Windows.DataTriggerCondition, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.DataTriggerCondition.f1));
                }
            },
            getResolvedValue: function (value, type) {
                if (Bridge.Reflection.isInstanceOfType(value, type)) {
                    return value;
                }

                var resolvedValue = { };
                if (System.Windows.Markup.TypeConverter.tryConvertValue(value.toString(), type, System.Windows.Markup.XamlNamespaces.empty, null, resolvedValue)) {
                    return resolvedValue.v;
                }

                return null;
            },
            register: function (element, expressionProvider, value) {
                var condition = new System.Windows.DataTriggerCondition(element, expressionProvider, value);
                condition.register();
                return condition;
            }
        },
        isMatched: false,
        element: null,
        expressionProvider: null,
        value: null,
        resolvedValue: null,
        isDisposed: false,
        config: {
            events: {
                IsMatchedChanged: null
            },
            alias: [
            "addIsMatchedChanged", "System$Windows$IDataTriggerCondition$addIsMatchedChanged",
            "removeIsMatchedChanged", "System$Windows$IDataTriggerCondition$removeIsMatchedChanged",
            "getIsMatched", "System$Windows$IDataTriggerCondition$getIsMatched",
            "setIsMatched", "System$Windows$IDataTriggerCondition$setIsMatched",
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (element, expressionProvider, value) {
            this.$initialize();
            System.Windows.Freezable.ctor.call(this);
            this.element = element;
            this.expressionProvider = expressionProvider;
            this.value = value;
        },
        getIsMatched: function () {
            return this.isMatched;
        },
        setIsMatched: function (value) {
            if (this.isMatched === value) {
                return;
            }

            this.isMatched = value;
            Granular.Extensions.EventHandlerExtensions.raise$2(this.IsMatchedChanged, this);
        },
        register: function () {
            this.trySetContextParent(this.element);
            this.setValue(System.Windows.DataTriggerCondition.valueProperty, this.expressionProvider);
        },
        dispose: function () {
            this.isDisposed = true;
            this.trySetContextParent(null);
            this.clearValue(System.Windows.DataTriggerCondition.valueProperty);
        },
        onValueChanged: function (e) {
            if (this.isDisposed) {
                return;
            }

            if (e.getNewValue() != null && this.value != null) {
                this.resolvedValue = System.Windows.DataTriggerCondition.getResolvedValue(this.value, Bridge.getType(e.getNewValue()));
                this.value = null;
            }

            this.setIsMatched(Granular.Compatibility.EqualityComparer.default.equals2(e.getNewValue(), this.resolvedValue));
        }
    });

    Bridge.ns("System.Windows.DataTriggerCondition", $asm.$);

    Bridge.apply($asm.$.System.Windows.DataTriggerCondition, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.DataTriggerCondition).onValueChanged(e);
        }
    });

    Bridge.define("System.Windows.DependencyPropertyValueEntry.IndexedObservableValue", {
        inherits: [System.Windows.Data.ObservableValue],
        config: {
            properties: {
                Index: 0
            }
        },
        ctor: function (index, baseValue) {
            this.$initialize();
            System.Windows.Data.ObservableValue.$ctor1.call(this, baseValue);
            this.setIndex(index);
        }
    });

    Bridge.define("System.Windows.Media.Animation.Animatable", {
        inherits: [System.Windows.Freezable,System.Windows.Media.Animation.IAnimatable],
        config: {
            properties: {
                RootClock: null
            },
            alias: [
            "getRootClock", "System$Windows$Media$Animation$IAnimatable$getRootClock",
            "setRootClock", "System$Windows$Media$Animation$IAnimatable$setRootClock",
            "setAnimationClocks", "System$Windows$Media$Animation$IAnimatable$setAnimationClocks",
            "addAnimationClocks", "System$Windows$Media$Animation$IAnimatable$addAnimationClocks",
            "removeAnimationClocks", "System$Windows$Media$Animation$IAnimatable$removeAnimationClocks"
            ]
        },
        setAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.setClocks(animationClocks, layerOwner);
        },
        addAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.addClocks(animationClocks, layerOwner);
        },
        removeAnimationClocks: function (dependencyProperty, animationClocks, layerOwner) {
            var animationExpression = this.getInitializedAnimationExpression(dependencyProperty);
            animationExpression.removeClocks(animationClocks, layerOwner);
        },
        getInitializedAnimationExpression: function (dependencyProperty) {
            var entry = this.getValueEntry(dependencyProperty);
            var animationExpression = Bridge.as(System.Windows.DependencyPropertyValueEntryExtensions.getAnimationValue(entry, false), System.Windows.Media.Animation.AnimationExpression);

            if (animationExpression == null) {
                animationExpression = new System.Windows.Media.Animation.AnimationExpression(this, dependencyProperty);

                System.Windows.DependencyPropertyValueEntryExtensions.setAnimationValue(entry, animationExpression);
            }

            return animationExpression;
        },
        onInheritanceParentChanged: function (oldInheritanceParent, newInheritanceParent) {
            System.Windows.Freezable.prototype.onInheritanceParentChanged.call(this, oldInheritanceParent, newInheritanceParent);

            this.setRootClock(Bridge.is(newInheritanceParent, System.Windows.Media.Animation.IAnimatable) ? Bridge.cast(newInheritanceParent, System.Windows.Media.Animation.IAnimatable).System$Windows$Media$Animation$IAnimatable$getRootClock() : null);
        }
    });

    Bridge.define("System.Windows.FrameworkContentElement", {
        inherits: [System.Windows.ContentElement]
    });

    Bridge.define("System.Windows.FreezableCollection$1", function (T) { return {
        inherits: [System.Windows.Freezable,Granular.Collections.IObservableCollection$1(T),System.Collections.Generic.IList$1(T)],
        collection: null,
        config: {
            events: {
                CollectionChanged: null
            },
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "getCount", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$getCount",
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$getIsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator"
            ]
        },
        ctor: function () {
            System.Windows.FreezableCollection$1(T).$ctor1.call(this, System.Array.init(0, function (){
                return Bridge.getDefaultValue(T);
            }, T));
            //
        },
        $ctor1: function (collection) {
            this.$initialize();
            System.Windows.Freezable.ctor.call(this);
            var $t;
            this.collection = new (Granular.Collections.ObservableCollection$1(T)).$ctor1(collection);
            this.collection.addCollectionChanged(Bridge.fn.cacheBind(this, this.onCollectionChanged));

            $t = Bridge.getEnumerator(collection, T);
            while ($t.moveNext()) {
                var value = $t.getCurrent();
                if (Bridge.is(value, System.Windows.IContextElement)) {
                    Bridge.cast(value, System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(this);
                }

                if (Bridge.is(value, System.Windows.INotifyChanged)) {
                    Bridge.cast(value, System.Windows.INotifyChanged).System$Windows$INotifyChanged$addChanged(Bridge.fn.cacheBind(this, this.onItemChanged));
                }
            }
    },
    getCount: function () {
        return this.collection.getCount();
    },
    getItem: function (index) {
        return this.collection.getItem(index);
    },
    setItem: function (index, value) {
        this.collection.setItem(index, value);
    },
    getIsReadOnly: function () {
        return this.collection.getIsReadOnly();
    },
    onCollectionChanged: function (sender, e) {
        var $t, $t1;
        $t = Bridge.getEnumerator(e.getOldItems(), Object);
        while ($t.moveNext()) {
            var value = Bridge.cast($t.getCurrent(), T);
            if (Bridge.is(value, System.Windows.IContextElement)) {
                Bridge.cast(value, System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(null);
            }

            if (Bridge.is(value, System.Windows.INotifyChanged)) {
                Bridge.cast(value, System.Windows.INotifyChanged).System$Windows$INotifyChanged$removeChanged(Bridge.fn.cacheBind(this, this.onItemChanged));
            }
        }

        $t1 = Bridge.getEnumerator(e.getNewItems(), Object);
        while ($t1.moveNext()) {
            var value1 = Bridge.cast($t1.getCurrent(), T);
            if (Bridge.is(value1, System.Windows.IContextElement)) {
                Bridge.cast(value1, System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(this);
            }

            if (Bridge.is(value1, System.Windows.INotifyChanged)) {
                Bridge.cast(value1, System.Windows.INotifyChanged).System$Windows$INotifyChanged$addChanged(Bridge.fn.cacheBind(this, this.onItemChanged));
            }
        }

        Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, e);
        this.raiseChanged();
    },
    onItemChanged: function (sender, e) {
        this.raiseChanged();
    },
    add: function (item) {
        this.collection.add(item);
    },
    clear: function () {
        this.collection.clear();
    },
    contains: function (item) {
        return this.collection.contains(item);
    },
    indexOf: function (item) {
        return this.collection.indexOf(item);
    },
    insert: function (index, item) {
        this.collection.insert(index, item);
    },
    remove: function (item) {
        return this.collection.remove(item);
    },
    removeAt: function (index) {
        this.collection.removeAt(index);
    },
    copyTo: function (array, arrayIndex) {
        this.collection.copyTo(array, arrayIndex);
    },
    getEnumerator: function () {
        return this.collection.getEnumerator();
    },
    System$Collections$IEnumerable$getEnumerator: function () {
        return Bridge.getEnumerator(Bridge.cast(this.collection, System.Collections.IEnumerable));
    }
    }; });

    Bridge.define("System.Windows.Input.KeyboardEventArgs", {
        inherits: [System.Windows.Input.InputEventArgs],
        config: {
            properties: {
                KeyboardDevice: null
            }
        },
        ctor: function (routedEvent, originalSource, keyboardDevice, timestamp) {
            this.$initialize();
            System.Windows.Input.InputEventArgs.ctor.call(this, routedEvent, originalSource, keyboardDevice, timestamp);
            this.setKeyboardDevice(keyboardDevice);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.ContainedNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.ContainedNavigation();
                }
            }
        },
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "findFirstTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findFirstTarget",
            "findLastTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findLastTarget"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findNextContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || currentStop.getElement(); // stay at the edge
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findPreviousContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || currentStop.getElement(); // stay at the edge
        },
        findFirstTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findFirstContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findLastTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findLastContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.ContinueNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.ContinueNavigation();
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.CycleNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.CycleNavigation();
                }
            }
        },
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "findFirstTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findFirstTarget",
            "findLastTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findLastTarget"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findNextContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || System.Windows.Input.KeyboardNavigationTarget.findFirstContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findPreviousContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || System.Windows.Input.KeyboardNavigationTarget.findLastContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findFirstTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findFirstContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        },
        findLastTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findLastContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.LocalNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.LocalNavigation();
                }
            }
        },
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "getGlobalStops", "System$Windows$Input$KeyboardNavigationTarget$INavigation$getGlobalStops"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findNextContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || (scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findNextTarget(scope.getVisualParent(), new System.Windows.Input.KeyboardNavigationTarget.Stop.$ctor1(currentStop.getElement(), System.Windows.Input.KeyboardNavigation.getTabIndex(scope)), navigationModeProperty, stopComparerProvider) : null); // translate currentStop and forward request to parent
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            return System.Windows.Input.KeyboardNavigationTarget.findPreviousContainedTarget(scope, currentStop, navigationModeProperty, stopComparerProvider) || (scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(scope.getVisualParent(), new System.Windows.Input.KeyboardNavigationTarget.Stop.$ctor1(currentStop.getElement(), System.Windows.Input.KeyboardNavigation.getTabIndex(scope)), navigationModeProperty, stopComparerProvider) : null); // translate currentStop and forward request to parent
        },
        getGlobalStops: function (scope, currentElement, navigationModeProperty) {
            var $t;
            var $yield = [];
            var scopeTabIndex = System.Windows.Input.KeyboardNavigation.getTabIndex(scope);

            if (System.Windows.Input.KeyboardNavigationTarget.isStop(Bridge.cast(scope, System.Windows.UIElement)) || Bridge.referenceEquals(scope, currentElement)) {
                $yield.push(new System.Windows.Input.KeyboardNavigationTarget.Stop.$ctor1(scope, scopeTabIndex));
            }

            // translate stops to have scope tab index instead of local tab index, local order is kept
            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(scope.getVisualChildren()).selectMany(function (child) {
                    return System.Windows.Input.KeyboardNavigationTarget.getGlobalStops(child, currentElement, navigationModeProperty);
                }).orderBy($asm.$.System.Windows.Input.KeyboardNavigationTarget.LocalNavigation.f1));
            while ($t.moveNext()) {
                var stop = $t.getCurrent();
                $yield.push(new System.Windows.Input.KeyboardNavigationTarget.Stop.$ctor1(stop.getElement(), scopeTabIndex));
            }
            return System.Array.toEnumerable($yield);
        }
    });

    Bridge.ns("System.Windows.Input.KeyboardNavigationTarget.LocalNavigation", $asm.$);

    Bridge.apply($asm.$.System.Windows.Input.KeyboardNavigationTarget.LocalNavigation, {
        f1: function (childStop) {
            return childStop.getTabIndex();
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.NoneNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.NoneNavigation();
                }
            }
        },
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "getGlobalStops", "System$Windows$Input$KeyboardNavigationTarget$INavigation$getGlobalStops"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            // forward the request to the parent
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findNextTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : null;
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            // forward the request to the parent
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : null;
        },
        getGlobalStops: function (scope, currentElement, navigationModeProperty) {
            var $yield = [];
            if (System.Windows.Input.KeyboardNavigationTarget.isStop(Bridge.cast(scope, System.Windows.UIElement)) || Bridge.referenceEquals(scope, currentElement)) {
                $yield.push(new System.Windows.Input.KeyboardNavigationTarget.Stop.ctor(scope));
            }

            // add currentElement stop if it's a descendant of scope
            if (System.Windows.Media.VisualExtensions.isAncestorOf(scope, currentElement)) {
                var childrenStop = System.Linq.Enumerable.from(scope.getVisualChildren()).selectMany(function (child) {
                        return System.Windows.Input.KeyboardNavigationTarget.getGlobalStops(child, currentElement, navigationModeProperty);
                    });
                $yield.push(System.Linq.Enumerable.from(childrenStop).first(function (childStop) {
                        return Bridge.referenceEquals(childStop.getElement(), currentElement);
                    }));
            }
            return System.Array.toEnumerable($yield);
        }
    });

    Bridge.define("System.Windows.Input.KeyboardNavigationTarget.OnceNavigation", {
        inherits: [System.Windows.Input.KeyboardNavigationTarget.BaseNavigation],
        statics: {
            default: null,
            config: {
                init: function () {
                    this.default = new System.Windows.Input.KeyboardNavigationTarget.OnceNavigation();
                }
            }
        },
        config: {
            alias: [
            "findNextTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findNextTarget",
            "findPreviousTarget", "System$Windows$Input$KeyboardNavigationTarget$INavigation$findPreviousTarget",
            "getGlobalStops", "System$Windows$Input$KeyboardNavigationTarget$INavigation$getGlobalStops"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Input.KeyboardNavigationTarget.BaseNavigation.ctor.call(this);
            //
        },
        findNextTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            // forward the request to the parent
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findNextTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : null;
        },
        findPreviousTarget: function (scope, currentStop, navigationModeProperty, stopComparerProvider) {
            // forward the request to the parent
            return scope.getVisualParent() != null ? System.Windows.Input.KeyboardNavigationTarget.findPreviousTarget(scope.getVisualParent(), currentStop, navigationModeProperty, stopComparerProvider) : null;
        },
        getGlobalStops: function (scope, currentElement, navigationModeProperty) {
            var $t;
            var $yield = [];
            if (System.Windows.Input.KeyboardNavigationTarget.isStop(Bridge.cast(scope, System.Windows.UIElement)) || Bridge.referenceEquals(scope, currentElement)) {
                $yield.push(new System.Windows.Input.KeyboardNavigationTarget.Stop.ctor(scope));
            }

            var navigationFocusElementReference = System.Windows.Input.KeyboardNavigation.getNavigationFocusElement(scope);
            var navigationFocusElement = navigationFocusElementReference != null ? navigationFocusElementReference.getVisual() : null;

            var stops = System.Linq.Enumerable.from(scope.getVisualChildren()).selectMany(function (child) {
                    return System.Windows.Input.KeyboardNavigationTarget.getGlobalStops(child, currentElement, navigationModeProperty);
                }).toArray();

            if (System.Linq.Enumerable.from(stops).any()) {
                stops = System.Linq.Enumerable.from(stops).where(function (stop) {
                        return Bridge.referenceEquals(stop.getElement(), currentElement) || Bridge.referenceEquals(stop.getElement(), navigationFocusElement);
                    }).defaultIfEmpty(System.Linq.Enumerable.from(stops).first()).toArray();

                $t = Bridge.getEnumerator(stops);
                while ($t.moveNext()) {
                    var stop = $t.getCurrent();
                    $yield.push(stop);
                }
            }
            return System.Array.toEnumerable($yield);
        }
    });

    Bridge.define("System.Windows.Input.MouseEventArgs", {
        inherits: [System.Windows.Input.InputEventArgs],
        config: {
            properties: {
                MouseDevice: null,
                LeftButton: 0,
                MiddleButton: 0,
                RightButton: 0,
                XButton1: 0,
                XButton2: 0,
                AbsolutePosition: null
            }
        },
        ctor: function (routedEvent, originalSource, mouseDevice, timestamp, absolutePosition) {
            this.$initialize();
            System.Windows.Input.InputEventArgs.ctor.call(this, routedEvent, originalSource, mouseDevice, timestamp);
            this.setMouseDevice(mouseDevice);
            this.setAbsolutePosition(absolutePosition);

            this.setLeftButton(mouseDevice.getButtonState(System.Windows.Input.MouseButton.Left));
            this.setMiddleButton(mouseDevice.getButtonState(System.Windows.Input.MouseButton.Middle));
            this.setRightButton(mouseDevice.getButtonState(System.Windows.Input.MouseButton.Right));
            this.setXButton1(mouseDevice.getButtonState(System.Windows.Input.MouseButton.XButton1));
            this.setXButton2(mouseDevice.getButtonState(System.Windows.Input.MouseButton.XButton2));
        },
        getPosition: function (relativeTo) {
            return relativeTo.System$Windows$IInputElement$getRelativePosition(this.getAbsolutePosition());
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.InputEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Input.RawMouseButtonEventArgs", {
        inherits: [System.Windows.Input.RawMouseEventArgs],
        config: {
            properties: {
                Button: 0,
                ButtonState: 0
            }
        },
        ctor: function (button, buttonState, position, timestamp) {
            this.$initialize();
            System.Windows.Input.RawMouseEventArgs.ctor.call(this, position, timestamp);
            this.setButton(button);
            this.setButtonState(buttonState);
        }
    });

    Bridge.define("System.Windows.Input.RawMouseWheelEventArgs", {
        inherits: [System.Windows.Input.RawMouseEventArgs],
        config: {
            properties: {
                Delta: 0
            }
        },
        ctor: function (delta, position, timestamp) {
            this.$initialize();
            System.Windows.Input.RawMouseEventArgs.ctor.call(this, position, timestamp);
            this.setDelta(delta);
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationExpression", {
        inherits: [System.Windows.IExpression],
        layers: null,
        observableValue: null,
        dependencyObject: null,
        dependencyProperty: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "setValue", "System$Windows$IExpression$setValue"
            ]
        },
        ctor: function (dependencyObject, dependencyProperty) {
            this.$initialize();
            this.dependencyObject = dependencyObject;
            this.dependencyProperty = dependencyProperty;

            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Media.Animation.AnimationExpression.f1));

            this.layers = new System.Windows.Media.Animation.AnimationLayerCollection();
            this.layers.addLayerInvalidated(Bridge.fn.cacheBind(this, this.onLayerInvalidated));

            this.setAnimationValue();
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        setValue: function (value) {
            return false;
        },
        setClocks: function (clocks, layerOwner) {
            this.layers.setClocks(clocks, this.getAnimationBaseValue(), System.Windows.Media.Animation.AnimationLayerKey.fromLayerOwner(layerOwner));
        },
        addClocks: function (clocks, layerOwner) {
            this.layers.addClocks(clocks, System.Windows.Media.Animation.AnimationLayerKey.fromLayerOwner(layerOwner));
        },
        removeClocks: function (clocks, layerOwner) {
            this.layers.removeClocks(clocks, System.Windows.Media.Animation.AnimationLayerKey.fromLayerOwner(layerOwner));
        },
        setAnimationValue: function () {
            this.observableValue.setBaseValue(this.layers.getHasValue() ? this.layers.getValue(this.getAnimationBaseValue()) : System.Windows.Data.ObservableValue.unsetValue);
        },
        getAnimationBaseValue: function () {
            if (this.dependencyObject == null) {
                return System.Windows.Data.ObservableValue.unsetValue;
            }

            var entry = this.dependencyObject.getValueEntry(this.dependencyProperty);
            return System.Windows.DependencyPropertyValueEntryExtensions.getBaseValue(entry, true);
        },
        onLayerInvalidated: function (sender, e) {
            this.setAnimationValue();
        }
    });

    Bridge.ns("System.Windows.Media.Animation.AnimationExpression", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.AnimationExpression, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Media.Animation.Timeline", {
        inherits: [System.Windows.Freezable],
        statics: {
            beginTimeProperty: null,
            durationProperty: null,
            fillBehaviorProperty: null,
            repeatBehaviorProperty: null,
            autoReverseProperty: null,
            config: {
                init: function () {
                    this.beginTimeProperty = System.Windows.DependencyProperty.register("BeginTime", System.TimeSpan, System.Windows.Media.Animation.Timeline, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.TimeSpan.zero));
                    this.durationProperty = System.Windows.DependencyProperty.register("Duration", System.Windows.Duration, System.Windows.Media.Animation.Timeline, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.Duration.ctor(System.TimeSpan.fromSeconds(1))));
                    this.fillBehaviorProperty = System.Windows.DependencyProperty.register("FillBehavior", System.Windows.Media.Animation.FillBehavior, System.Windows.Media.Animation.Timeline, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.repeatBehaviorProperty = System.Windows.DependencyProperty.register("RepeatBehavior", System.Windows.Media.Animation.RepeatBehavior, System.Windows.Media.Animation.Timeline, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.Animation.RepeatBehavior.oneTime));
                    this.autoReverseProperty = System.Windows.DependencyProperty.register("AutoReverse", Boolean, System.Windows.Media.Animation.Timeline, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        parent: null,
        getBeginTime: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.Timeline.beginTimeProperty), System.TimeSpan));
        },
        setBeginTime: function (value) {
            this.setValue(System.Windows.Media.Animation.Timeline.beginTimeProperty, value);
        },
        getDuration: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.Timeline.durationProperty), System.Windows.Duration);
        },
        setDuration: function (value) {
            this.setValue(System.Windows.Media.Animation.Timeline.durationProperty, value);
        },
        getFillBehavior: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.Timeline.fillBehaviorProperty), System.Int32));
        },
        setFillBehavior: function (value) {
            this.setValue(System.Windows.Media.Animation.Timeline.fillBehaviorProperty, value);
        },
        getRepeatBehavior: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.Timeline.repeatBehaviorProperty), System.Windows.Media.Animation.RepeatBehavior);
        },
        setRepeatBehavior: function (value) {
            this.setValue(System.Windows.Media.Animation.Timeline.repeatBehaviorProperty, value);
        },
        getAutoReverse: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.Timeline.autoReverseProperty), Boolean));
        },
        setAutoReverse: function (value) {
            this.setValue(System.Windows.Media.Animation.Timeline.autoReverseProperty, value);
        },
        getParent: function () {
            return this.parent;
        },
        setParent: function (value) {
            if (Bridge.referenceEquals(this.parent, value)) {
                return;
            }

            this.parent = value;
            this.trySetContextParent(value);
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationTimelineClock", {
        inherits: [System.Windows.Media.Animation.TimelineClock],
        statics: {
            createAnimationClock: function (timeline) {
                if (!timeline.getDuration().getHasTimeSpan()) {
                    throw new Granular.Exception("Can't resolve animation duration \"{0}\"", [timeline.getDuration()]);
                }

                return new System.Windows.Media.Animation.AnimationClock(timeline.getDuration().getTimeSpan());
            }
        },
        timeline: null,
        ctor: function (timeline) {
            this.$initialize();
            System.Windows.Media.Animation.TimelineClock.ctor.call(this, System.Windows.Media.Animation.AnimationTimelineClock.createAnimationClock(timeline), timeline);
            this.timeline = timeline;
        },
        getValue: function (defaultOriginValue, defaultDestinationValue) {
            return this.timeline.getCurrentValue(defaultOriginValue, defaultDestinationValue, this);
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingFunctionBase", {
        inherits: [System.Windows.Freezable,System.Windows.Media.Animation.IEasingFunction],
        statics: {
            easingModeProperty: null,
            config: {
                init: function () {
                    this.easingModeProperty = System.Windows.DependencyProperty.register("EasingMode", System.Windows.Media.Animation.EasingMode, System.Windows.Media.Animation.EasingFunctionBase, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.Animation.EasingMode.EaseOut));
                }
            }
        },
        config: {
            alias: [
            "ease", "System$Windows$Media$Animation$IEasingFunction$ease"
            ]
        },
        getEasingMode: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.EasingFunctionBase.easingModeProperty), System.Int32));
        },
        setEasingMode: function (value) {
            this.setValue(System.Windows.Media.Animation.EasingFunctionBase.easingModeProperty, value);
        },
        ease: function (normalizedTime) {
            switch (this.getEasingMode()) {
                case System.Windows.Media.Animation.EasingMode.EaseIn: 
                    return this.easeOverride(normalizedTime);
                case System.Windows.Media.Animation.EasingMode.EaseOut: 
                    return 1 - this.easeOverride(1 - normalizedTime);
                case System.Windows.Media.Animation.EasingMode.EaseInOut: 
                    return normalizedTime < 0.5 ? this.easeOverride(normalizedTime * 2) / 2 : (2 - this.easeOverride((1 - normalizedTime) * 2)) / 2;
            }

            throw new Granular.Exception("Unexpected EasingMode \"{0}\"", [this.getEasingMode()]);
        }
    });

    Bridge.define("System.Windows.Media.Animation.BeginStoryboard", {
        inherits: [System.Windows.Freezable,System.Windows.ITriggerAction],
        statics: {
            storyboardProperty: null,
            config: {
                init: function () {
                    this.storyboardProperty = System.Windows.DependencyProperty.register("Storyboard", System.Windows.Media.Animation.Storyboard, System.Windows.Media.Animation.BeginStoryboard, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        config: {
            properties: {
                HandoffBehavior: 0,
                Name: null
            },
            alias: [
            "apply", "System$Windows$ITriggerAction$apply",
            "clean", "System$Windows$ITriggerAction$clean",
            "isActionOverlaps", "System$Windows$ITriggerAction$isActionOverlaps"
            ]
        },
        getStoryboard: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.BeginStoryboard.storyboardProperty), System.Windows.Media.Animation.Storyboard);
        },
        setStoryboard: function (value) {
            this.setValue(System.Windows.Media.Animation.BeginStoryboard.storyboardProperty, value);
        },
        apply: function (target, valueSource) {
            var nameScope = valueSource === System.Windows.BaseValueSource.Local ? System.Windows.NameScope.getContainingNameScope(target) : System.Windows.NameScope.getTemplateNameScope(target);
            var layerOwner = valueSource === System.Windows.BaseValueSource.Local ? null : target.getTemplatedParent();
            this.begin(target, nameScope, layerOwner);
        },
        clean: function (target, valueSource) {
            //
        },
        isActionOverlaps: function (action) {
            return false;
        },
        begin: function (target, nameScope, layerOwner) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().begin(target, nameScope, this.getHandoffBehavior(), layerOwner);
            }
        },
        remove: function (target, nameScope, layerOwner) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().remove(target, nameScope, layerOwner);
            }
        },
        stop: function (target) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().stop(target);
            }
        },
        pause: function (target) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().pause(target);
            }
        },
        resume: function (target) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().pause(target);
            }
        },
        skipToFill: function (target) {
            if (this.getStoryboard() != null) {
                this.getStoryboard().skipToFill(target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.KeyFrame$1", function (T) { return {
        inherits: [System.Windows.Freezable],
        statics: {
            valueProperty: null,
            keyTimeProperty: null,
            config: {
                init: function () {
                    this.valueProperty = System.Windows.Media.Animation.KeyFrame$1(T).dependencyPropertyRegisterNonGeneric("Value", T, System.Windows.Media.Animation.KeyFrame$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.keyTimeProperty = System.Windows.Media.Animation.KeyFrame$1(T).dependencyPropertyRegisterNonGeneric("KeyTime", System.Windows.Media.Animation.KeyTime, System.Windows.Media.Animation.KeyFrame$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            dependencyPropertyRegisterNonGeneric: function (name, propertyType, ownerType, metadata, validateValueCallback) {
                if (metadata === void 0) { metadata = null; }
                if (validateValueCallback === void 0) { validateValueCallback = null; }
                return (T.$isTypeParameter || false) ? null : System.Windows.DependencyProperty.register(name, propertyType, ownerType, metadata, validateValueCallback);
            }
        },
        getValue$5: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.KeyFrame$1(T).valueProperty), T);
        },
        setValue$5: function (value) {
            this.setValue(System.Windows.Media.Animation.KeyFrame$1(T).valueProperty, value);
        },
        getKeyTime: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.KeyFrame$1(T).keyTimeProperty), System.Windows.Media.Animation.KeyTime);
        },
        setKeyTime: function (value) {
            this.setValue(System.Windows.Media.Animation.KeyFrame$1(T).keyTimeProperty, value);
        }
    }; });

    Bridge.define("System.Windows.Media.Animation.TimelineGroupClock", {
        inherits: [System.Windows.Media.Animation.TimelineClock],
        config: {
            properties: {
                Children: null
            }
        },
        ctor: function (baseGroupClock, timelineGroup, children) {
            this.$initialize();
            System.Windows.Media.Animation.TimelineClock.ctor.call(this, baseGroupClock, timelineGroup);
            this.setChildren(children);
        }
    });

    Bridge.define("System.Windows.Media.Animation.StoryboardAction", {
        inherits: [System.Windows.Freezable,System.Windows.ITriggerAction],
        config: {
            properties: {
                BeginStoryboardName: null
            },
            alias: [
            "clean", "System$Windows$ITriggerAction$clean",
            "isActionOverlaps", "System$Windows$ITriggerAction$isActionOverlaps"
            ]
        },
        clean: function (target, valueSource) {
            //
        },
        isActionOverlaps: function (action) {
            return false;
        },
        getBeginStoryboard: function (target) {
            var nameScope = System.Windows.NameScope.getContainingNameScope(target);
            return nameScope != null ? Bridge.as(nameScope.System$Windows$INameScope$findName(this.getBeginStoryboardName()), System.Windows.Media.Animation.BeginStoryboard) : null;
        }
    });

    Bridge.define("System.Windows.ResourceReferenceExpression", {
        inherits: [System.Windows.IExpression,System.IDisposable],
        resourceKey: null,
        observableValue: null,
        resourceContainer: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "dispose", "System$IDisposable$dispose",
            "setValue", "System$Windows$IExpression$setValue"
            ]
        },
        ctor: function (resourceContainer, resourceKey) {
            this.$initialize();
            this.resourceContainer = resourceContainer;
            this.resourceKey = resourceKey;

            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.ResourceReferenceExpression.f1));
            this.observableValue.setBaseValue(this.getResourceValue());

            resourceContainer.System$Windows$IResourceContainer$addResourcesChanged(Bridge.fn.cacheBind(this, this.onResourcesChanged));
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        dispose: function () {
            this.observableValue.setBaseValue(System.Windows.Data.ObservableValue.unsetValue);
            this.resourceContainer.System$Windows$IResourceContainer$removeResourcesChanged(Bridge.fn.cacheBind(this, this.onResourcesChanged));
        },
        onResourcesChanged: function (sender, e) {
            if (e.contains(this.resourceKey)) {
                this.observableValue.setBaseValue(this.getResourceValue());
            }
        },
        setValue: function (value) {
            return false;
        },
        getResourceValue: function () {
            var value = { };
            return this.resourceContainer.System$Windows$IResourceContainer$tryGetResource(this.resourceKey, value) ? value.v : System.Windows.Data.ObservableValue.unsetValue;
        }
    });

    Bridge.ns("System.Windows.ResourceReferenceExpression", $asm.$);

    Bridge.apply($asm.$.System.Windows.ResourceReferenceExpression, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.Setter.ValueOverlapExpression", {
        inherits: [System.Windows.IExpressionProvider,System.Windows.IExpression],
        values: null,
        observableValue: null,
        config: {
            events: {
                ValueChanged: null
            },
            alias: [
            "addValueChanged", "System$Windows$Data$IObservableValue$addValueChanged",
            "removeValueChanged", "System$Windows$Data$IObservableValue$removeValueChanged",
            "getValue", "System$Windows$Data$IObservableValue$getValue",
            "createExpression", "System$Windows$IExpressionProvider$createExpression",
            "setValue", "System$Windows$IExpression$setValue"
            ]
        },
        ctor: function () {
            this.$initialize();
            this.values = new (System.Collections.Generic.List$1(Object))();

            this.observableValue = new System.Windows.Data.ObservableValue.ctor();
            this.observableValue.addValueChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Setter.ValueOverlapExpression.f1));
        },
        getValue: function () {
            return this.observableValue.getValue();
        },
        createExpression: function (dependencyObject, dependencyProperty) {
            return this;
        },
        setValue: function (value) {
            return false;
        },
        setValue$1: function (owner, value) {
            this.values.remove(System.Linq.Enumerable.from(this.values).firstOrDefault(function (tuple) {
                    return Bridge.referenceEquals(tuple.item1, owner);
                }, null));
            this.values.add({ item1: owner, item2: value });

            this.observableValue.setBaseValue(value);
        },
        clearValue: function (owner) {
            this.values.remove(System.Linq.Enumerable.from(this.values).firstOrDefault(function (tuple) {
                    return Bridge.referenceEquals(tuple.item1, owner);
                }, null));

            this.observableValue.setBaseValue(this.values.getCount() > 0 ? System.Linq.Enumerable.from(this.values).last().item2 : System.Windows.Data.ObservableValue.unsetValue);
        }
    });

    Bridge.ns("System.Windows.Setter.ValueOverlapExpression", $asm.$);

    Bridge.apply($asm.$.System.Windows.Setter.ValueOverlapExpression, {
        f1: function (sender, oldValue, newValue) {
            System.Windows.Data.ObservableValueChangedEventHandlerExtensions.raise(this.ValueChanged, this, oldValue, newValue);
        }
    });

    Bridge.define("System.Windows.VisualState", {
        inherits: [System.Windows.Freezable],
        statics: {
            storyboardProperty: null,
            config: {
                init: function () {
                    this.storyboardProperty = System.Windows.DependencyProperty.register("Storyboard", System.Windows.Media.Animation.Storyboard, System.Windows.VisualState, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        config: {
            properties: {
                Name: null
            }
        },
        getStoryboard: function () {
            return Bridge.cast(this.getValue(System.Windows.VisualState.storyboardProperty), System.Windows.Media.Animation.Storyboard);
        },
        setStoryboard: function (value) {
            this.setValue(System.Windows.VisualState.storyboardProperty, value);
        }
    });

    Bridge.define("System.Windows.VisualStateGroup", {
        inherits: [System.Windows.Freezable],
        statics: {
            getTransition: function (transitions, fromStateName, toStateName) {
                return System.Linq.Enumerable.from(transitions).firstOrDefault(function (transition) {
                        return Bridge.referenceEquals(transition.getFrom(), fromStateName) && Bridge.referenceEquals(transition.getTo(), toStateName);
                    }, null) || System.Linq.Enumerable.from(transitions).firstOrDefault(function (transition) {
                        return Granular.Extensions.StringExtensions.isNullOrEmpty(transition.getFrom()) && Bridge.referenceEquals(transition.getTo(), toStateName);
                    }, null) || System.Linq.Enumerable.from(transitions).firstOrDefault(function (transition) {
                        return Bridge.referenceEquals(transition.getFrom(), fromStateName) && Granular.Extensions.StringExtensions.isNullOrEmpty(transition.getTo());
                    }, null) || System.Linq.Enumerable.from(transitions).firstOrDefault($asm.$.System.Windows.VisualStateGroup.f1, null);
            }
        },
        currentStoryboard: null,
        container: null,
        config: {
            properties: {
                Name: null,
                States: null,
                Transitions: null,
                CurrentState: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Freezable.ctor.call(this);
            this.setStates(new (System.Windows.FreezableCollection$1(System.Windows.VisualState)).ctor());
            this.getStates().trySetContextParent(this);

            this.setTransitions(new (System.Windows.FreezableCollection$1(System.Windows.VisualTransition)).ctor());
            this.getTransitions().trySetContextParent(this);
        },
        setContainer: function (container) {
            if (this.container != null && !Bridge.referenceEquals(this.container, container)) {
                throw new Granular.Exception("Can't change VisualStateGroup container");
            }

            this.container = container;
        },
        goToState: function (state, useTransitions) {
            if (Bridge.referenceEquals(state, this.getCurrentState())) {
                return true;
            }

            var currentStateName = this.getCurrentState() != null ? this.getCurrentState().getName() : "";
            var transition = useTransitions ? System.Windows.VisualStateGroup.getTransition(this.getTransitions(), currentStateName, state.getName()) : null;
            var transitionStoryboard = transition != null ? transition.getStoryboard() : null;

            var storyboard;
            if (transitionStoryboard != null && state.getStoryboard() != null) {
                // create a sequential animation with the transition storyboard first and then the state storyboard
                var sequentialTimeline = new System.Windows.Media.Animation.SequentialTimeline();
                sequentialTimeline.getChildren().add(transitionStoryboard);
                sequentialTimeline.getChildren().add(state.getStoryboard());

                storyboard = new System.Windows.Media.Animation.Storyboard();
                storyboard.getChildren().add(sequentialTimeline);
            } else {
                storyboard = transitionStoryboard || state.getStoryboard();
            }

            this.startNewStoryboard(storyboard);

            this.setCurrentState(state);
            return true;
        },
        startNewStoryboard: function (newStoryboard) {
            if (newStoryboard != null) {
                newStoryboard.begin(this.container, System.Windows.NameScope.getTemplateNameScope(this.container));

                if (this.currentStoryboard != null) {
                    this.currentStoryboard.stop(this.container);
                }
            } else if (this.currentStoryboard != null) {
                this.currentStoryboard.remove(this.container);
            }

            this.currentStoryboard = newStoryboard;
        }
    });

    Bridge.ns("System.Windows.VisualStateGroup", $asm.$);

    Bridge.apply($asm.$.System.Windows.VisualStateGroup, {
        f1: function (transition) {
            return Granular.Extensions.StringExtensions.isNullOrEmpty(transition.getFrom()) && Granular.Extensions.StringExtensions.isNullOrEmpty(transition.getTo());
        }
    });

    Bridge.define("System.Windows.VisualTransition", {
        inherits: [System.Windows.Freezable],
        statics: {
            storyboardProperty: null,
            config: {
                init: function () {
                    this.storyboardProperty = System.Windows.DependencyProperty.register("Storyboard", System.Windows.Media.Animation.Storyboard, System.Windows.VisualTransition, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        config: {
            properties: {
                From: null,
                To: null
            }
        },
        getStoryboard: function () {
            return Bridge.cast(this.getValue(System.Windows.VisualTransition.storyboardProperty), System.Windows.Media.Animation.Storyboard);
        },
        setStoryboard: function (value) {
            this.setValue(System.Windows.VisualTransition.storyboardProperty, value);
        }
    });

    Bridge.define("System.Windows.FrameworkElement", {
        inherits: [System.Windows.UIElement,System.Windows.IResourceContainer],
        statics: {
            initializedEvent: null,
            horizontalAlignmentProperty: null,
            verticalAlignmentProperty: null,
            marginProperty: null,
            widthProperty: null,
            heightProperty: null,
            minWidthProperty: null,
            minHeightProperty: null,
            maxWidthProperty: null,
            maxHeightProperty: null,
            actualWidthPropertyKey: null,
            actualWidthProperty: null,
            actualHeightPropertyKey: null,
            actualHeightProperty: null,
            styleProperty: null,
            defaultStyleKeyProperty: null,
            focusVisualStyleProperty: null,
            dataContextProperty: null,
            cursorProperty: null,
            forceCursorProperty: null,
            layoutTransformProperty: null,
            config: {
                init: function () {
                    this.initializedEvent = System.Windows.EventManager.registerRoutedEvent("Initialized", System.Windows.RoutingStrategy.Direct, Function, System.Windows.FrameworkElement);
                    this.horizontalAlignmentProperty = System.Windows.DependencyProperty.register("HorizontalAlignment", System.Windows.HorizontalAlignment, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.HorizontalAlignment.Stretch, 3, $asm.$.System.Windows.FrameworkElement.f1));
                    this.verticalAlignmentProperty = System.Windows.DependencyProperty.register("VerticalAlignment", System.Windows.VerticalAlignment, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.VerticalAlignment.Stretch, 3, $asm.$.System.Windows.FrameworkElement.f1));
                    this.marginProperty = System.Windows.DependencyProperty.register("Margin", System.Windows.Thickness, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Thickness.zero, 3));
                    this.widthProperty = System.Windows.DependencyProperty.register("Width", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(Number.NaN, 3, $asm.$.System.Windows.FrameworkElement.f2));
                    this.heightProperty = System.Windows.DependencyProperty.register("Height", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(Number.NaN, 3, $asm.$.System.Windows.FrameworkElement.f2));
                    this.minWidthProperty = System.Windows.DependencyProperty.register("MinWidth", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(0.0, 3, $asm.$.System.Windows.FrameworkElement.f3));
                    this.minHeightProperty = System.Windows.DependencyProperty.register("MinHeight", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(0.0, 3, $asm.$.System.Windows.FrameworkElement.f3));
                    this.maxWidthProperty = System.Windows.DependencyProperty.register("MaxWidth", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(Number.POSITIVE_INFINITY, 3, $asm.$.System.Windows.FrameworkElement.f4));
                    this.maxHeightProperty = System.Windows.DependencyProperty.register("MaxHeight", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(Number.POSITIVE_INFINITY, 3, $asm.$.System.Windows.FrameworkElement.f4));
                    this.actualWidthPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ActualWidth", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.actualWidthProperty = System.Windows.FrameworkElement.actualWidthPropertyKey.getDependencyProperty();
                    this.actualHeightPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ActualHeight", System.Double, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.actualHeightProperty = System.Windows.FrameworkElement.actualHeightPropertyKey.getDependencyProperty();
                    this.styleProperty = System.Windows.DependencyProperty.register("Style", System.Windows.Style, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure, $asm.$.System.Windows.FrameworkElement.f5));
                    this.defaultStyleKeyProperty = System.Windows.DependencyProperty.register("DefaultStyleKey", Object, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.focusVisualStyleProperty = System.Windows.DependencyProperty.register("FocusVisualStyle", System.Windows.Style, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.dataContextProperty = System.Windows.DependencyProperty.register("DataContext", Object, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.FrameworkElement.f6));
                    this.cursorProperty = System.Windows.DependencyProperty.register("Cursor", System.Windows.Input.Cursor, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.FrameworkElement.f7));
                    this.forceCursorProperty = System.Windows.DependencyProperty.register("ForceCursor", Boolean, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.FrameworkElement.f7));
                    this.layoutTransformProperty = System.Windows.DependencyProperty.register("LayoutTransform", System.Windows.Media.Transform, System.Windows.FrameworkElement, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Media.Transform.identity, 3, $asm.$.System.Windows.FrameworkElement.f8));
                }
            },
            getAlignmentOffset: function (container, alignedRectSize, horizontalAlignment, verticalAlignment) {
                var alignedLeft = container.getLeft();
                var alignedTop = container.getTop();

                if (horizontalAlignment === System.Windows.HorizontalAlignment.Right) {
                    alignedLeft = container.getLeft() + container.getWidth() - alignedRectSize.getWidth();
                }

                if (horizontalAlignment === System.Windows.HorizontalAlignment.Center || horizontalAlignment === System.Windows.HorizontalAlignment.Stretch) {
                    alignedLeft = container.getLeft() + (container.getWidth() - alignedRectSize.getWidth()) / 2;
                }

                if (verticalAlignment === System.Windows.VerticalAlignment.Bottom) {
                    alignedTop = container.getTop() + container.getHeight() - alignedRectSize.getHeight();
                }

                if (verticalAlignment === System.Windows.VerticalAlignment.Center || verticalAlignment === System.Windows.VerticalAlignment.Stretch) {
                    alignedTop = container.getTop() + (container.getHeight() - alignedRectSize.getHeight()) / 2;
                }

                return alignedLeft === 0 && alignedTop === 0 ? System.Windows.Point.zero : new System.Windows.Point.$ctor1(alignedLeft, alignedTop);
            }
        },
        actualWidthValueEntry: null,
        actualHeightValueEntry: null,
        templateChild: null,
        resources: null,
        resourceInheritanceParent: null,
        appliedTemplate: null,
        layoutTransformValue: null,
        isDefaultAlignment: false,
        config: {
            events: {
                ResourcesChanged: null,
                DataContextChanged: null
            },
            properties: {
                ActualSize: null,
                Size: null,
                MinSize: null,
                MaxSize: null,
                IsInitialized: false,
                TemplatedParent: null,
                Triggers: null,
                Name: null
            },
            alias: [
            "addResourcesChanged", "System$Windows$IResourceContainer$addResourcesChanged",
            "removeResourcesChanged", "System$Windows$IResourceContainer$removeResourcesChanged",
            "tryGetResource", "System$Windows$IResourceContainer$tryGetResource"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.UIElement.ctor.call(this);
            this.setTriggers(new (Granular.Collections.ObservableCollection$1(System.Windows.ITrigger)).ctor());
            this.getTriggers().addCollectionChanged(Bridge.fn.cacheBind(this, this.onTriggersCollectionChanged));

            this.actualWidthValueEntry = this.getValueEntry$1(System.Windows.FrameworkElement.actualWidthPropertyKey);
            this.actualHeightValueEntry = this.getValueEntry$1(System.Windows.FrameworkElement.actualHeightPropertyKey);

            this.setActualSize(System.Windows.Size.empty);
            this.setSize(System.Windows.Size.empty);
            this.setMinSize(System.Windows.Size.zero);
            this.setMaxSize(System.Windows.Size.infinity);

            this.isDefaultAlignment = true;
        },
        addInitialized: function (value) {
            this.addHandler(System.Windows.FrameworkElement.initializedEvent, value);
        },
        removeInitialized: function (value) {
            this.removeHandler(System.Windows.FrameworkElement.initializedEvent, value);
        },
        getHorizontalAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.horizontalAlignmentProperty), System.Int32));
        },
        setHorizontalAlignment: function (value) {
            this.setValue(System.Windows.FrameworkElement.horizontalAlignmentProperty, value);
        },
        getVerticalAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.verticalAlignmentProperty), System.Int32));
        },
        setVerticalAlignment: function (value) {
            this.setValue(System.Windows.FrameworkElement.verticalAlignmentProperty, value);
        },
        getMargin: function () {
            return Bridge.cast(this.getValue(System.Windows.FrameworkElement.marginProperty), System.Windows.Thickness);
        },
        setMargin: function (value) {
            this.setValue(System.Windows.FrameworkElement.marginProperty, value);
        },
        getWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.widthProperty), System.Double));
        },
        setWidth: function (value) {
            this.setValue(System.Windows.FrameworkElement.widthProperty, value);
        },
        getHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.heightProperty), System.Double));
        },
        setHeight: function (value) {
            this.setValue(System.Windows.FrameworkElement.heightProperty, value);
        },
        getMinWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.minWidthProperty), System.Double));
        },
        setMinWidth: function (value) {
            this.setValue(System.Windows.FrameworkElement.minWidthProperty, value);
        },
        getMinHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.minHeightProperty), System.Double));
        },
        setMinHeight: function (value) {
            this.setValue(System.Windows.FrameworkElement.minHeightProperty, value);
        },
        getMaxWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.maxWidthProperty), System.Double));
        },
        setMaxWidth: function (value) {
            this.setValue(System.Windows.FrameworkElement.maxWidthProperty, value);
        },
        getMaxHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.maxHeightProperty), System.Double));
        },
        setMaxHeight: function (value) {
            this.setValue(System.Windows.FrameworkElement.maxHeightProperty, value);
        },
        getActualWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.FrameworkElement.actualWidthPropertyKey), System.Double));
        },
        setActualWidth: function (value) {
            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.actualWidthValueEntry, System.Windows.BaseValueSource.Local, value);
        },
        getActualHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.FrameworkElement.actualHeightPropertyKey), System.Double));
        },
        setActualHeight: function (value) {
            System.Windows.DependencyPropertyValueEntryExtensions.setBaseValue(this.actualHeightValueEntry, System.Windows.BaseValueSource.Local, value);
        },
        getTemplateChild: function () {
            return this.templateChild;
        },
        setTemplateChild: function (value) {
            if (Bridge.referenceEquals(this.templateChild, value)) {
                return;
            }

            if (this.templateChild != null) {
                this.removeVisualChild(this.templateChild);
            }

            this.templateChild = value;

            if (this.templateChild != null) {
                this.addVisualChild(this.templateChild);
            }

            this.invalidateMeasure();

            this.onTemplateChildChanged();
        },
        getStyle: function () {
            return Bridge.cast(this.getValue(System.Windows.FrameworkElement.styleProperty), System.Windows.Style);
        },
        setStyle: function (value) {
            this.setValue(System.Windows.FrameworkElement.styleProperty, value);
        },
        getDefaultStyleKey: function () {
            return this.getValue(System.Windows.FrameworkElement.defaultStyleKeyProperty);
        },
        setDefaultStyleKey: function (value) {
            this.setValue(System.Windows.FrameworkElement.defaultStyleKeyProperty, value);
        },
        getFocusVisualStyle: function () {
            return Bridge.cast(this.getValue(System.Windows.FrameworkElement.focusVisualStyleProperty), System.Windows.Style);
        },
        setFocusVisualStyle: function (value) {
            this.setValue(System.Windows.FrameworkElement.focusVisualStyleProperty, value);
        },
        getResources: function () {
            return this.resources;
        },
        setResources: function (value) {
            if (Bridge.referenceEquals(this.resources, value)) {
                return;
            }

            if (this.resources != null) {
                this.resources.removeResourcesChanged(Bridge.fn.cacheBind(this, this.onResourceDictionaryChanged));
            }

            this.resources = value;

            if (this.resources != null) {
                this.resources.addResourcesChanged(Bridge.fn.cacheBind(this, this.onResourceDictionaryChanged));
            }

            this.raiseResourcesChanged(System.Windows.ResourcesChangedEventArgs.reset);
        },
        getResourceInheritanceParent$1: function () {
            return this.resourceInheritanceParent;
        },
        setResourceInheritanceParent$1: function (value) {
            if (Bridge.referenceEquals(this.resourceInheritanceParent, value)) {
                return;
            }

            var oldResourceInheritanceParent = this.resourceInheritanceParent;

            if (this.resourceInheritanceParent != null) {
                this.resourceInheritanceParent.System$Windows$IResourceContainer$removeResourcesChanged(Bridge.fn.cacheBind(this, this.onParentResourcesChanged));
            }

            this.resourceInheritanceParent = value;

            if (this.resourceInheritanceParent != null) {
                this.resourceInheritanceParent.System$Windows$IResourceContainer$addResourcesChanged(Bridge.fn.cacheBind(this, this.onParentResourcesChanged));
            }

            if (oldResourceInheritanceParent != null && !oldResourceInheritanceParent.System$Windows$IResourceContainer$getIsEmpty() || this.resourceInheritanceParent != null && !this.resourceInheritanceParent.System$Windows$IResourceContainer$getIsEmpty()) {
                this.raiseResourcesChanged(System.Windows.ResourcesChangedEventArgs.reset);
            }
        },
        System$Windows$IResourceContainer$getIsEmpty: function () {
            return (this.getResourceInheritanceParent$1() == null || this.getResourceInheritanceParent$1().System$Windows$IResourceContainer$getIsEmpty()) && (this.getResources() == null || this.getResources().getIsEmpty());
        },
        getDataContext: function () {
            return this.getValue(System.Windows.FrameworkElement.dataContextProperty);
        },
        setDataContext: function (value) {
            this.setValue(System.Windows.FrameworkElement.dataContextProperty, value);
        },
        getCursor: function () {
            return Bridge.cast(this.getValue(System.Windows.FrameworkElement.cursorProperty), System.Windows.Input.Cursor);
        },
        setCursor: function (value) {
            this.setValue(System.Windows.FrameworkElement.cursorProperty, value);
        },
        getForceCursor: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.FrameworkElement.forceCursorProperty), Boolean));
        },
        setForceCursor: function (value) {
            this.setValue(System.Windows.FrameworkElement.forceCursorProperty, value);
        },
        getLayoutTransform: function () {
            return Bridge.cast(this.getValue(System.Windows.FrameworkElement.layoutTransformProperty), System.Windows.Media.Transform);
        },
        setLayoutTransform: function (value) {
            this.setValue(System.Windows.FrameworkElement.layoutTransformProperty, value);
        },
        toString: function () {
            return Granular.Extensions.StringExtensions.isNullOrEmpty(this.getName()) ? System.String.format("{0}", Bridge.Reflection.getTypeName(Bridge.getType(this))) : System.String.format("{0} ({1})", Bridge.Reflection.getTypeName(Bridge.getType(this)), this.getName());
        },
        onPropertyChanged: function (e) {
            System.Windows.UIElement.prototype.onPropertyChanged.call(this, e);

            var metadata = Bridge.as(e.getProperty().getMetadata(Bridge.getType(this)), System.Windows.FrameworkPropertyMetadata);

            if (metadata != null) {
                if (metadata.getAffectsMeasure()) {
                    this.invalidateMeasure();
                }

                if (metadata.getAffectsArrange()) {
                    this.invalidateArrange();
                }

                if (metadata.getAffectsParentMeasure() && this.getVisualParent() != null) {
                    Bridge.cast(this.getVisualParent(), System.Windows.UIElement).invalidateMeasure();
                }

                if (metadata.getAffectsParentArrange() && this.getVisualParent() != null) {
                    Bridge.cast(this.getVisualParent(), System.Windows.UIElement).invalidateArrange();
                }
            }

            if (!e.getIsSubPropertyChange()) {
                var baseValueSource = this.getBaseValueSource(e.getProperty());
                if (baseValueSource !== System.Windows.BaseValueSource.Default && baseValueSource !== System.Windows.BaseValueSource.Inherited) {
                    if (Bridge.is(e.getOldValue(), System.Windows.IContextElement)) {
                        Bridge.cast(e.getOldValue(), System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(null);
                    }

                    if (Bridge.is(e.getNewValue(), System.Windows.IContextElement)) {
                        Bridge.cast(e.getNewValue(), System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(this);
                    }
                }
            }
        },
        measureCore: function (availableSize) {
            availableSize = System.Windows.Size.op_Subtraction(availableSize, this.getMargin().getSize());

            if (!System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.layoutTransformValue)) {
                availableSize = System.Windows.Media.MatrixExtensions.getContainedSize(this.layoutTransformValue, availableSize);
            }

            availableSize = System.Windows.SizeExtensions.bounds(System.Windows.SizeExtensions.combine(this.getSize(), availableSize), this.getMinSize(), this.getMaxSize());

            var measuredSize = this.measureOverride(availableSize);

            measuredSize = System.Windows.SizeExtensions.bounds(System.Windows.SizeExtensions.combine(this.getSize(), measuredSize), this.getMinSize(), this.getMaxSize());

            if (!System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.layoutTransformValue)) {
                measuredSize = System.Windows.Media.MatrixExtensions.getContainingSize(this.layoutTransformValue, measuredSize);
            }

            measuredSize = System.Windows.Size.op_Addition(measuredSize, this.getMargin().getSize());

            return measuredSize;
        },
        measureOverride: function (availableSize) {
            return System.Windows.Size.zero;
        },
        arrangeCore: function (finalRect) {
            var finalSize = this.isDefaultAlignment ? finalRect.getSize() : new System.Windows.Size(this.getHorizontalAlignment() !== System.Windows.HorizontalAlignment.Stretch ? Granular.Extensions.DoubleExtensions.min(this.getDesiredSize().getWidth(), finalRect.getWidth()) : finalRect.getWidth(), this.getVerticalAlignment() !== System.Windows.VerticalAlignment.Stretch ? Granular.Extensions.DoubleExtensions.min(this.getDesiredSize().getHeight(), finalRect.getHeight()) : finalRect.getHeight());

            finalSize = System.Windows.Size.op_Subtraction(finalSize, this.getMargin().getSize());

            if (!System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.layoutTransformValue)) {
                finalSize = System.Windows.Media.MatrixExtensions.getContainedSize(this.layoutTransformValue, finalSize);
            }

            finalSize = System.Windows.SizeExtensions.bounds(System.Windows.SizeExtensions.combine(this.getSize(), finalSize), this.getMinSize(), this.getMaxSize());

            var arrangedSize = this.arrangeOverride(finalSize);

            var containingRect = new System.Windows.Rect.$ctor3(arrangedSize);

            if (!System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.layoutTransformValue)) {
                containingRect = System.Windows.Media.MatrixExtensions.getContainingRect(this.layoutTransformValue, containingRect);
            }

            containingRect = System.Windows.RectExtensions.addMargin(containingRect, this.getMargin());

            var alignedOffset = System.Windows.FrameworkElement.getAlignmentOffset(finalRect, containingRect.getSize(), this.getHorizontalAlignment(), this.getVerticalAlignment());

            var visualOffset = System.Windows.Point.op_Subtraction(alignedOffset, containingRect.getLocation());

            this.setVisualBounds(new System.Windows.Rect.$ctor2(visualOffset, arrangedSize));

            this.setActualWidth(arrangedSize.getWidth());
            this.setActualHeight(arrangedSize.getHeight());
            this.setActualSize(arrangedSize);
        },
        arrangeOverride: function (finalSize) {
            return finalSize;
        },
        getTemplate: function () {
            return null;
        },
        applyTemplate: function () {
            var template = this.getTemplate();

            if (Bridge.referenceEquals(this.appliedTemplate, template)) {
                return false;
            }

            if (this.appliedTemplate != null) {
                this.appliedTemplate.System$Windows$IFrameworkTemplate$detach(this);
            }

            this.appliedTemplate = template;

            if (this.appliedTemplate != null) {
                this.appliedTemplate.System$Windows$IFrameworkTemplate$attach(this);
            }

            this.onApplyTemplate();

            return true;
        },
        onApplyTemplate: function () {
            //
        },
        onVisualParentChanged: function (oldVisualParent, newVisualParent) {
            System.Windows.UIElement.prototype.onVisualParentChanged.call(this, oldVisualParent, newVisualParent);

            this.initialize();
            this.setResourceInheritanceParent$1(Bridge.as((this.getLogicalParent() || this.getVisualParent()), System.Windows.FrameworkElement));
        },
        onLogicalParentChanged: function (oldLogicalParent, newLogicalParent) {
            this.setResourceInheritanceParent$1(Bridge.as((this.getLogicalParent() || this.getVisualParent()), System.Windows.FrameworkElement));
        },
        initialize: function () {
            if (this.getIsInitialized()) {
                return;
            }

            this.setIsInitialized(true);

            this.onInitialized(Object.empty);
            this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.FrameworkElement.initializedEvent, this));
        },
        onInitialized: function (e) {
            //
        },
        onStyleChanged: function (e) {
            if (e.getOldValue() != null) {
                (Bridge.as(e.getOldValue(), System.Windows.Style)).detach(this);
            }

            if (e.getNewValue() != null) {
                (Bridge.as(e.getNewValue(), System.Windows.Style)).attach(this);
            }
        },
        tryGetResource: function (resourceKey, value) {
            if ((this.getResources() == null || !this.getResources().tryGetValue(resourceKey, value)) && (this.getResourceInheritanceParent$1() == null || !this.getResourceInheritanceParent$1().System$Windows$IResourceContainer$tryGetResource(resourceKey, value))) {
                value.v = null;
                return false;
            }

            return true;
        },
        onParentResourcesChanged: function (sender, e) {
            this.raiseResourcesChanged(e);
        },
        onResourceDictionaryChanged: function (sender, e) {
            this.raiseResourcesChanged(e);
        },
        raiseResourcesChanged: function (e) {
            this.onResourcesChanged(e);
            Granular.Extensions.EventHandlerExtensions.raise$4(System.Windows.ResourcesChangedEventArgs, this.ResourcesChanged, this, e);
        },
        onResourcesChanged: function (e) {
            if (this.getDefaultStyleKey() == null || !e.contains(this.getDefaultStyleKey())) {
                return;
            }

            var value = { };
            if (!this.tryGetResource(this.getDefaultStyleKey(), value)) {
                value.v = null;
            }

            this.setValue(System.Windows.FrameworkElement.styleProperty, value.v, System.Windows.BaseValueSource.Default);
        },
        setResourceInheritanceParent: function (parent) {
            this.setResourceInheritanceParent$1(parent);
        },
        onTemplateChildChanged: function () {
            //
        },
        onTriggersCollectionChanged: function (sender, e) {
            var $t, $t1;
            $t = Bridge.getEnumerator(e.getOldItems(), Object);
            while ($t.moveNext()) {
                var trigger = Bridge.cast($t.getCurrent(), System.Windows.ITrigger);
                trigger.System$Windows$ITrigger$detach(this, System.Windows.BaseValueSource.Local);

                if (Bridge.is(trigger, System.Windows.IContextElement)) {
                    Bridge.cast(trigger, System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(null);
                }
            }

            $t1 = Bridge.getEnumerator(e.getNewItems(), Object);
            while ($t1.moveNext()) {
                var trigger1 = Bridge.cast($t1.getCurrent(), System.Windows.ITrigger);
                if (Bridge.is(trigger1, System.Windows.IContextElement)) {
                    Bridge.cast(trigger1, System.Windows.IContextElement).System$Windows$IContextElement$trySetContextParent(this);
                }

                trigger1.System$Windows$ITrigger$attach(this, System.Windows.BaseValueSource.Local);
            }
        },
        onDataContextChanged: function (e) {
            System.Windows.DependencyPropertyChangedEventHandlerExtensions.raise(this.DataContextChanged, this, e);
        },
        updateCursor: function () {
            if (this.getIsMouseOver()) {
                System.Windows.ApplicationHostExtensions.getMouseDeviceFromElement(System.Windows.ApplicationHost.getCurrent(), this).updateCursor();
            }
        },
        onQueryCursor: function (e) {
            if (this.getCursor() != null && (this.getForceCursor() || !e.getHandled())) {
                e.setCursor(this.getCursor());
                e.setHandled(true);
            }
        },
        onLayoutTransformChanged: function (e) {
            var newLayoutTransform = Bridge.cast(e.getNewValue(), System.Windows.Media.Transform);
            this.layoutTransformValue = System.Windows.Media.TransformExtensions.isNullOrIdentity(newLayoutTransform) ? null : newLayoutTransform.getValue$5();
            this.invalidateVisualTransform();
        },
        onAlignmentChanged: function (e) {
            this.isDefaultAlignment = this.getHorizontalAlignment() === System.Windows.HorizontalAlignment.Stretch && this.getVerticalAlignment() === System.Windows.VerticalAlignment.Stretch;
        },
        getVisualTransformOverride: function () {
            if (System.Windows.Media.MatrixExtensions.isNullOrIdentity(this.layoutTransformValue)) {
                return System.Windows.UIElement.prototype.getVisualTransformOverride.call(this);
            }

            return System.Windows.Media.Matrix.op_Multiply(this.layoutTransformValue, System.Windows.UIElement.prototype.getVisualTransformOverride.call(this));
        },
        setSize$1: function () {
            this.setSize(new System.Windows.Size(this.getWidth(), this.getHeight()));
        },
        setMinSize$1: function () {
            this.setMinSize(new System.Windows.Size(this.getMinWidth(), this.getMinHeight()));
        },
        setMaxSize$1: function () {
            this.setMaxSize(new System.Windows.Size(this.getMaxWidth(), this.getMaxHeight()));
        }
    });

    Bridge.ns("System.Windows.FrameworkElement", $asm.$);

    Bridge.apply($asm.$.System.Windows.FrameworkElement, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).onAlignmentChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).setSize$1();
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).setMinSize$1();
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).setMaxSize$1();
        },
        f5: function (sender, e) {
            (Bridge.as(sender, System.Windows.FrameworkElement)).onStyleChanged(e);
        },
        f6: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).onDataContextChanged(e);
        },
        f7: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).updateCursor();
        },
        f8: function (sender, e) {
            Bridge.cast(sender, System.Windows.FrameworkElement).onLayoutTransformChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.UIElementCollection", {
        inherits: [System.Collections.Generic.IList$1(System.Windows.UIElement),Granular.Collections.INotifyCollectionChanged],
        parent: null,
        children: null,
        config: {
            events: {
                CollectionChanged: null
            },
            alias: [
            "addCollectionChanged", "Granular$Collections$INotifyCollectionChanged$addCollectionChanged",
            "removeCollectionChanged", "Granular$Collections$INotifyCollectionChanged$removeCollectionChanged",
            "getCount", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$getCount",
            "getItem", "System$Collections$Generic$IList$1$System$Windows$UIElement$getItem",
            "setItem", "System$Collections$Generic$IList$1$System$Windows$UIElement$setItem",
            "getIsReadOnly", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$getIsReadOnly",
            "add", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$add",
            "clear", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$contains",
            "indexOf", "System$Collections$Generic$IList$1$System$Windows$UIElement$indexOf",
            "insert", "System$Collections$Generic$IList$1$System$Windows$UIElement$insert",
            "remove", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$remove",
            "removeAt", "System$Collections$Generic$IList$1$System$Windows$UIElement$removeAt",
            "copyTo", "System$Collections$Generic$ICollection$1$System$Windows$UIElement$copyTo",
            "getEnumerator", "System$Collections$Generic$IEnumerable$1$System$Windows$UIElement$getEnumerator"
            ]
        },
        ctor: function (parent) {
            this.$initialize();
            this.parent = parent;
            this.children = new (System.Collections.Generic.List$1(System.Windows.UIElement))();
        },
        getCount: function () {
            return this.children.getCount();
        },
        getItem: function (index) {
            return this.children.getItem(index);
        },
        setItem: function (index, value) {
            if (Bridge.referenceEquals(this.children.getItem(index), value)) {
                return;
            }

            var args = Granular.Collections.NotifyCollectionChangedEventArgs.replace(this.children.getItem(index), value, index);

            if (this.children.getItem(index) != null) {
                this.clearChildParent(this.children.getItem(index));
            }

            this.children.setItem(index, value);

            if (this.children.getItem(index) != null) {
                this.setChildParent(this.children.getItem(index));
            }

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, args);
        },
        getIsReadOnly: function () {
            return false;
        },
        add: function (item) {
            this.children.add(item);
            this.setChildParent(item);

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.add(item, this.children.getCount()));
        },
        clear: function () {
            var $t;
            var lastChildren = this.children.toArray();
            this.children.clear();

            $t = Bridge.getEnumerator(lastChildren, System.Windows.UIElement);
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                this.clearChildParent(child);
            }

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.removeRange(lastChildren, 0));
        },
        contains: function (item) {
            return this.children.contains(item);
        },
        indexOf: function (item) {
            return this.children.indexOf(item);
        },
        insert: function (index, item) {
            this.children.insert(index, item);
            this.setChildParent(item);

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.add(item, index));
        },
        remove: function (item) {
            var index = this.children.indexOf(item);
            if (index === -1) {
                return false;
            }

            var result = this.children.remove(item);
            this.clearChildParent(item);

            Granular.Collections.NotifyCollectionChangedEventHandlerExtensions.raise(this.CollectionChanged, this, Granular.Collections.NotifyCollectionChangedEventArgs.remove(item, index));

            return result;
        },
        removeAt: function (index) {
            this.remove(this.children.getItem(index));
        },
        copyTo: function (array, arrayIndex) {
            this.children.copyTo(array, arrayIndex);
        },
        clearChildParent: function (child) {
            this.parent.removeLogicalChild(child);
            this.parent.removeVisualChild(child);
        },
        setChildParent: function (child) {
            this.parent.addLogicalChild(child);
            this.parent.addVisualChild(child);
        },
        getEnumerator: function () {
            return this.children.getEnumerator();
        },
        System$Collections$IEnumerable$getEnumerator: function () {
            return this.getEnumerator();
        }
    });

    Bridge.define("System.Windows.DataTriggerBase", {
        inherits: [System.Windows.TriggerBase,System.Windows.IDataTriggerConditionProvider],
        attachedConditions: null,
        config: {
            alias: [
            "attach", "System$Windows$ITrigger$attach",
            "detach", "System$Windows$ITrigger$detach"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.TriggerBase.ctor.call(this);
            this.attachedConditions = new (System.Collections.Generic.Dictionary$2(System.Windows.FrameworkElement,System.Windows.IDataTriggerCondition))();
        },
        attach: function (element, valueSource) {
            var condition = this.createDataTriggerCondition(element);

            condition.System$Windows$IDataTriggerCondition$addIsMatchedChanged(Bridge.fn.bind(this, function (sender, e) {
                this.onConditionIsMatchedChanged(element, valueSource, condition.System$Windows$IDataTriggerCondition$getIsMatched());
            }));

            if (condition.System$Windows$IDataTriggerCondition$getIsMatched()) {
                this.apply(element, valueSource);
            }

            this.attachedConditions.add(element, condition);
        },
        detach: function (element, valueSource) {
            var condition = this.attachedConditions.get(element);

            if (condition.System$Windows$IDataTriggerCondition$getIsMatched()) {
                this.clean(element, valueSource);
            }

            if (Bridge.is(condition, System.IDisposable)) {
                Bridge.cast(condition, System.IDisposable).System$IDisposable$dispose();
            }

            this.attachedConditions.remove(element);
        },
        onConditionIsMatchedChanged: function (element, valueSource, isMatched) {
            if (isMatched) {
                this.apply(element, valueSource);
            } else {
                this.clean(element, valueSource);
            }
        },
        apply: function (element, valueSource) {
            var $t;
            $t = Bridge.getEnumerator(this.getTriggerActions(), System.Windows.ITriggerAction);
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$apply(element, valueSource);
            }
        },
        clean: function (element, valueSource) {
            var $t;
            $t = Bridge.getEnumerator(this.getTriggerActions(), System.Windows.ITriggerAction);
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$clean(element, valueSource);
            }
        }
    });

    Bridge.define("System.Windows.Media.Transform", {
        inherits: [System.Windows.Media.Animation.Animatable],
        statics: {
            identity: null,
            config: {
                init: function () {
                    this.identity = System.Windows.Media.Transform.createIdentityTransform();
                }
            },
            createIdentityTransform: function () {
                var identityTransform = new System.Windows.Media.Transform.IdentityTransform();
                identityTransform.freeze();
                return identityTransform;
            }
        }
    });

    Bridge.define("System.Windows.Documents.TextElement", {
        inherits: [System.Windows.FrameworkContentElement],
        statics: {
            backgroundProperty: null,
            foregroundProperty: null,
            fontFamilyProperty: null,
            fontSizeProperty: null,
            fontStyleProperty: null,
            fontWeightProperty: null,
            fontStretchProperty: null,
            config: {
                init: function () {
                    this.backgroundProperty = System.Windows.Controls.Panel.backgroundProperty.addOwner(System.Windows.Documents.TextElement);
                    this.foregroundProperty = System.Windows.DependencyProperty.registerAttached("Foreground", System.Windows.Media.Brush, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Media.Brushes.getBlack(), System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.fontFamilyProperty = System.Windows.DependencyProperty.registerAttached("FontFamily", System.Windows.Media.FontFamily, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Media.FontFamily.default, System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.fontSizeProperty = System.Windows.DependencyProperty.registerAttached("FontSize", System.Double, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor2(11.0, System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.fontStyleProperty = System.Windows.DependencyProperty.registerAttached("FontStyle", System.Windows.FontStyle, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.fontWeightProperty = System.Windows.DependencyProperty.registerAttached("FontWeight", System.Windows.FontWeight, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.fontStretchProperty = System.Windows.DependencyProperty.registerAttached("FontStretch", System.Windows.FontStretch, System.Windows.Documents.TextElement, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                }
            }
        },
        getBackground: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.TextElement.backgroundProperty), System.Windows.Media.Brush);
        },
        setBackground: function (value) {
            this.setValue(System.Windows.Documents.TextElement.backgroundProperty, value);
        },
        getForeground: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.TextElement.foregroundProperty), System.Windows.Media.Brush);
        },
        setForeground: function (value) {
            this.setValue(System.Windows.Documents.TextElement.foregroundProperty, value);
        },
        getFontFamily: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.TextElement.fontFamilyProperty), System.Windows.Media.FontFamily);
        },
        setFontFamily: function (value) {
            this.setValue(System.Windows.Documents.TextElement.fontFamilyProperty, value);
        },
        getFontSize: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.TextElement.fontSizeProperty), System.Double));
        },
        setFontSize: function (value) {
            this.setValue(System.Windows.Documents.TextElement.fontSizeProperty, value);
        },
        getFontStyle: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.TextElement.fontStyleProperty), System.Int32));
        },
        setFontStyle: function (value) {
            this.setValue(System.Windows.Documents.TextElement.fontStyleProperty, value);
        },
        getFontWeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.TextElement.fontWeightProperty), System.Int32));
        },
        setFontWeight: function (value) {
            this.setValue(System.Windows.Documents.TextElement.fontWeightProperty, value);
        },
        getFontStretch: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.TextElement.fontStretchProperty), System.Int32));
        },
        setFontStretch: function (value) {
            this.setValue(System.Windows.Documents.TextElement.fontStretchProperty, value);
        }
    });

    Bridge.define("System.Windows.EventTriggerBase", {
        inherits: [System.Windows.TriggerBase],
        attachedConditions: null,
        config: {
            alias: [
            "attach", "System$Windows$ITrigger$attach",
            "detach", "System$Windows$ITrigger$detach"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.TriggerBase.ctor.call(this);
            this.attachedConditions = new (System.Collections.Generic.Dictionary$2(System.Windows.FrameworkElement,System.Windows.IEventTriggerCondition))();
        },
        attach: function (element, valueSource) {
            var condition = this.createEventTriggerCondition(element);

            condition.System$Windows$IEventTriggerCondition$addEventRaised(Bridge.fn.bind(this, function (sender, e) {
                this.apply(element, valueSource);
            }));

            this.attachedConditions.add(element, condition);
        },
        detach: function (element, valueSource) {
            var condition = this.attachedConditions.get(element);

            this.clean(element, valueSource);

            if (Bridge.is(condition, System.IDisposable)) {
                Bridge.cast(condition, System.IDisposable).System$IDisposable$dispose();
            }

            this.attachedConditions.remove(element);
        },
        apply: function (element, valueSource) {
            var $t;
            $t = Bridge.getEnumerator(this.getTriggerActions(), System.Windows.ITriggerAction);
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$apply(element, valueSource);
            }
        },
        clean: function (element, valueSource) {
            var $t;
            $t = Bridge.getEnumerator(this.getTriggerActions(), System.Windows.ITriggerAction);
            while ($t.moveNext()) {
                var action = $t.getCurrent();
                action.System$Windows$ITriggerAction$clean(element, valueSource);
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyboardFocusChangedEventArgs", {
        inherits: [System.Windows.Input.KeyboardEventArgs],
        config: {
            properties: {
                OldFocus: null,
                NewFocus: null
            }
        },
        ctor: function (routedEvent, originalSource, keyboardDevice, timestamp, oldFocus, newFocus) {
            this.$initialize();
            System.Windows.Input.KeyboardEventArgs.ctor.call(this, routedEvent, originalSource, keyboardDevice, timestamp);
            this.setOldFocus(oldFocus);
            this.setNewFocus(newFocus);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.KeyboardEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Input.KeyEventArgs", {
        inherits: [System.Windows.Input.KeyboardEventArgs],
        config: {
            properties: {
                Key: 0,
                KeyStates: 0,
                IsRepeat: false,
                ForceHostHandling: false
            }
        },
        ctor: function (routedEvent, originalSource, keyboardDevice, timestamp, key, keyStates, isRepeat) {
            this.$initialize();
            System.Windows.Input.KeyboardEventArgs.ctor.call(this, routedEvent, originalSource, keyboardDevice, timestamp);
            this.setKey(key);
            this.setKeyStates(keyStates);
            this.setIsRepeat(isRepeat);
        },
        getIsUp: function () {
            return this.getKeyStates() === System.Windows.Input.KeyStates.None;
        },
        getIsDown: function () {
            return this.getKeyStates() === System.Windows.Input.KeyStates.Down;
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.KeyboardEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Input.MouseButtonEventArgs", {
        inherits: [System.Windows.Input.MouseEventArgs],
        config: {
            properties: {
                ChangedButton: 0,
                ButtonState: 0,
                ClickCount: 0
            }
        },
        ctor: function (routedEvent, originalSource, mouseDevice, timestamp, absolutePosition, changedButton, buttonState, clickCount) {
            this.$initialize();
            System.Windows.Input.MouseEventArgs.ctor.call(this, routedEvent, originalSource, mouseDevice, timestamp, absolutePosition);
            this.setChangedButton(changedButton);
            this.setButtonState(buttonState);
            this.setClickCount(clickCount);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.MouseEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Input.MouseWheelEventArgs", {
        inherits: [System.Windows.Input.MouseEventArgs],
        config: {
            properties: {
                Delta: 0
            }
        },
        ctor: function (routedEvent, originalSource, mouseDevice, timestamp, absolutePosition, delta) {
            this.$initialize();
            System.Windows.Input.MouseEventArgs.ctor.call(this, routedEvent, originalSource, mouseDevice, timestamp, absolutePosition);
            this.setDelta(delta);
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.MouseEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Input.QueryCursorEventArgs", {
        inherits: [System.Windows.Input.MouseEventArgs],
        config: {
            properties: {
                Cursor: null
            }
        },
        ctor: function (routedEvent, originalSource, mouseDevice, timestamp, absolutePosition) {
            this.$initialize();
            System.Windows.Input.MouseEventArgs.ctor.call(this, routedEvent, originalSource, mouseDevice, timestamp, absolutePosition);
            //
        },
        invokeEventHandler: function (handler, target) {
            if (Bridge.is(handler, Function)) {
                handler(target, this);
            } else {
                System.Windows.Input.MouseEventArgs.prototype.invokeEventHandler.call(this, handler, target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.AnimationTimeline", {
        inherits: [System.Windows.Media.Animation.Timeline],
        statics: {
            isAdditiveProperty: null,
            isCumulativeProperty: null,
            config: {
                init: function () {
                    this.isAdditiveProperty = System.Windows.DependencyProperty.register("IsAdditive", Boolean, System.Windows.Media.Animation.AnimationTimeline, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isCumulativeProperty = System.Windows.DependencyProperty.register("IsCumulative", Boolean, System.Windows.Media.Animation.AnimationTimeline, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        getIsAdditive: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.AnimationTimeline.isAdditiveProperty), Boolean));
        },
        setIsAdditive: function (value) {
            this.setValue(System.Windows.Media.Animation.AnimationTimeline.isAdditiveProperty, value);
        },
        getIsCumulative: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.AnimationTimeline.isCumulativeProperty), Boolean));
        },
        setIsCumulative: function (value) {
            this.setValue(System.Windows.Media.Animation.AnimationTimeline.isCumulativeProperty, value);
        },
        createClock: function () {
            return new System.Windows.Media.Animation.AnimationTimelineClock(this);
        }
    });

    Bridge.define("System.Windows.Media.Animation.BackEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        statics: {
            amplitudeProperty: null,
            config: {
                init: function () {
                    this.amplitudeProperty = System.Windows.DependencyProperty.register("Amplitude", System.Double, System.Windows.Media.Animation.BackEase, new System.Windows.FrameworkPropertyMetadata.$ctor1(1.0));
                }
            }
        },
        getAmplitude: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.BackEase.amplitudeProperty), System.Double));
        },
        setAmplitude: function (value) {
            this.setValue(System.Windows.Media.Animation.BackEase.amplitudeProperty, value);
        },
        easeOverride: function (normalizedTime) {
            return Math.pow(normalizedTime, 3.0) - normalizedTime * Granular.Extensions.DoubleExtensions.max(this.getAmplitude(), 0) * Math.sin(Math.PI * normalizedTime);
        }
    });

    Bridge.define("System.Windows.Media.Animation.CircleEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            normalizedTime = Granular.Extensions.DoubleExtensions.bounds(normalizedTime, 0, 1);
            return 1.0 - Math.sqrt(1.0 - normalizedTime * normalizedTime);
        }
    });

    Bridge.define("System.Windows.Media.Animation.CubicEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            return normalizedTime * normalizedTime * normalizedTime;
        }
    });

    Bridge.define("System.Windows.Media.Animation.DiscreteKeyFrame$1", function (T) { return {
        inherits: [System.Windows.Media.Animation.KeyFrame$1(T)],
        animationOperations: null,
        ctor: function (animationOperations) {
            this.$initialize();
            System.Windows.Media.Animation.KeyFrame$1(T).ctor.call(this);
            this.animationOperations = animationOperations;
        },
        interpolateValue: function (baseValue, keyFrameProgress) {
            return keyFrameProgress < 1 ? baseValue : this.getValue$5();
        }
    }; });

    Bridge.define("System.Windows.Media.Animation.EasingKeyFrame$1", function (T) { return {
        inherits: [System.Windows.Media.Animation.KeyFrame$1(T)],
        statics: {
            easingFunctionProperty: null,
            config: {
                init: function () {
                    this.easingFunctionProperty = System.Windows.Media.Animation.KeyFrame$1(T).dependencyPropertyRegisterNonGeneric("EasingFunction", System.Windows.Media.Animation.IEasingFunction, System.Windows.Media.Animation.EasingKeyFrame$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        animationOperations: null,
        ctor: function (animationOperations) {
            this.$initialize();
            System.Windows.Media.Animation.KeyFrame$1(T).ctor.call(this);
            this.animationOperations = animationOperations;
        },
        getEasingFunction: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.EasingKeyFrame$1(T).easingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
        },
        setEasingFunction: function (value) {
            this.setValue(System.Windows.Media.Animation.EasingKeyFrame$1(T).easingFunctionProperty, value);
        },
        interpolateValue: function (baseValue, keyFrameProgress) {
            if (this.getEasingFunction() != null) {
                keyFrameProgress = this.getEasingFunction().System$Windows$Media$Animation$IEasingFunction$ease(keyFrameProgress);
            }

            return this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$interpolate"](baseValue, this.getValue$5(), keyFrameProgress);
        }
    }; });

    Bridge.define("System.Windows.Media.Animation.ElasticEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        statics: {
            oscillationsProperty: null,
            springinessProperty: null,
            config: {
                init: function () {
                    this.oscillationsProperty = System.Windows.DependencyProperty.register("Oscillations", System.Double, System.Windows.Media.Animation.ElasticEase, new System.Windows.FrameworkPropertyMetadata.$ctor1(3.0));
                    this.springinessProperty = System.Windows.DependencyProperty.register("Springiness", System.Double, System.Windows.Media.Animation.ElasticEase, new System.Windows.FrameworkPropertyMetadata.$ctor1(3.0));
                }
            }
        },
        getOscillations: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.ElasticEase.oscillationsProperty), System.Double));
        },
        setOscillations: function (value) {
            this.setValue(System.Windows.Media.Animation.ElasticEase.oscillationsProperty, value);
        },
        getSpringiness: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.ElasticEase.springinessProperty), System.Double));
        },
        setSpringiness: function (value) {
            this.setValue(System.Windows.Media.Animation.ElasticEase.springinessProperty, value);
        },
        easeOverride: function (normalizedTime) {
            var springiness = Granular.Extensions.DoubleExtensions.max(this.getSpringiness(), 0);
            return (Granular.Extensions.DoubleExtensions.isClose(springiness, 0) ? normalizedTime : (Math.exp(springiness * normalizedTime) - 1.0) / (Math.exp(springiness) - 1.0)) * (Math.sin((Math.PI * 2.0 * Granular.Extensions.DoubleExtensions.max(this.getOscillations(), 0) + Math.PI * 0.5) * normalizedTime));
        }
    });

    Bridge.define("System.Windows.Media.Animation.ExponentialEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        statics: {
            exponentProperty: null,
            config: {
                init: function () {
                    this.exponentProperty = System.Windows.DependencyProperty.register("Exponent", System.Double, System.Windows.Media.Animation.ExponentialEase, new System.Windows.FrameworkPropertyMetadata.$ctor1(2.0));
                }
            }
        },
        getExponent: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.ExponentialEase.exponentProperty), System.Double));
        },
        setExponent: function (value) {
            this.setValue(System.Windows.Media.Animation.ExponentialEase.exponentProperty, value);
        },
        easeOverride: function (normalizedTime) {
            return Granular.Extensions.DoubleExtensions.isClose(this.getExponent(), 0) ? normalizedTime : (Math.exp(this.getExponent() * normalizedTime) - 1.0) / (Math.exp(this.getExponent()) - 1.0);
        }
    });

    Bridge.define("System.Windows.Media.Animation.LinearKeyFrame$1", function (T) { return {
        inherits: [System.Windows.Media.Animation.KeyFrame$1(T)],
        animationOperations: null,
        ctor: function (animationOperations) {
            this.$initialize();
            System.Windows.Media.Animation.KeyFrame$1(T).ctor.call(this);
            this.animationOperations = animationOperations;
        },
        interpolateValue: function (baseValue, keyFrameProgress) {
            return this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$interpolate"](baseValue, this.getValue$5(), keyFrameProgress);
        }
    }; });

    Bridge.define("System.Windows.Media.Animation.TimelineGroup", {
        inherits: [System.Windows.Media.Animation.Timeline],
        statics: {
            ctor: function () {
                System.Windows.Media.Animation.Timeline.durationProperty.overrideMetadata(System.Windows.Media.Animation.TimelineGroup, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Duration.automatic));
            }
        },
        config: {
            properties: {
                Children: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.Timeline.ctor.call(this);
            this.setChildren(new (Granular.Collections.ObservableCollection$1(System.Windows.Media.Animation.Timeline)).ctor());
            this.getChildren().addCollectionChanged(Bridge.fn.cacheBind(this, this.onChildrenCollectionChanged));
        },
        createClock: function () {
            return this.createGroupClock(System.Linq.Enumerable.from(this.getChildren()).select($asm.$.System.Windows.Media.Animation.TimelineGroup.f1).toArray());
        },
        onChildrenCollectionChanged: function (sender, e) {
            var $t, $t1;
            $t = Bridge.getEnumerator(e.getOldItems(), Object);
            while ($t.moveNext()) {
                var timeline = Bridge.cast($t.getCurrent(), System.Windows.Media.Animation.Timeline);
                timeline.setParent(null);
            }

            $t1 = Bridge.getEnumerator(e.getNewItems(), Object);
            while ($t1.moveNext()) {
                var timeline1 = Bridge.cast($t1.getCurrent(), System.Windows.Media.Animation.Timeline);
                timeline1.setParent(this);
            }
        }
    });

    Bridge.ns("System.Windows.Media.Animation.TimelineGroup", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.TimelineGroup, {
        f1: function (child) {
            return child.createClock();
        }
    });

    Bridge.define("System.Windows.Media.Animation.ParallelTimelineClock", {
        inherits: [System.Windows.Media.Animation.TimelineGroupClock],
        ctor: function (parallelTimeline, children) {
            this.$initialize();
            System.Windows.Media.Animation.TimelineGroupClock.ctor.call(this, new System.Windows.Media.Animation.ParallelClock(children), parallelTimeline, children);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.PauseStoryboard", {
        inherits: [System.Windows.Media.Animation.StoryboardAction],
        config: {
            alias: [
            "apply", "System$Windows$ITriggerAction$apply"
            ]
        },
        apply: function (target, valueSource) {
            var beginStoryboard = this.getBeginStoryboard(target);

            if (beginStoryboard != null) {
                beginStoryboard.pause(target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.PowerEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        statics: {
            powerProperty: null,
            config: {
                init: function () {
                    this.powerProperty = System.Windows.DependencyProperty.register("Power", System.Double, System.Windows.Media.Animation.PowerEase, new System.Windows.FrameworkPropertyMetadata.$ctor1(2.0));
                }
            }
        },
        getPower: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Animation.PowerEase.powerProperty), System.Double));
        },
        setPower: function (value) {
            this.setValue(System.Windows.Media.Animation.PowerEase.powerProperty, value);
        },
        easeOverride: function (normalizedTime) {
            return Math.pow(normalizedTime, Granular.Extensions.DoubleExtensions.max(this.getPower(), 0));
        }
    });

    Bridge.define("System.Windows.Media.Animation.QuadraticEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            return normalizedTime * normalizedTime;
        }
    });

    Bridge.define("System.Windows.Media.Animation.QuarticEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            return normalizedTime * normalizedTime * normalizedTime * normalizedTime;
        }
    });

    Bridge.define("System.Windows.Media.Animation.QuinticEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            return normalizedTime * normalizedTime * normalizedTime * normalizedTime * normalizedTime;
        }
    });

    Bridge.define("System.Windows.Media.Animation.RemoveStoryboard", {
        inherits: [System.Windows.Media.Animation.StoryboardAction],
        config: {
            alias: [
            "apply", "System$Windows$ITriggerAction$apply"
            ]
        },
        apply: function (target, valueSource) {
            var beginStoryboard = this.getBeginStoryboard(target);

            if (beginStoryboard != null) {
                var nameScope = valueSource === System.Windows.BaseValueSource.Local ? System.Windows.NameScope.getContainingNameScope(target) : System.Windows.NameScope.getTemplateNameScope(target);
                var layerOwner = valueSource === System.Windows.BaseValueSource.Local ? null : target.getTemplatedParent();
                beginStoryboard.remove(target, nameScope, layerOwner);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.ResumeStoryboard", {
        inherits: [System.Windows.Media.Animation.StoryboardAction],
        config: {
            alias: [
            "apply", "System$Windows$ITriggerAction$apply"
            ]
        },
        apply: function (target, valueSource) {
            var beginStoryboard = this.getBeginStoryboard(target);

            if (beginStoryboard != null) {
                beginStoryboard.resume(target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.SequentialTimelineClock", {
        inherits: [System.Windows.Media.Animation.TimelineGroupClock],
        ctor: function (SequentialTimeline, children) {
            this.$initialize();
            System.Windows.Media.Animation.TimelineGroupClock.ctor.call(this, new System.Windows.Media.Animation.SequentialClock(children), SequentialTimeline, children);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.SineEase", {
        inherits: [System.Windows.Media.Animation.EasingFunctionBase],
        easeOverride: function (normalizedTime) {
            return 1.0 - Math.sin(Math.PI * 0.5 * (1 - normalizedTime));
        }
    });

    Bridge.define("System.Windows.Media.Animation.SkipToFillStoryboard", {
        inherits: [System.Windows.Media.Animation.StoryboardAction],
        config: {
            alias: [
            "apply", "System$Windows$ITriggerAction$apply"
            ]
        },
        apply: function (target, valueSource) {
            var beginStoryboard = this.getBeginStoryboard(target);

            if (beginStoryboard != null) {
                beginStoryboard.skipToFill(target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Animation.StopStoryboard", {
        inherits: [System.Windows.Media.Animation.StoryboardAction],
        config: {
            alias: [
            "apply", "System$Windows$ITriggerAction$apply"
            ]
        },
        apply: function (target, valueSource) {
            var beginStoryboard = this.getBeginStoryboard(target);

            if (beginStoryboard != null) {
                beginStoryboard.stop(target);
            }
        }
    });

    Bridge.define("System.Windows.Media.Brush", {
        inherits: [System.Windows.Media.Animation.Animatable],
        statics: {
            opacityProperty: null,
            config: {
                init: function () {
                    this.opacityProperty = System.Windows.DependencyProperty.register("Opacity", System.Double, System.Windows.Media.Brush, new System.Windows.FrameworkPropertyMetadata.$ctor1(1.0));
                }
            }
        },
        getOpacity: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Brush.opacityProperty), System.Double));
        },
        setOpacity: function (value) {
            this.setValue(System.Windows.Media.Brush.opacityProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.GradientStop", {
        inherits: [System.Windows.Media.Animation.Animatable],
        statics: {
            colorProperty: null,
            offsetProperty: null,
            config: {
                init: function () {
                    this.colorProperty = System.Windows.DependencyProperty.register("Color", System.Windows.Media.Color, System.Windows.Media.GradientStop, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.Colors.getTransparent()));
                    this.offsetProperty = System.Windows.DependencyProperty.register("Offset", System.Double, System.Windows.Media.GradientStop, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.Animatable.ctor.call(this);
            //
        },
        $ctor1: function (color, offset) {
            this.$initialize();
            System.Windows.Media.Animation.Animatable.ctor.call(this);
            this.setColor(color);
            this.setOffset(offset);
        },
        getColor: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.GradientStop.colorProperty), System.Windows.Media.Color);
        },
        setColor: function (value) {
            this.setValue(System.Windows.Media.GradientStop.colorProperty, value);
        },
        getOffset: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.GradientStop.offsetProperty), System.Double));
        },
        setOffset: function (value) {
            this.setValue(System.Windows.Media.GradientStop.offsetProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.GradientStopCollection", {
        inherits: [System.Windows.FreezableCollection$1(System.Windows.Media.GradientStop)],
        ctor: function () {
            this.$initialize();
            System.Windows.FreezableCollection$1(System.Windows.Media.GradientStop).ctor.call(this);
            //
        },
        $ctor1: function (collection) {
            this.$initialize();
            System.Windows.FreezableCollection$1(System.Windows.Media.GradientStop).$ctor1.call(this, collection);
            //
        }
    });

    Bridge.define("System.Windows.Media.ImageSource", {
        inherits: [System.Windows.Media.Animation.Animatable],
        getSize: function () {
            return this.getRenderImageSource() != null ? this.getRenderImageSource().System$Windows$Media$IRenderImageSource$getSize() : System.Windows.Size.empty;
        }
    });

    Bridge.define("System.Windows.Controls.Decorator", {
        inherits: [System.Windows.FrameworkElement],
        child: null,
        getChild: function () {
            return this.child;
        },
        setChild: function (value) {
            if (Bridge.referenceEquals(this.child, value)) {
                return;
            }

            if (this.child != null) {
                this.removeLogicalChild(this.child);
                this.removeVisualChild(this.child);
            }

            this.child = value;

            if (this.child != null) {
                this.addLogicalChild(this.child);
                this.addVisualChild(this.child);
            }

            this.invalidateMeasure();
            this.invalidateArrange();
        },
        measureOverride: function (availableSize) {
            if (this.getChild() == null) {
                return System.Windows.Size.zero;
            }

            this.getChild().measure(availableSize);
            return this.getChild().getDesiredSize();
        },
        arrangeOverride: function (finalSize) {
            if (this.getChild() != null) {
                this.getChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        }
    });

    Bridge.define("System.Windows.Controls.Control", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            ctor: function () {
                System.Windows.UIElement.focusableProperty.overrideMetadata(System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));

                System.Windows.EventManager.registerClassHandler(System.Windows.Controls.Control, System.Windows.UIElement.previewMouseDownEvent, System.Windows.Controls.Control.onPreviewMouseDown, true);
                System.Windows.EventManager.registerClassHandler(System.Windows.Controls.Control, System.Windows.UIElement.mouseDownEvent, System.Windows.Controls.Control.onMouseDown, true);
            },
            previewMouseDoubleClickEvent: null,
            mouseDoubleClickEvent: null,
            templateProperty: null,
            backgroundProperty: null,
            foregroundProperty: null,
            fontFamilyProperty: null,
            fontSizeProperty: null,
            fontStyleProperty: null,
            fontWeightProperty: null,
            fontStretchProperty: null,
            borderBrushProperty: null,
            borderThicknessProperty: null,
            horizontalContentAlignmentProperty: null,
            verticalContentAlignmentProperty: null,
            paddingProperty: null,
            isTabStopProperty: null,
            tabIndexProperty: null,
            config: {
                init: function () {
                    this.previewMouseDoubleClickEvent = System.Windows.EventManager.registerRoutedEvent("PreviewMouseDoubleClick", System.Windows.RoutingStrategy.Tunnel, Function, System.Windows.Controls.Control);
                    this.mouseDoubleClickEvent = System.Windows.EventManager.registerRoutedEvent("MouseDoubleClick", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Control);
                    this.templateProperty = System.Windows.DependencyProperty.register("Template", System.Windows.Controls.ControlTemplate, System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Control.f1));
                    this.backgroundProperty = System.Windows.Controls.Panel.backgroundProperty.addOwner(System.Windows.Controls.Control);
                    this.foregroundProperty = System.Windows.Documents.TextElement.foregroundProperty.addOwner(System.Windows.Controls.Control);
                    this.fontFamilyProperty = System.Windows.Documents.TextElement.fontFamilyProperty.addOwner(System.Windows.Controls.Control);
                    this.fontSizeProperty = System.Windows.Documents.TextElement.fontSizeProperty.addOwner(System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor8(33));
                    this.fontStyleProperty = System.Windows.Documents.TextElement.fontStyleProperty.addOwner(System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor8(33));
                    this.fontWeightProperty = System.Windows.Documents.TextElement.fontWeightProperty.addOwner(System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor8(33));
                    this.fontStretchProperty = System.Windows.Documents.TextElement.fontStretchProperty.addOwner(System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor8(33));
                    this.borderBrushProperty = System.Windows.Controls.Border.borderBrushProperty.addOwner(System.Windows.Controls.Control);
                    this.borderThicknessProperty = System.Windows.Controls.Border.borderThicknessProperty.addOwner(System.Windows.Controls.Control);
                    this.horizontalContentAlignmentProperty = System.Windows.DependencyProperty.register("HorizontalContentAlignment", System.Windows.HorizontalAlignment, System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.HorizontalAlignment.Left));
                    this.verticalContentAlignmentProperty = System.Windows.DependencyProperty.register("VerticalContentAlignment", System.Windows.VerticalAlignment, System.Windows.Controls.Control, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.VerticalAlignment.Top));
                    this.paddingProperty = System.Windows.Controls.Border.paddingProperty.addOwner(System.Windows.Controls.Control);
                    this.isTabStopProperty = System.Windows.Input.KeyboardNavigation.isTabStopProperty.addOwner(System.Windows.Controls.Control);
                    this.tabIndexProperty = System.Windows.Input.KeyboardNavigation.tabIndexProperty.addOwner(System.Windows.Controls.Control);
                }
            },
            onPreviewMouseDown: function (sender, e) {
                if (e.getClickCount() === 2 && Bridge.cast(sender, System.Windows.Controls.Control).raiseMouseButtonEvent(e, System.Windows.Controls.Control.previewMouseDoubleClickEvent)) {
                    e.setHandled(true);
                }
            },
            onMouseDown: function (sender, e) {
                if (e.getClickCount() === 2 && Bridge.cast(sender, System.Windows.Controls.Control).raiseMouseButtonEvent(e, System.Windows.Controls.Control.mouseDoubleClickEvent)) {
                    e.setHandled(true);
                }
            }
        },
        addPreviewMouseDoubleClick: function (value) {
            this.addHandler(System.Windows.Controls.Control.previewMouseDoubleClickEvent, value);
        },
        removePreviewMouseDoubleClick: function (value) {
            this.removeHandler(System.Windows.Controls.Control.previewMouseDoubleClickEvent, value);
        },
        addMouseDoubleClick: function (value) {
            this.addHandler(System.Windows.Controls.Control.mouseDoubleClickEvent, value);
        },
        removeMouseDoubleClick: function (value) {
            this.removeHandler(System.Windows.Controls.Control.mouseDoubleClickEvent, value);
        },
        getTemplate$1: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.templateProperty), System.Windows.Controls.ControlTemplate);
        },
        setTemplate$1: function (value) {
            this.setValue(System.Windows.Controls.Control.templateProperty, value);
        },
        getBackground: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.backgroundProperty), System.Windows.Media.Brush);
        },
        setBackground: function (value) {
            this.setValue(System.Windows.Controls.Control.backgroundProperty, value);
        },
        getForeground: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.foregroundProperty), System.Windows.Media.Brush);
        },
        setForeground: function (value) {
            this.setValue(System.Windows.Controls.Control.foregroundProperty, value);
        },
        getFontFamily: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.fontFamilyProperty), System.Windows.Media.FontFamily);
        },
        setFontFamily: function (value) {
            this.setValue(System.Windows.Controls.Control.fontFamilyProperty, value);
        },
        getFontSize: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontSizeProperty), System.Double));
        },
        setFontSize: function (value) {
            this.setValue(System.Windows.Controls.Control.fontSizeProperty, value);
        },
        getFontStyle: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontStyleProperty), System.Int32));
        },
        setFontStyle: function (value) {
            this.setValue(System.Windows.Controls.Control.fontStyleProperty, value);
        },
        getFontWeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontWeightProperty), System.Int32));
        },
        setFontWeight: function (value) {
            this.setValue(System.Windows.Controls.Control.fontWeightProperty, value);
        },
        getFontStretch: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontStretchProperty), System.Int32));
        },
        setFontStretch: function (value) {
            this.setValue(System.Windows.Controls.Control.fontStretchProperty, value);
        },
        getBorderBrush: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.borderBrushProperty), System.Windows.Media.Brush);
        },
        setBorderBrush: function (value) {
            this.setValue(System.Windows.Controls.Control.borderBrushProperty, value);
        },
        getBorderThickness: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.borderThicknessProperty), System.Windows.Thickness);
        },
        setBorderThickness: function (value) {
            this.setValue(System.Windows.Controls.Control.borderThicknessProperty, value);
        },
        getHorizontalContentAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.horizontalContentAlignmentProperty), System.Int32));
        },
        setHorizontalContentAlignment: function (value) {
            this.setValue(System.Windows.Controls.Control.horizontalContentAlignmentProperty, value);
        },
        getVerticalContentAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.verticalContentAlignmentProperty), System.Int32));
        },
        setVerticalContentAlignment: function (value) {
            this.setValue(System.Windows.Controls.Control.verticalContentAlignmentProperty, value);
        },
        getPadding: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Control.paddingProperty), System.Windows.Thickness);
        },
        setPadding: function (value) {
            this.setValue(System.Windows.Controls.Control.paddingProperty, value);
        },
        getIsTabStop: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.isTabStopProperty), Boolean));
        },
        setIsTabStop: function (value) {
            this.setValue(System.Windows.Controls.Control.isTabStopProperty, value);
        },
        getTabIndex: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.tabIndexProperty), System.Int32));
        },
        setTabIndex: function (value) {
            this.setValue(System.Windows.Controls.Control.tabIndexProperty, value);
        },
        onPropertyChanged: function (e) {
            System.Windows.FrameworkElement.prototype.onPropertyChanged.call(this, e);

            var metadata = Bridge.as(e.getProperty().getMetadata(Bridge.getType(this)), System.Windows.FrameworkPropertyMetadata);

            if (metadata != null && metadata.getAffectsVisualState()) {
                this.updateVisualState(true);
            }
        },
        measureOverride: function (availableSize) {
            if (this.getTemplateChild() == null) {
                return System.Windows.Size.zero;
            }

            this.getTemplateChild().measure(availableSize);
            return this.getTemplateChild().getDesiredSize();
        },
        arrangeOverride: function (finalSize) {
            if (this.getTemplateChild() != null) {
                this.getTemplateChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        },
        updateVisualState: function (useTransitions) {
            //
        },
        onApplyTemplate: function () {
            this.updateVisualState(false);
        },
        getTemplate: function () {
            return this.getTemplate$1();
        },
        raiseMouseButtonEvent: function (e, routedEvent) {
            var eventArgs = new System.Windows.Input.MouseButtonEventArgs(routedEvent, e.getOriginalSource(), e.getMouseDevice(), e.getTimestamp(), e.getAbsolutePosition(), e.getChangedButton(), e.getButtonState(), e.getClickCount());
            this.raiseEvent(eventArgs);
            return eventArgs.getHandled();
        }
    });

    Bridge.ns("System.Windows.Controls.Control", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Control, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Control).applyTemplate();
        }
    });

    Bridge.define("System.Windows.Controls.Panel", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            isItemsHostProperty: null,
            backgroundProperty: null,
            zIndexProperty: null,
            config: {
                init: function () {
                    this.isItemsHostProperty = System.Windows.DependencyProperty.register("IsItemsHost", Boolean, System.Windows.Controls.Panel, new System.Windows.FrameworkPropertyMetadata.$ctor6(false, $asm.$.System.Windows.Controls.Panel.f1));
                    this.backgroundProperty = System.Windows.DependencyProperty.register("Background", System.Windows.Media.Brush, System.Windows.Controls.Panel, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Panel.f2));
                    this.zIndexProperty = System.Windows.DependencyProperty.registerAttached("ZIndex", System.Int32, System.Windows.Controls.Panel, new System.Windows.FrameworkPropertyMetadata.$ctor11(System.Windows.Controls.Panel.onZIndexPropertyChanged));
                }
            },
            getZIndex: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Panel.zIndexProperty), System.Int32));
            },
            setZIndex: function (obj, value) {
                obj.setValue(System.Windows.Controls.Panel.zIndexProperty, value);
            },
            onZIndexPropertyChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Media.Visual) && Bridge.is(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.Panel)) {
                    System.Windows.Controls.Panel.moveVisualChild(Bridge.cast(dependencyObject, System.Windows.Media.Visual), System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
                }
            },
            moveVisualChild: function (child, childZIndex) {
                var childVisualIndex = Granular.Compatibility.Linq.Enumerable.count$1(System.Windows.Media.Visual, child.getVisualParent().getVisualChildren(), function (visual) {
                    return !Bridge.referenceEquals(visual, child) && System.Windows.Controls.Panel.getZIndex(visual) <= childZIndex;
                });
                child.getVisualParent().setVisualChildIndex(child, childVisualIndex);
            }
        },
        itemContainerGenerator: null,
        config: {
            properties: {
                Children: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.setChildren(new System.Windows.Controls.UIElementCollection(this));
            this.getChildren().addCollectionChanged(Bridge.fn.cacheBind(this, this.onChildrenCollectionChanged));
        },
        getIsItemsHost: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Panel.isItemsHostProperty), Boolean));
        },
        setIsItemsHost: function (value) {
            this.setValue(System.Windows.Controls.Panel.isItemsHostProperty, value);
        },
        getItemContainerGenerator: function () {
            return this.itemContainerGenerator;
        },
        setItemContainerGenerator: function (value) {
            if (Bridge.referenceEquals(this.itemContainerGenerator, value)) {
                return;
            }

            if (this.itemContainerGenerator != null) {
                this.itemContainerGenerator.System$Windows$Controls$Primitives$IItemContainerGenerator$removeItemsChanged(Bridge.fn.cacheBind(this, this.onGeneratorItemsChanged));
                this.getChildren().clear();
            }

            this.itemContainerGenerator = value;

            if (this.itemContainerGenerator != null) {
                this.itemContainerGenerator.System$Windows$Controls$Primitives$IItemContainerGenerator$addItemsChanged(Bridge.fn.cacheBind(this, this.onGeneratorItemsChanged));
                this.addChildren();
            }
        },
        getBackground: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Panel.backgroundProperty), System.Windows.Media.Brush);
        },
        setBackground: function (value) {
            this.setValue(System.Windows.Controls.Panel.backgroundProperty, value);
        },
        onChildrenCollectionChanged: function (sender, e) {
            var $t;
            $t = Bridge.getEnumerator(e.getNewItems(), Object);
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.UIElement);
                System.Windows.Controls.Panel.moveVisualChild(child, System.Windows.Controls.Panel.getZIndex(child));
            }
        },
        hitTestOverride: function (position) {
            return this.getBackground() != null && System.Windows.SizeExtensions.contains(this.getVisualSize(), position);
        },
        onGeneratorItemsChanged: function (sender, e) {
            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Add) {
                for (var i = 0; i < e.getItemsCount(); i = (i + 1) | 0) {
                    this.getChildren().insert(((i + e.getNewStartingIndex()) | 0), this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(((i + e.getNewStartingIndex()) | 0)));
                }
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Remove) {
                Granular.Extensions.ListExtensions.removeRange(System.Windows.UIElement, this.getChildren(), e.getOldStartingIndex(), e.getContainersCount());
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Move) {
                var movedChildren = Granular.Compatibility.Linq.Enumerable.take(System.Windows.UIElement, Granular.Compatibility.Linq.Enumerable.skip(System.Windows.UIElement, this.getChildren(), e.getOldStartingIndex()), e.getContainersCount());
                Granular.Extensions.ListExtensions.removeRange(System.Windows.UIElement, this.getChildren(), e.getOldStartingIndex(), e.getContainersCount());
                Granular.Extensions.ListExtensions.insertRange(System.Windows.UIElement, this.getChildren(), e.getNewStartingIndex(), movedChildren);
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Replace) {
                this.getChildren().setItem(e.getNewStartingIndex(), this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(e.getNewStartingIndex()));
            }

            if (e.getAction() === Granular.Collections.NotifyCollectionChangedAction.Reset) {
                this.getChildren().clear();
                this.addChildren();
            }
        },
        addChildren: function () {
            for (var i = 0; i < this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount(); i = (i + 1) | 0) {
                this.getChildren().add(this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(i));
            }
        },
        onIsItemsHostChanged: function (e) {
            this.setItemContainerGenerator(this.getIsItemsHost() && Bridge.is(this.getTemplatedParent(), System.Windows.Controls.ItemsControl) ? Bridge.cast(this.getTemplatedParent(), System.Windows.Controls.ItemsControl).getItemContainerGenerator() : null);
        },
        onBackgroundChanged: function (e) {
            this.setVisualBackground(this.getBackground());
        }
    });

    Bridge.ns("System.Windows.Controls.Panel", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Panel, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Panel).onIsItemsHostChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Panel).onBackgroundChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ContentPresenter", {
        inherits: [System.Windows.FrameworkElement,System.Windows.Controls.IItemContainer],
        statics: {
            contentProperty: null,
            contentTemplateProperty: null,
            contentTemplateSelectorProperty: null,
            config: {
                init: function () {
                    this.contentProperty = System.Windows.Controls.ContentControl.contentProperty.addOwner(System.Windows.Controls.ContentPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ContentPresenter.f1));
                    this.contentTemplateProperty = System.Windows.Controls.ContentControl.contentTemplateProperty.addOwner(System.Windows.Controls.ContentPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ContentPresenter.f2));
                    this.contentTemplateSelectorProperty = System.Windows.Controls.ContentControl.contentTemplateSelectorProperty.addOwner(System.Windows.Controls.ContentPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ContentPresenter.f2));
                }
            }
        },
        template: null,
        itemTemplate: null,
        itemContainerStyle: null,
        config: {
            alias: [
            "prepareContainerForItem", "System$Windows$Controls$IItemContainer$prepareContainerForItem",
            "clearContainerForItem", "System$Windows$Controls$IItemContainer$clearContainerForItem"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            //
        },
        getContent: function () {
            return this.getValue(System.Windows.Controls.ContentPresenter.contentProperty);
        },
        setContent: function (value) {
            this.setValue(System.Windows.Controls.ContentPresenter.contentProperty, value);
        },
        getContentTemplate: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ContentPresenter.contentTemplateProperty), System.Windows.DataTemplate);
        },
        setContentTemplate: function (value) {
            this.setValue(System.Windows.Controls.ContentPresenter.contentTemplateProperty, value);
        },
        getContentTemplateSelector: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ContentPresenter.contentTemplateSelectorProperty), System.Windows.Controls.IDataTemplateSelector);
        },
        setContentTemplateSelector: function (value) {
            this.setValue(System.Windows.Controls.ContentPresenter.contentTemplateSelectorProperty, value);
        },
        getTemplate$1: function () {
            return this.template;
        },
        setTemplate$1: function (value) {
            if (Bridge.referenceEquals(this.template, value)) {
                return;
            }

            this.template = value;

            this.applyTemplate();
        },
        measureOverride: function (availableSize) {
            if (this.getTemplateChild() == null) {
                return System.Windows.Size.zero;
            }

            this.getTemplateChild().measure(availableSize);
            return this.getTemplateChild().getDesiredSize();
        },
        arrangeOverride: function (finalSize) {
            if (this.getTemplateChild() != null) {
                this.getTemplateChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        },
        getTemplate: function () {
            return this.getTemplate$1();
        },
        onApplyTemplate: function () {
            this.setDataContext$1();
        },
        onResourcesChanged: function (e) {
            System.Windows.FrameworkElement.prototype.onResourcesChanged.call(this, e);
            this.setTemplate$2();
        },
        onContentChanged: function (e) {
            this.setTemplate$2();
        },
        setTemplate$2: function () {
            this.setTemplate$1(this.findTemplate());
        },
        setDataContext$1: function () {
            if (Bridge.is(this.getContent(), System.Windows.Media.Visual)) {
                this.clearValue(System.Windows.FrameworkElement.dataContextProperty);
            } else {
                this.setDataContext(this.getContent());
            }
        },
        findTemplate: function () {
            if (this.getContent() == null) {
                return null;
            }

            if (Bridge.is(this.getContent(), System.Windows.UIElement)) {
                return Bridge.is(this.getTemplate$1(), System.Windows.Controls.ContentPresenter.UIElementTemplate) && Bridge.referenceEquals(Bridge.cast(this.getTemplate$1(), System.Windows.Controls.ContentPresenter.UIElementTemplate).getContent(), this.getContent()) ? this.getTemplate$1() : new System.Windows.Controls.ContentPresenter.UIElementTemplate(Bridge.cast(this.getContent(), System.Windows.UIElement));
            }

            if (this.getContentTemplate() != null) {
                return this.getContentTemplate();
            }

            if (this.getContentTemplateSelector() != null) {
                this.getContentTemplateSelector().System$Windows$Controls$IDataTemplateSelector$selectTemplate(this.getContent(), this);
            }

            var dataTemplate = { };
            if (this.tryFindDataTemplate(Bridge.getType(this.getContent()), dataTemplate)) {
                return dataTemplate.v;
            }

            return System.Windows.Controls.ContentPresenter.DefaultContentTemplate.default;
        },
        tryFindDataTemplate: function (type, dataTemplate) {
            var value = { };

            if (this.tryGetResource(new System.Windows.TemplateKey(type), value)) {
                dataTemplate.v = Bridge.as(value.v, System.Windows.DataTemplate);
                return dataTemplate.v != null;
            }

            if (Bridge.Reflection.getBaseType(type) != null) {
                return this.tryFindDataTemplate(Bridge.Reflection.getBaseType(type), dataTemplate);
            }

            dataTemplate.v = null;
            return false;
        },
        prepareContainerForItem: function (item, itemTemplate, itemContainerStyle) {
            if (!this.containsValue(System.Windows.Controls.ContentPresenter.contentTemplateProperty) && !this.containsValue(System.Windows.Controls.ContentPresenter.contentTemplateSelectorProperty)) {
                this.setContentTemplate(itemTemplate);
                this.itemTemplate = itemTemplate;
            }

            if (!this.containsValue(System.Windows.FrameworkElement.styleProperty)) {
                this.setStyle(itemContainerStyle);
                this.itemContainerStyle = itemContainerStyle;
            }

            this.setContent(item);
        },
        clearContainerForItem: function (item) {
            if (Bridge.referenceEquals(this.itemTemplate, this.getContentTemplate())) {
                this.clearValue(System.Windows.Controls.ContentPresenter.contentTemplateProperty);
                this.itemTemplate = null;
            }

            if (Bridge.referenceEquals(this.itemContainerStyle, this.getStyle())) {
                this.clearValue(System.Windows.FrameworkElement.styleProperty);
                this.itemContainerStyle = null;
            }

            this.clearValue(System.Windows.Controls.ContentPresenter.contentProperty);
        }
    });

    Bridge.ns("System.Windows.Controls.ContentPresenter", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ContentPresenter, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ContentPresenter).onContentChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ContentPresenter).setTemplate$2();
        }
    });

    Bridge.define("System.Windows.Controls.Image", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            ctor: function () {
                System.Windows.UIElement.clipToBoundsProperty.overrideMetadata(System.Windows.Controls.Image, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
            },
            imageFailedEvent: null,
            sourceProperty: null,
            stretchProperty: null,
            stretchDirectionProperty: null,
            config: {
                init: function () {
                    this.imageFailedEvent = System.Windows.EventManager.registerRoutedEvent("ImageFailed", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Image);
                    this.sourceProperty = System.Windows.DependencyProperty.register("Source", System.Windows.Media.ImageSource, System.Windows.Controls.Image, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Image.f1));
                    this.stretchProperty = System.Windows.DependencyProperty.register("Stretch", System.Windows.Media.Stretch, System.Windows.Controls.Image, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Media.Stretch.Uniform, 3));
                    this.stretchDirectionProperty = System.Windows.DependencyProperty.register("StretchDirection", System.Windows.Controls.StretchDirection, System.Windows.Controls.Image, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Controls.StretchDirection.Both, 3));
                }
            },
            getStretchRect: function (size, availableSize, stretch, stretchDirection) {
                if (System.Windows.SizeExtensions.isNullOrEmpty(size) || System.Windows.Size.op_Equality(size, System.Windows.Size.zero) || System.Windows.Size.op_Equality(availableSize, System.Windows.Size.zero)) {
                    return System.Windows.Rect.zero;
                }

                var stretchSize = System.Windows.Controls.Image.getStretchSize(size, availableSize, stretch);

                if (stretchDirection === System.Windows.Controls.StretchDirection.DownOnly) {
                    stretchSize = System.Windows.SizeExtensions.min(stretchSize, size);
                }

                if (stretchDirection === System.Windows.Controls.StretchDirection.UpOnly) {
                    stretchSize = System.Windows.SizeExtensions.max(stretchSize, size);
                }

                return new System.Windows.Rect.$ctor2(System.Windows.Point.op_Division((System.Windows.Point.op_Subtraction(System.Windows.SizeExtensions.toPoint(availableSize), System.Windows.SizeExtensions.toPoint(stretchSize))), 2), stretchSize);
            },
            getStretchSize: function (imageSize, availableSize, stretch) {
                switch (stretch) {
                    case System.Windows.Media.Stretch.None: 
                        return imageSize;
                    case System.Windows.Media.Stretch.Fill: 
                        return availableSize;
                    case System.Windows.Media.Stretch.Uniform: 
                        return imageSize.getHeight() * availableSize.getWidth() < imageSize.getWidth() * availableSize.getHeight() ? new System.Windows.Size(availableSize.getWidth(), imageSize.getHeight() * availableSize.getWidth() / imageSize.getWidth()) : new System.Windows.Size(imageSize.getWidth() * availableSize.getHeight() / imageSize.getHeight(), availableSize.getHeight());
                    case System.Windows.Media.Stretch.UniformToFill: 
                        return imageSize.getHeight() * availableSize.getWidth() > imageSize.getWidth() * availableSize.getHeight() ? new System.Windows.Size(availableSize.getWidth(), imageSize.getHeight() * availableSize.getWidth() / imageSize.getWidth()) : new System.Windows.Size(imageSize.getWidth() * availableSize.getHeight() / imageSize.getHeight(), availableSize.getHeight());
                    default: 
                        throw new Granular.Exception("Unexpected Stretch \"{0}\"", [stretch]);
                }
            }
        },
        bitmapSource: null,
        imageRenderElements: null,
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.imageRenderElements = new (System.Windows.Media.RenderElementDictionary$1(System.Windows.Media.IImageRenderElement))(Bridge.fn.cacheBind(this, this.createRenderElement$1));
        },
        addImageFailed: function (value) {
            this.addHandler(System.Windows.Controls.Image.imageFailedEvent, value);
        },
        removeImageFailed: function (value) {
            this.removeHandler(System.Windows.Controls.Image.imageFailedEvent, value);
        },
        getSource: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Image.sourceProperty), System.Windows.Media.ImageSource);
        },
        setSource: function (value) {
            this.setValue(System.Windows.Controls.Image.sourceProperty, value);
        },
        getStretch: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Image.stretchProperty), System.Int32));
        },
        setStretch: function (value) {
            this.setValue(System.Windows.Controls.Image.stretchProperty, value);
        },
        getStretchDirection: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Image.stretchDirectionProperty), System.Int32));
        },
        setStretchDirection: function (value) {
            this.setValue(System.Windows.Controls.Image.stretchDirectionProperty, value);
        },
        getBitmapSource: function () {
            return this.bitmapSource;
        },
        setBitmapSource: function (value) {
            if (Bridge.referenceEquals(this.bitmapSource, value)) {
                return;
            }

            if (this.bitmapSource != null) {
                this.bitmapSource.removeDownloadCompleted(Bridge.fn.cacheBind(this, this.onBitmapSourceDownloadCompleted));
                this.bitmapSource.removeDownloadFailed(Bridge.fn.cacheBind(this, this.onBitmapSourceDownloadFailed));
            }

            this.bitmapSource = value;

            if (this.bitmapSource != null) {
                this.bitmapSource.addDownloadCompleted(Bridge.fn.cacheBind(this, this.onBitmapSourceDownloadCompleted));
                this.bitmapSource.addDownloadFailed(Bridge.fn.cacheBind(this, this.onBitmapSourceDownloadFailed));
            }
        },
        createRenderElementContentOverride: function (factory) {
            return this.imageRenderElements.getRenderElement(factory);
        },
        measureOverride: function (availableSize) {
            if ((this.getStretch() === System.Windows.Media.Stretch.None || this.getStretchDirection() === System.Windows.Controls.StretchDirection.UpOnly) && this.getSource() != null) {
                return System.Windows.SizeExtensions.defaultIfNullOrEmpty(this.getSource().getSize());
            }

            return System.Windows.Size.zero;
        },
        arrangeOverride: function (finalSize) {
            this.setRenderElements(this.getSource(), finalSize);

            return finalSize;
        },
        onSourceChanged: function (e) {
            this.setBitmapSource(Bridge.as(this.getSource(), System.Windows.Media.Imaging.BitmapSource));

            this.setRenderElements(this.getSource(), this.getRenderSize());

            this.invalidateMeasure();
        },
        onBitmapSourceDownloadCompleted: function (sender, e) {
            this.setRenderElements(this.getSource(), this.getRenderSize());

            this.invalidateMeasure();
        },
        onBitmapSourceDownloadFailed: function (sender, e) {
            this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.Image.imageFailedEvent, this));
        },
        createRenderElement$1: function (factory) {
            var imageRenderElement = factory.System$Windows$Media$IRenderElementFactory$createImageRenderElement(this);

            if (this.getSource() != null) {
                imageRenderElement.System$Windows$Media$IImageRenderElement$setBounds(System.Windows.Controls.Image.getStretchRect(this.getSource().getSize(), this.getVisualBounds().getSize(), this.getStretch(), this.getStretchDirection()));
                imageRenderElement.System$Windows$Media$IImageRenderElement$setSource(this.getSource());
            }

            return imageRenderElement;
        },
        setRenderElements: function (source, availableSize) {
            var $t;
            var bounds = source != null ? System.Windows.Controls.Image.getStretchRect(source.getSize(), availableSize, this.getStretch(), this.getStretchDirection()) : System.Windows.Rect.zero;

            $t = Bridge.getEnumerator(this.imageRenderElements.getElements());
            while ($t.moveNext()) {
                var imageRenderElement = $t.getCurrent();
                imageRenderElement.System$Windows$Media$IImageRenderElement$setBounds(bounds);
                imageRenderElement.System$Windows$Media$IImageRenderElement$setSource(source);
            }
        }
    });

    Bridge.ns("System.Windows.Controls.Image", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Image, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Image).onSourceChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ItemsPresenter", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            itemContainerGeneratorProperty: null,
            templateProperty: null,
            config: {
                init: function () {
                    this.itemContainerGeneratorProperty = System.Windows.DependencyProperty.register("ItemContainerGenerator", System.Windows.Controls.Primitives.IItemContainerGenerator, System.Windows.Controls.ItemsPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.ItemsPresenter.f1));
                    this.templateProperty = System.Windows.DependencyProperty.register("Template", System.Windows.IFrameworkTemplate, System.Windows.Controls.ItemsPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.ItemsPresenter.f2));
                }
            }
        },
        panel: null,
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            //
        },
        getItemContainerGenerator: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsPresenter.itemContainerGeneratorProperty), System.Windows.Controls.Primitives.IItemContainerGenerator);
        },
        setItemContainerGenerator: function (value) {
            this.setValue(System.Windows.Controls.ItemsPresenter.itemContainerGeneratorProperty, value);
        },
        getTemplate$1: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsPresenter.templateProperty), System.Windows.IFrameworkTemplate);
        },
        setTemplate$1: function (value) {
            this.setValue(System.Windows.Controls.ItemsPresenter.templateProperty, value);
        },
        getPanel: function () {
            return this.panel;
        },
        setPanel: function (value) {
            if (Bridge.referenceEquals(this.panel, value)) {
                return;
            }

            if (this.panel != null) {
                this.panel.setItemContainerGenerator(null);
            }

            this.panel = value;

            if (this.panel != null) {
                this.panel.setItemContainerGenerator(this.getItemContainerGenerator());
            }
        },
        measureOverride: function (availableSize) {
            if (this.getPanel() == null) {
                return System.Windows.Size.zero;
            }

            this.getPanel().measure(availableSize);
            return this.getPanel().getDesiredSize();
        },
        arrangeOverride: function (finalSize) {
            if (this.getPanel() != null) {
                this.getPanel().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        },
        getTemplate: function () {
            return this.getTemplate$1();
        },
        onItemContainerGeneratorChanged: function (e) {
            if (this.getPanel() != null) {
                this.getPanel().setItemContainerGenerator(this.getItemContainerGenerator());
            }
        },
        onTemplateChanged: function (e) {
            if (this.getItemContainerGenerator() != null) {
                this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$removeRange(0, this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount());
            }

            this.applyTemplate();

            this.setPanel(Bridge.as(System.Linq.Enumerable.from(this.getVisualChildren()).firstOrDefault(null, null), System.Windows.Controls.Panel));
        }
    });

    Bridge.ns("System.Windows.Controls.ItemsPresenter", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ItemsPresenter, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ItemsPresenter).onItemContainerGeneratorChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ItemsPresenter).onTemplateChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.PopupLayer", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            positionProperty: null,
            isOpenProperty: null,
            staysOpenProperty: null,
            config: {
                init: function () {
                    this.positionProperty = System.Windows.DependencyProperty.registerAttached("Position", System.Windows.Point, System.Windows.Controls.PopupLayer, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Point.zero, System.Windows.Controls.PopupLayer.onPositionChanged));
                    this.isOpenProperty = System.Windows.DependencyProperty.registerAttached("IsOpen", Boolean, System.Windows.Controls.PopupLayer, new System.Windows.FrameworkPropertyMetadata.$ctor11(System.Windows.Controls.PopupLayer.onIsOpenChanged));
                    this.staysOpenProperty = System.Windows.DependencyProperty.registerAttached("StaysOpen", Boolean, System.Windows.Controls.PopupLayer, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
                }
            },
            getPosition: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Controls.PopupLayer.positionProperty), System.Windows.Point);
            },
            setPosition: function (obj, value) {
                obj.setValue(System.Windows.Controls.PopupLayer.positionProperty, value);
            },
            getIsOpen: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.PopupLayer.isOpenProperty), Boolean));
            },
            setIsOpen: function (obj, value) {
                obj.setValue(System.Windows.Controls.PopupLayer.isOpenProperty, value);
            },
            getStaysOpen: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.PopupLayer.staysOpenProperty), Boolean));
            },
            setStaysOpen: function (obj, value) {
                obj.setValue(System.Windows.Controls.PopupLayer.staysOpenProperty, value);
            },
            getPopupLayer: function (target) {
                if (target == null) {
                    return null;
                }

                return Bridge.is(target, System.Windows.Controls.IPopupLayerHost) ? Bridge.cast(target, System.Windows.Controls.IPopupLayerHost).System$Windows$Controls$IPopupLayerHost$getPopupLayer() : System.Windows.Controls.PopupLayer.getPopupLayer(target.getVisualParent());
            },
            onIsOpenChanged: function (dependencyObject, e) {
                if (System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)) && Bridge.is(dependencyObject, System.Windows.Media.Visual) && Bridge.is(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.PopupLayer)) {
                    Bridge.cast(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.PopupLayer).bringToFront(Bridge.cast(dependencyObject, System.Windows.Media.Visual));
                }
            },
            onPositionChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Media.Visual) && Bridge.is(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.PopupLayer)) {
                    Bridge.cast(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.PopupLayer).invalidateArrange();
                }
            }
        },
        config: {
            events: {
                ClosePopupRequest: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            //
        },
        measureOverride: function (availableSize) {
            var $t;
            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.UIElement);
                child.measure(availableSize);
            }

            return System.Windows.Size.zero;
        },
        arrangeOverride: function (finalSize) {
            var $t;
            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.UIElement);
                child.arrange(new System.Windows.Rect.$ctor2(System.Windows.Controls.PopupLayer.getPosition(child), child.getDesiredSize()));
            }

            return finalSize;
        },
        addChild: function (child) {
            this.addVisualChild(child);
            this.bringToFront(child);

            this.invalidateMeasure();
        },
        removeChild: function (child) {
            this.removeVisualChild(child);

            this.invalidateMeasure();
        },
        onMouseDown: function (e) {
            if (Bridge.referenceEquals(e.getOriginalSource(), this)) {
                Granular.Extensions.EventHandlerExtensions.raise$2(this.ClosePopupRequest, this);
                e.setHandled(e.getMouseDevice().processRawEvent(new System.Windows.Input.RawMouseButtonEventArgs(e.getChangedButton(), e.getButtonState(), e.getAbsolutePosition(), e.getTimestamp())));
            }
        },
        hitTestOverride: function (position) {
            // receive a click if there is a non "StaysOpen" child opened
            return System.Linq.Enumerable.from(this.getVisualChildren()).any($asm.$.System.Windows.Controls.PopupLayer.f1);
        },
        bringToFront: function (child) {
            this.setVisualChildIndex(child, ((System.Linq.Enumerable.from(this.getVisualChildren()).count() - 1) | 0));
        }
    });

    Bridge.ns("System.Windows.Controls.PopupLayer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.PopupLayer, {
        f1: function (child) {
            return System.Windows.Controls.PopupLayer.getIsOpen(child) && !System.Windows.Controls.PopupLayer.getStaysOpen(child);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Popup", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            horizontalOffsetProperty: null,
            verticalOffsetProperty: null,
            placementProperty: null,
            placementRectangleProperty: null,
            placementTargetProperty: null,
            isOpenProperty: null,
            staysOpenProperty: null,
            config: {
                init: function () {
                    this.horizontalOffsetProperty = System.Windows.DependencyProperty.register("HorizontalOffset", System.Double, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Popup.f1));
                    this.verticalOffsetProperty = System.Windows.DependencyProperty.register("VerticalOffset", System.Double, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Popup.f1));
                    this.placementProperty = System.Windows.DependencyProperty.register("Placement", System.Windows.Controls.Primitives.PlacementMode, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Popup.f1));
                    this.placementRectangleProperty = System.Windows.DependencyProperty.register("PlacementRectangle", System.Windows.Rect, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Rect.empty, $asm.$.System.Windows.Controls.Primitives.Popup.f1));
                    this.placementTargetProperty = System.Windows.DependencyProperty.register("PlacementTarget", System.Windows.Media.Visual, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Popup.f1));
                    this.isOpenProperty = System.Windows.DependencyProperty.register("IsOpen", Boolean, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Popup.f2));
                    this.staysOpenProperty = System.Windows.DependencyProperty.register("StaysOpen", Boolean, System.Windows.Controls.Primitives.Popup, new System.Windows.FrameworkPropertyMetadata.$ctor6(true, $asm.$.System.Windows.Controls.Primitives.Popup.f3));
                }
            }
        },
        child: null,
        popupLayer: null,
        popupContainer: null,
        config: {
            events: {
                Opened: null,
                Closed: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.popupContainer = new System.Windows.Controls.Primitives.Popup.PopupContainer();
        },
        getHorizontalOffset: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.horizontalOffsetProperty), System.Double));
        },
        setHorizontalOffset: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.horizontalOffsetProperty, value);
        },
        getVerticalOffset: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.verticalOffsetProperty), System.Double));
        },
        setVerticalOffset: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.verticalOffsetProperty, value);
        },
        getPlacement: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.placementProperty), System.Int32));
        },
        setPlacement: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.placementProperty, value);
        },
        getPlacementRectangle: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.placementRectangleProperty), System.Windows.Rect);
        },
        setPlacementRectangle: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.placementRectangleProperty, value);
        },
        getPlacementTarget: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.placementTargetProperty), System.Windows.Media.Visual);
        },
        setPlacementTarget: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.placementTargetProperty, value);
        },
        getIsOpen: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.isOpenProperty), Boolean));
        },
        setIsOpen: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.isOpenProperty, value);
        },
        getStaysOpen: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Popup.staysOpenProperty), Boolean));
        },
        setStaysOpen: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Popup.staysOpenProperty, value);
        },
        getChild: function () {
            return this.child;
        },
        setChild: function (value) {
            if (Bridge.referenceEquals(this.child, value)) {
                return;
            }

            if (this.child != null) {
                this.removeLogicalChild(this.child);
            }

            this.child = value;
            this.popupContainer.setChild(this.child);

            if (this.child != null) {
                this.addLogicalChild(this.child);
            }
        },
        getPopupLayer: function () {
            return this.popupLayer;
        },
        setPopupLayer: function (value) {
            if (Bridge.referenceEquals(this.popupLayer, value)) {
                return;
            }

            if (this.popupLayer != null) {
                this.popupLayer.removeChild(this.popupContainer);
                this.popupLayer.removeClosePopupRequest(Bridge.fn.cacheBind(this, this.onClosePopupRequest));
            }

            this.popupLayer = value;

            if (this.popupLayer != null) {
                this.popupLayer.addChild(this.popupContainer);
                this.popupLayer.addClosePopupRequest(Bridge.fn.cacheBind(this, this.onClosePopupRequest));
            }

            this.setPosition();
        },
        onOpened: function () {
            //
        },
        onClosed: function () {
            //
        },
        onVisualAncestorChanged: function () {
            System.Windows.FrameworkElement.prototype.onVisualAncestorChanged.call(this);
            this.setPopupLayer(System.Windows.Controls.PopupLayer.getPopupLayer(this));
        },
        onStaysOpenChanged: function (e) {
            System.Windows.Controls.PopupLayer.setStaysOpen(this.popupContainer, System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
        },
        onIsOpenChanged: function (e) {
            var isOpen = System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean));

            this.popupContainer.setIsOpen(isOpen);

            if (isOpen) {
                this.setPosition();

                this.onOpened();
                Granular.Extensions.EventHandlerExtensions.raise$2(this.Opened, this);
            } else {
                this.onClosed();
                Granular.Extensions.EventHandlerExtensions.raise$2(this.Closed, this);
            }
        },
        onClosePopupRequest: function (sender, e) {
            if (!this.getStaysOpen()) {
                this.setIsOpen(false);
            }
        },
        setPosition: function () {
            if (this.getPopupLayer() != null && this.getIsOpen()) {
                this.popupContainer.measure(this.getPopupLayer().getVisualSize());
                var popupSize = this.popupContainer.getDesiredSize();
                var placementTargetRect = this.getPlacementTarget() != null ? new System.Windows.Rect.$ctor2(this.getPopupLayer().pointFromRoot(this.getPlacementTarget().pointToRoot(System.Windows.Point.zero)), this.getPlacementTarget().getVisualSize()) : System.Windows.Rect.zero;
                var position = System.Windows.Controls.Primitives.Placement.getPosition(this.getPlacement(), placementTargetRect, this.getPlacementRectangle(), this.getMouseBounds(), new System.Windows.Point.$ctor1(this.getHorizontalOffset(), this.getVerticalOffset()), popupSize, new System.Windows.Rect.$ctor3(this.getPopupLayer().getVisualSize()));

                this.popupContainer.setPosition(position);
                this.getPopupLayer().updateLayout();
            }
        },
        getMouseBounds: function () {
            if (this.getPlacement() !== System.Windows.Controls.Primitives.PlacementMode.Mouse && this.getPlacement() !== System.Windows.Controls.Primitives.PlacementMode.MousePoint) {
                return System.Windows.Rect.zero;
            }

            return new System.Windows.Rect.$ctor2(this.getPopupLayer().pointFromRoot(System.Windows.ApplicationHostExtensions.getMouseDeviceFromElement(System.Windows.ApplicationHost.getCurrent(), this.getPopupLayer()).getPosition()), new System.Windows.Size(12, 19));
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.Popup", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.Popup, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Popup).setPosition();
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Popup).onIsOpenChanged(e);
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Popup).onStaysOpenChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Popup.PopupContainer", {
        inherits: [System.Windows.FrameworkElement,System.Windows.Documents.IAdornerLayerHost],
        child: null,
        position: null,
        isOpen: false,
        config: {
            properties: {
                AdornerLayer: null
            },
            alias: [
            "getAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$getAdornerLayer",
            "setAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$setAdornerLayer"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.setVisibility(System.Windows.Visibility.Collapsed);

            this.setAdornerLayer(new System.Windows.Documents.AdornerLayer());
            this.addVisualChild(this.getAdornerLayer());
        },
        getChild: function () {
            return this.child;
        },
        setChild: function (value) {
            if (Bridge.referenceEquals(this.child, value)) {
                return;
            }

            if (this.child != null) {
                this.removeVisualChild(this.child);
            }

            this.child = value;

            if (this.child != null) {
                this.addVisualChild(this.child);
                this.setVisualChildIndex(this.child, 0);
            }

            this.invalidateMeasure();
        },
        getPosition: function () {
            return this.position;
        },
        setPosition: function (value) {
            this.position = value;
            System.Windows.Controls.PopupLayer.setPosition(this, this.position);
        },
        getIsOpen: function () {
            return this.isOpen;
        },
        setIsOpen: function (value) {
            this.isOpen = value;
            this.setVisibility(this.isOpen ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed);
            System.Windows.Controls.PopupLayer.setIsOpen(this, this.isOpen);
        },
        measureOverride: function (availableSize) {
            this.getAdornerLayer().measure(availableSize);

            if (this.getChild() == null) {
                return System.Windows.Size.zero;
            }

            this.getChild().measure(availableSize);
            return this.getChild().getDesiredSize();
        },
        arrangeOverride: function (finalSize) {
            this.getAdornerLayer().arrange(new System.Windows.Rect.$ctor3(finalSize));

            if (this.getChild() != null) {
                this.getChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Track", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            orientationProperty: null,
            minimumProperty: null,
            maximumProperty: null,
            valueProperty: null,
            viewportSizeProperty: null,
            config: {
                init: function () {
                    this.orientationProperty = System.Windows.DependencyProperty.register("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.Primitives.Track, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                    this.minimumProperty = System.Windows.DependencyProperty.register("Minimum", System.Double, System.Windows.Controls.Primitives.Track, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange));
                    this.maximumProperty = System.Windows.DependencyProperty.register("Maximum", System.Double, System.Windows.Controls.Primitives.Track, new System.Windows.FrameworkPropertyMetadata.$ctor2(1.0, System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange));
                    this.valueProperty = System.Windows.DependencyProperty.register("Value", System.Double, System.Windows.Controls.Primitives.Track, new System.Windows.FrameworkPropertyMetadata.$ctor8(258));
                    this.viewportSizeProperty = System.Windows.DependencyProperty.register("ViewportSize", System.Double, System.Windows.Controls.Primitives.Track, new System.Windows.FrameworkPropertyMetadata.$ctor2(Number.NaN, System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange));
                }
            }
        },
        decreaseRepeatButton: null,
        increaseRepeatButton: null,
        thumb: null,
        config: {
            properties: {
                ThumbMinLength: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.setThumbMinLength(24);
        },
        getOrientation: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Track.orientationProperty), System.Int32));
        },
        setOrientation: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Track.orientationProperty, value);
        },
        getMinimum: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Track.minimumProperty), System.Double));
        },
        setMinimum: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Track.minimumProperty, value);
        },
        getMaximum: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Track.maximumProperty), System.Double));
        },
        setMaximum: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Track.maximumProperty, value);
        },
        getValue$5: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Track.valueProperty), System.Double));
        },
        setValue$5: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Track.valueProperty, value);
        },
        getViewportSize: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Track.viewportSizeProperty), System.Double));
        },
        setViewportSize: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Track.viewportSizeProperty, value);
        },
        getDecreaseRepeatButton: function () {
            return this.decreaseRepeatButton;
        },
        setDecreaseRepeatButton: function (value) {
            if (Bridge.referenceEquals(this.decreaseRepeatButton, value)) {
                return;
            }

            if (this.decreaseRepeatButton != null) {
                this.removeVisualChild(this.decreaseRepeatButton);
            }

            this.decreaseRepeatButton = value;

            if (this.decreaseRepeatButton != null) {
                this.addVisualChild(this.decreaseRepeatButton);
            }
        },
        getIncreaseRepeatButton: function () {
            return this.increaseRepeatButton;
        },
        setIncreaseRepeatButton: function (value) {
            if (Bridge.referenceEquals(this.increaseRepeatButton, value)) {
                return;
            }

            if (this.increaseRepeatButton != null) {
                this.removeVisualChild(this.increaseRepeatButton);
            }

            this.increaseRepeatButton = value;

            if (this.increaseRepeatButton != null) {
                this.addVisualChild(this.increaseRepeatButton);
            }
        },
        getThumb: function () {
            return this.thumb;
        },
        setThumb: function (value) {
            if (Bridge.referenceEquals(this.thumb, value)) {
                return;
            }

            if (this.thumb != null) {
                this.removeVisualChild(this.thumb);
            }

            this.thumb = value;

            if (this.thumb != null) {
                this.addVisualChild(this.thumb);
            }
        },
        measureOverride: function (availableSize) {
            if (this.getThumb() != null) {
                this.getThumb().measure(availableSize);
                return System.Windows.SizeExtensions.combine(this.getMainSize(0), this.getThumb().getDesiredSize());
            }

            return System.Windows.Size.zero;
        },
        arrangeOverride: function (finalSize) {
            var mainLength = this.getMainLength(finalSize);
            var crossLength = this.getCrossLength(finalSize);

            // the scrollable range (Maximum - Minimum) equals to (ExtentSize - ViewportSize)
            // the thumb ratio should be (ViewportSize / ExtentSize) = (ViewportSize / (ViewportSize + Maximum - Minimum))
            var thumbMainLength = Granular.Extensions.DoubleExtensions.bounds((isNaN(this.getViewportSize()) ? (this.getThumb() == null ? 0 : this.getMainLength(this.getThumb().getDesiredSize())) : (mainLength * this.getViewportSize() / (this.getViewportSize() + this.getMaximum() - this.getMinimum()))), this.getThumbMinLength(), Granular.Extensions.DoubleExtensions.max(this.getThumbMinLength(), mainLength));

            // the decrease and increase buttons fill the remaining area (these buttons are usually transparent)
            var decreaseButtonMainLength = this.getMaximum() === this.getMinimum() ? 0 : (mainLength - thumbMainLength) * (Granular.Extensions.DoubleExtensions.min(this.getValue$5(), this.getMaximum()) - this.getMinimum()) / (this.getMaximum() - this.getMinimum());
            var increaseButtonMainLength = mainLength - thumbMainLength - decreaseButtonMainLength;

            if (this.getDecreaseRepeatButton() != null && this.getIncreaseRepeatButton() != null) {
                this.arrangeChild(this.getDecreaseRepeatButton(), 0, 0, decreaseButtonMainLength, crossLength);
                this.arrangeChild(this.getIncreaseRepeatButton(), decreaseButtonMainLength + thumbMainLength, 0, increaseButtonMainLength, crossLength);
            }

            if (this.getThumb() != null) {
                this.arrangeChild(this.getThumb(), decreaseButtonMainLength, 0, thumbMainLength, crossLength);
            }

            return finalSize;
        },
        getMainLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getWidth() : size.getHeight();
        },
        getCrossLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getHeight() : size.getWidth();
        },
        getMainSize: function (length) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? System.Windows.Size.fromWidth(length) : System.Windows.Size.fromHeight(length);
        },
        arrangeChild: function (child, finalMainStart, finalCrossStart, finalMainLength, finalCrossLength) {
            child.arrange(this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? new System.Windows.Rect.$ctor1(finalMainStart, finalCrossStart, Granular.Extensions.DoubleExtensions.max(finalMainLength, 0), Granular.Extensions.DoubleExtensions.max(finalCrossLength, 0)) : new System.Windows.Rect.$ctor1(finalCrossStart, finalMainStart, Granular.Extensions.DoubleExtensions.max(finalCrossLength, 0), Granular.Extensions.DoubleExtensions.max(finalMainLength, 0)));
        }
    });

    Bridge.define("System.Windows.Controls.TextBlock", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            textProperty: null,
            foregroundProperty: null,
            fontFamilyProperty: null,
            fontSizeProperty: null,
            fontStyleProperty: null,
            fontWeightProperty: null,
            fontStretchProperty: null,
            textAlignmentProperty: null,
            textTrimmingProperty: null,
            textWrappingProperty: null,
            config: {
                init: function () {
                    this.textProperty = System.Windows.DependencyProperty.register("Text", String, System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure, $asm.$.System.Windows.Controls.TextBlock.f1));
                    this.foregroundProperty = System.Windows.Documents.TextElement.foregroundProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Media.Brushes.getBlack(), System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBlock.f2));
                    this.fontFamilyProperty = System.Windows.Documents.TextElement.fontFamilyProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f3));
                    this.fontSizeProperty = System.Windows.Documents.TextElement.fontSizeProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f4));
                    this.fontStyleProperty = System.Windows.Documents.TextElement.fontStyleProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f5));
                    this.fontWeightProperty = System.Windows.Documents.TextElement.fontWeightProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f6));
                    this.fontStretchProperty = System.Windows.Documents.TextElement.fontStretchProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f7));
                    this.textAlignmentProperty = System.Windows.Documents.Block.textAlignmentProperty.addOwner(System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBlock.f8));
                    this.textTrimmingProperty = System.Windows.DependencyProperty.register("TextTrimming", System.Windows.TextTrimming, System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor9(33, $asm.$.System.Windows.Controls.TextBlock.f9));
                    this.textWrappingProperty = System.Windows.DependencyProperty.register("TextWrapping", System.Windows.TextWrapping, System.Windows.Controls.TextBlock, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.TextWrapping.NoWrap, 33, $asm.$.System.Windows.Controls.TextBlock.f10));
                }
            }
        },
        textBlockRenderElements: null,
        noWrapSize: null,
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.textBlockRenderElements = new (System.Windows.Media.RenderElementDictionary$1(System.Windows.Media.ITextBlockRenderElement))(Bridge.fn.cacheBind(this, this.createRenderElement$1));
        },
        getText: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.textProperty), String);
        },
        setText: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.textProperty, value);
        },
        getForeground: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.foregroundProperty), System.Windows.Media.Brush);
        },
        setForeground: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.foregroundProperty, value);
        },
        getFontFamily: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.fontFamilyProperty), System.Windows.Media.FontFamily);
        },
        setFontFamily: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.fontFamilyProperty, value);
        },
        getFontSize: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.fontSizeProperty), System.Double));
        },
        setFontSize: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.fontSizeProperty, value);
        },
        getFontStyle: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.fontStyleProperty), System.Int32));
        },
        setFontStyle: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.fontStyleProperty, value);
        },
        getFontWeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.fontWeightProperty), System.Int32));
        },
        setFontWeight: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.fontWeightProperty, value);
        },
        getFontStretch: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.fontStretchProperty), System.Int32));
        },
        setFontStretch: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.fontStretchProperty, value);
        },
        getTextAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.textAlignmentProperty), System.Int32));
        },
        setTextAlignment: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.textAlignmentProperty, value);
        },
        getTextTrimming: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.textTrimmingProperty), System.Int32));
        },
        setTextTrimming: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.textTrimmingProperty, value);
        },
        getTextWrapping: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBlock.textWrappingProperty), System.Int32));
        },
        setTextWrapping: function (value) {
            this.setValue(System.Windows.Controls.TextBlock.textWrappingProperty, value);
        },
        createRenderElementContentOverride: function (factory) {
            return this.textBlockRenderElements.getRenderElement(factory);
        },
        measureOverride: function (availableSize) {
            var $t, $t1;
            if (System.Windows.Size.op_Equality(this.noWrapSize, null)) {
                this.noWrapSize = System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTextMeasurementService().System$Windows$ITextMeasurementService$measure(($t = this.getText(), $t != null ? $t : ""), this.getFontSize(), new System.Windows.Media.Typeface.$ctor1(this.getFontFamily(), this.getFontStyle(), this.getFontWeight(), this.getFontStretch()), Number.POSITIVE_INFINITY);
            }

            if (this.getTextWrapping() === System.Windows.TextWrapping.NoWrap || this.noWrapSize.getWidth() <= availableSize.getWidth()) {
                return this.noWrapSize;
            }

            return System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTextMeasurementService().System$Windows$ITextMeasurementService$measure(($t1 = this.getText(), $t1 != null ? $t1 : ""), this.getFontSize(), new System.Windows.Media.Typeface.$ctor1(this.getFontFamily(), this.getFontStyle(), this.getFontWeight(), this.getFontStretch()), availableSize.getWidth());
        },
        arrangeOverride: function (finalSize) {
            var $t;
            $t = Bridge.getEnumerator(this.textBlockRenderElements.getElements());
            while ($t.moveNext()) {
                var textBlockRenderElement = $t.getCurrent();
                textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setBounds(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        },
        onTextChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f11));
            this.noWrapSize = null;
        },
        onFontFamilyChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f12));
            this.noWrapSize = null;
        },
        onFontSizeChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f13));
            this.noWrapSize = null;
        },
        onFontStyleChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f14));
            this.noWrapSize = null;
        },
        onFontWeightChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f15));
            this.noWrapSize = null;
        },
        onFontStretchChanged: function (e) {
            this.textBlockRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBlock.f16));
            this.noWrapSize = null;
        },
        createRenderElement$1: function (factory) {
            var textBlockRenderElement = factory.System$Windows$Media$IRenderElementFactory$createTextBlockRenderElement(this);

            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setBounds(new System.Windows.Rect.$ctor3(this.getVisualBounds().getSize()));
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontFamily(this.getFontFamily());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setForeground(this.getForeground());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontSize(this.getFontSize());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontStyle(this.getFontStyle());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontStretch(this.getFontStretch());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontWeight(this.getFontWeight());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setText(this.getText());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextAlignment(this.getTextAlignment());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextTrimming(this.getTextTrimming());
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextWrapping(this.getTextWrapping());

            return textBlockRenderElement;
        }
    });

    Bridge.ns("System.Windows.Controls.TextBlock", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.TextBlock, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onTextChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).textBlockRenderElements.setRenderElementsProperty(function (textBlockRenderElement) {
                textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setForeground(Bridge.cast(e.getNewValue(), System.Windows.Media.Brush));
            });
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onFontFamilyChanged(e);
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onFontSizeChanged(e);
        },
        f5: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onFontStyleChanged(e);
        },
        f6: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onFontWeightChanged(e);
        },
        f7: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).onFontStretchChanged(e);
        },
        f8: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).textBlockRenderElements.setRenderElementsProperty(function (textBlockRenderElement) {
                textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextAlignment(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f9: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).textBlockRenderElements.setRenderElementsProperty(function (textBlockRenderElement) {
                textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextTrimming(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f10: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBlock).textBlockRenderElements.setRenderElementsProperty(function (textBlockRenderElement) {
                textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setTextWrapping(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f11: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setText(this.getText());
        },
        f12: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontFamily(this.getFontFamily());
        },
        f13: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontSize(this.getFontSize());
        },
        f14: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontStyle(this.getFontStyle());
        },
        f15: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontWeight(this.getFontWeight());
        },
        f16: function (textBlockRenderElement) {
            textBlockRenderElement.System$Windows$Media$ITextBlockRenderElement$setFontStretch(this.getFontStretch());
        }
    });

    Bridge.define("System.Windows.Controls.TextBoxView", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            ctor: function () {
                System.Windows.UIElement.isHitTestVisibleProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBoxView.f1));
                System.Windows.UIElement.isEnabledProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBoxView.f2));
                System.Windows.Controls.Control.foregroundProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f3));
                System.Windows.Controls.Control.fontFamilyProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f4));
                System.Windows.Controls.Control.fontSizeProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f5));
                System.Windows.Controls.Control.fontStyleProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f6));
                System.Windows.Controls.Control.fontStretchProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f7));
                System.Windows.Controls.Control.fontWeightProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f8));
                System.Windows.Controls.TextBox.textAlignmentProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f9));
                System.Windows.Controls.TextBox.textWrappingProperty.overrideMetadata(System.Windows.Controls.TextBoxView, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.TextBoxView.f10));
            }
        },
        text: null,
        maxLength: 0,
        caretIndex: 0,
        selectionStart: 0,
        selectionLength: 0,
        acceptsReturn: false,
        acceptsTab: false,
        isReadOnly: false,
        horizontalScrollBarVisibility: 0,
        verticalScrollBarVisibility: 0,
        spellCheck: false,
        isPassword: false,
        textBoxRenderElements: null,
        measuredFontSize: 0,
        measuredFontFamily: null,
        measuredLineHeight: 0,
        config: {
            events: {
                TextChanged: null,
                CaretIndexChanged: null,
                SelectionStartChanged: null,
                SelectionLengthChanged: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.textBoxRenderElements = new (System.Windows.Media.RenderElementDictionary$1(System.Windows.Media.ITextBoxRenderElement))(Bridge.fn.cacheBind(this, this.createRenderElement$1));
            this.measuredLineHeight = Number.NaN;
        },
        getText: function () {
            return this.text;
        },
        setText: function (value) {
            if (Bridge.referenceEquals(this.text, value)) {
                return;
            }

            this.text = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f11));
            Granular.Extensions.EventHandlerExtensions.raise$2(this.TextChanged, this);
        },
        getMaxLength: function () {
            return this.maxLength;
        },
        setMaxLength: function (value) {
            if (this.maxLength === value) {
                return;
            }

            this.maxLength = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f12));
        },
        getCaretIndex: function () {
            return this.caretIndex;
        },
        setCaretIndex: function (value) {
            if (this.caretIndex === value) {
                return;
            }

            this.caretIndex = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f13));
            Granular.Extensions.EventHandlerExtensions.raise$2(this.CaretIndexChanged, this);
        },
        getSelectionStart: function () {
            return this.selectionStart;
        },
        setSelectionStart: function (value) {
            if (this.selectionStart === value) {
                return;
            }

            this.selectionStart = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f14));
            Granular.Extensions.EventHandlerExtensions.raise$2(this.SelectionStartChanged, this);
        },
        getSelectionLength: function () {
            return this.selectionLength;
        },
        setSelectionLength: function (value) {
            if (this.selectionLength === value) {
                return;
            }

            this.selectionLength = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f15));
            Granular.Extensions.EventHandlerExtensions.raise$2(this.SelectionLengthChanged, this);
        },
        getAcceptsReturn: function () {
            return this.acceptsReturn;
        },
        setAcceptsReturn: function (value) {
            if (this.acceptsReturn === value) {
                return;
            }

            this.acceptsReturn = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f16));
        },
        getAcceptsTab: function () {
            return this.acceptsTab;
        },
        setAcceptsTab: function (value) {
            if (this.acceptsTab === value) {
                return;
            }

            this.acceptsTab = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f17));
        },
        getIsReadOnly: function () {
            return this.isReadOnly;
        },
        setIsReadOnly: function (value) {
            if (this.isReadOnly === value) {
                return;
            }

            this.isReadOnly = value;
            this.setRenderElementsIsReadOnly();
        },
        getHorizontalScrollBarVisibility: function () {
            return this.horizontalScrollBarVisibility;
        },
        setHorizontalScrollBarVisibility: function (value) {
            if (this.horizontalScrollBarVisibility === value) {
                return;
            }

            this.horizontalScrollBarVisibility = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f18));
        },
        getVerticalScrollBarVisibility: function () {
            return this.verticalScrollBarVisibility;
        },
        setVerticalScrollBarVisibility: function (value) {
            if (this.verticalScrollBarVisibility === value) {
                return;
            }

            this.verticalScrollBarVisibility = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f19));
        },
        getSpellCheck: function () {
            return this.spellCheck;
        },
        setSpellCheck: function (value) {
            if (this.spellCheck === value) {
                return;
            }

            this.spellCheck = value;
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f20));
        },
        getIsPassword: function () {
            return this.isPassword;
        },
        setIsPassword: function (value) {
            if (this.isPassword === value) {
                return;
            }

            if (this.textBoxRenderElements.getCount() > 0) {
                throw new Granular.Exception("Can't set TextBoxView.IsPassword after render elements have been created");
            }

            this.isPassword = value;
        },
        createRenderElementContentOverride: function (factory) {
            return this.textBoxRenderElements.getRenderElement(factory);
        },
        measureOverride: function (availableSize) {
            return new System.Windows.Size(0, this.getLineHeight());
        },
        arrangeOverride: function (finalSize) {
            var bounds = new System.Windows.Rect.$ctor3(finalSize);
            this.textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setBounds(bounds);
            });
            return finalSize;
        },
        focusRenderElement: function () {
            var $t;
            $t = Bridge.getEnumerator(this.textBoxRenderElements.getElements());
            while ($t.moveNext()) {
                var textBoxRenderElement = $t.getCurrent();
                textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$focus();
            }
        },
        clearFocusRenderElement: function () {
            var $t;
            $t = Bridge.getEnumerator(this.textBoxRenderElements.getElements());
            while ($t.moveNext()) {
                var textBoxRenderElement = $t.getCurrent();
                textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$clearFocus();
            }
        },
        processRenderElementKeyEvent: function (e) {
            var $t;
            $t = Bridge.getEnumerator(this.textBoxRenderElements.getElements());
            while ($t.moveNext()) {
                var textBoxRenderElement = $t.getCurrent();
                textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$processKeyEvent(e);
            }
        },
        onIsEnabledChanged$1: function () {
            this.setRenderElementsIsHitTestVisible();
            this.setRenderElementsIsReadOnly();
        },
        setRenderElementsIsHitTestVisible: function () {
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f21));
        },
        setRenderElementsIsReadOnly: function () {
            this.textBoxRenderElements.setRenderElementsProperty(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f22));
        },
        getLineHeight: function () {
            var fontSize = System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontSizeProperty), System.Double));
            var fontFamily = Bridge.cast(this.getValue(System.Windows.Controls.Control.fontFamilyProperty), System.Windows.Media.FontFamily);

            if (!Granular.Extensions.DoubleExtensions.isNaN(this.measuredLineHeight) && Granular.Extensions.DoubleExtensions.isClose(this.measuredFontSize, fontSize) && Bridge.referenceEquals(this.measuredFontFamily, fontFamily)) {
                return this.measuredLineHeight;
            }

            this.measuredFontSize = fontSize;
            this.measuredFontFamily = fontFamily;
            this.measuredLineHeight = System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getTextMeasurementService().System$Windows$ITextMeasurementService$measure("", fontSize, new System.Windows.Media.Typeface.$ctor1(fontFamily), Number.POSITIVE_INFINITY).getHeight();

            return this.measuredLineHeight;
        },
        createRenderElement$1: function (factory) {
            var textBoxRenderElement = factory.System$Windows$Media$IRenderElementFactory$createTextBoxRenderElement(this);

            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setCaretIndex(this.getCaretIndex());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setSelectionLength(this.getSelectionLength());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setSelectionStart(this.getSelectionStart());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setText(this.getText());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setMaxLength(this.getMaxLength());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setBounds(new System.Windows.Rect.$ctor3(this.getVisualSize()));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setAcceptsReturn(this.getAcceptsReturn());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setAcceptsTab(this.getAcceptsTab());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setIsPassword(this.isPassword);
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setIsReadOnly(this.getIsReadOnly() || !this.getIsEnabled());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setIsHitTestVisible(this.getIsHitTestVisible() && this.getIsEnabled());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setSpellCheck(this.spellCheck);
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setHorizontalScrollBarVisibility(this.getHorizontalScrollBarVisibility());
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setVerticalScrollBarVisibility(this.getVerticalScrollBarVisibility());

            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setForeground(Bridge.cast(this.getValue(System.Windows.Controls.Control.foregroundProperty), System.Windows.Media.Brush));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setFontSize(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontSizeProperty), System.Double)));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setFontFamily(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontFamilyProperty), System.Windows.Media.FontFamily));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setFontStretch(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontStretchProperty), System.Int32)));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setFontStyle(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontStyleProperty), System.Int32)));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setFontWeight(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Control.fontWeightProperty), System.Int32)));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setTextAlignment(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.textAlignmentProperty), System.Int32)));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$setTextWrapping(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.textWrappingProperty), System.Int32)));

            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$addTextChanged(Bridge.fn.bind(this, function (sender, e) {
                this.setText(textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$getText());
            }));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$addCaretIndexChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f23));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$addSelectionStartChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f24));
            textBoxRenderElement.System$Windows$Media$ITextBoxRenderElement$addSelectionLengthChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBoxView.f25));

            this.invalidateMeasure();

            return textBoxRenderElement;
        }
    });

    Bridge.ns("System.Windows.Controls.TextBoxView", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.TextBoxView, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).setRenderElementsIsHitTestVisible();
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).onIsEnabledChanged$1();
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setForeground(Bridge.cast(e.getNewValue(), System.Windows.Media.Brush));
            });
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setFontFamily(Bridge.cast(e.getNewValue(), System.Windows.Media.FontFamily));
            });
        },
        f5: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setFontSize(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Double)));
            });
        },
        f6: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setFontStyle(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f7: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setFontStretch(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f8: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setFontWeight(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f9: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setTextAlignment(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f10: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBoxView).textBoxRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$ITextBoxRenderElement$setTextWrapping(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
            });
        },
        f11: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setText(this.text);
        },
        f12: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setMaxLength(this.maxLength);
        },
        f13: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setCaretIndex(this.caretIndex);
        },
        f14: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setSelectionStart(this.selectionStart);
        },
        f15: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setSelectionLength(this.selectionLength);
        },
        f16: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setAcceptsReturn(this.acceptsReturn);
        },
        f17: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setAcceptsTab(this.acceptsTab);
        },
        f18: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setHorizontalScrollBarVisibility(this.horizontalScrollBarVisibility);
        },
        f19: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setVerticalScrollBarVisibility(this.verticalScrollBarVisibility);
        },
        f20: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setSpellCheck(this.spellCheck);
        },
        f21: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setIsHitTestVisible(this.getIsHitTestVisible() && this.getIsEnabled());
        },
        f22: function (renderElement) {
            renderElement.System$Windows$Media$ITextBoxRenderElement$setIsReadOnly(this.getIsReadOnly() || !this.getIsEnabled());
        },
        f23: function (sender, e) {
            this.setCaretIndex(Bridge.cast(sender, System.Windows.Media.ITextBoxRenderElement).System$Windows$Media$ITextBoxRenderElement$getCaretIndex());
        },
        f24: function (sender, e) {
            this.setSelectionStart(Bridge.cast(sender, System.Windows.Media.ITextBoxRenderElement).System$Windows$Media$ITextBoxRenderElement$getSelectionStart());
        },
        f25: function (sender, e) {
            this.setSelectionLength(Bridge.cast(sender, System.Windows.Media.ITextBoxRenderElement).System$Windows$Media$ITextBoxRenderElement$getSelectionLength());
        }
    });

    Bridge.define("System.Windows.DataTrigger", {
        inherits: [System.Windows.DataTriggerBase],
        config: {
            properties: {
                Binding: null,
                Value$5: null,
                Setters: null
            },
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.DataTriggerBase.ctor.call(this);
            this.setSetters(new (Granular.Collections.ObservableCollection$1(System.Windows.ITriggerAction)).ctor());
        },
        getTriggerActions: function () {
            return this.getSetters();
        },
        createDataTriggerCondition: function (element) {
            if (this.getBinding() == null) {
                throw new Granular.Exception("DataTrigger.Binding cannot be null");
            }

            return System.Windows.DataTriggerCondition.register(element, this.getBinding(), this.getValue$5());
        }
    });

    Bridge.define("System.Windows.Documents.Adorner", {
        inherits: [System.Windows.FrameworkElement],
        child: null,
        visualPathTransform: null,
        config: {
            properties: {
                AdornedElement: null
            }
        },
        ctor: function (adornedElement) {
            this.$initialize();
            System.Windows.FrameworkElement.ctor.call(this);
            this.setAdornedElement(adornedElement);
        },
        getChild: function () {
            return this.child;
        },
        setChild: function (value) {
            if (Bridge.referenceEquals(this.child, value)) {
                return;
            }

            if (this.child != null) {
                this.removeLogicalChild(this.child);
                this.removeVisualChild(this.child);
            }

            this.child = value;

            if (this.child != null) {
                this.addLogicalChild(this.child);
                this.addVisualChild(this.child);
            }

            this.invalidateMeasure();
        },
        measureOverride: function (availableSize) {
            if (this.getChild() == null) {
                return System.Windows.Size.zero;
            }

            this.getChild().measure(this.getAdornedElement().getRenderSize());
            return this.getAdornedElement().getRenderSize();
        },
        arrangeOverride: function (finalSize) {
            if (this.getChild() != null) {
                this.getChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
            }

            this.visualPathTransform.setValue$3();

            return finalSize;
        },
        onVisualParentChanged: function (oldVisualParent, newVisualParent) {
            System.Windows.FrameworkElement.prototype.onVisualParentChanged.call(this, oldVisualParent, newVisualParent);

            if (oldVisualParent != null) {
                this.visualPathTransform.dispose();
                this.setRenderTransform(System.Windows.Media.Transform.identity);
            }

            if (newVisualParent != null) {
                this.visualPathTransform = new System.Windows.Documents.Adorner.VisualPathTransform(this.getAdornedElement(), newVisualParent.getVisualParent());
                this.setRenderTransform(this.visualPathTransform);
            }
        },
        arrange$1: function () {
            this.arrange(new System.Windows.Rect.$ctor3(this.getAdornedElement().getRenderSize()));
            this.visualPathTransform.setValue$3();
        }
    });

    Bridge.define("System.Windows.Documents.Adorner.VisualPathTransform", {
        inherits: [System.Windows.Media.Transform,System.IDisposable],
        value: null,
        visual: null,
        ancestor: null,
        visualPath: null,
        config: {
            alias: [
            "dispose", "System$IDisposable$dispose"
            ]
        },
        ctor: function (visual, ancestor) {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            var $t;
            this.visual = visual;
            this.ancestor = ancestor;

            this.visualPath = System.Linq.Enumerable.from(System.Windows.Media.VisualExtensions.getVisualPath(visual, ancestor)).toArray();

            $t = Bridge.getEnumerator(this.visualPath, System.Windows.Media.Visual);
            while ($t.moveNext()) {
                var element = $t.getCurrent();
                element.addVisualTransformChanged(Bridge.fn.cacheBind(this, this.onVisualTransformChanged));
            }

            this.setValue$3();
    },
    getValue$5: function () {
        return this.value;
    },
    dispose: function () {
        var $t;
        $t = Bridge.getEnumerator(this.visualPath, System.Windows.Media.Visual);
        while ($t.moveNext()) {
            var element = $t.getCurrent();
            element.removeVisualTransformChanged(Bridge.fn.cacheBind(this, this.onVisualTransformChanged));
        }
    },
    onVisualTransformChanged: function (sender, e) {
        this.setValue$3();
    },
    setValue$3: function () {
        var newValue = this.visual.transformToAncestor(this.ancestor);

        if (System.Windows.Media.Matrix.op_Inequality(this.value, newValue)) {
            this.value = newValue;
            this.raiseChanged();
        }
    }
    });

    Bridge.define("System.Windows.Documents.AdornerLayer", {
        inherits: [System.Windows.FrameworkElement],
        statics: {
            getAdornerLayer: function (visual) {
                while (visual != null) {
                    if (Bridge.is(visual, System.Windows.Documents.IAdornerLayerHost)) {
                        return Bridge.cast(visual, System.Windows.Documents.IAdornerLayerHost).System$Windows$Documents$IAdornerLayerHost$getAdornerLayer();
                    }

                    visual = visual.getVisualParent();
                }

                return null;
            }
        },
        onVisualParentChanged: function (oldVisualParent, newVisualParent) {
            System.Windows.FrameworkElement.prototype.onVisualParentChanged.call(this, oldVisualParent, newVisualParent);

            if (oldVisualParent != null) {
                Bridge.cast(oldVisualParent, System.Windows.UIElement).removeLayoutUpdated(Bridge.fn.cacheBind(this, this.onParentLayoutUpdated));
            }

            if (newVisualParent != null) {
                Bridge.cast(newVisualParent, System.Windows.UIElement).addLayoutUpdated(Bridge.fn.cacheBind(this, this.onParentLayoutUpdated));
            }
        },
        onParentLayoutUpdated: function (sender, e) {
            var $t;
            $t = Bridge.getEnumerator(this.getVisualChildren());
            while ($t.moveNext()) {
                var adorner = Bridge.cast($t.getCurrent(), System.Windows.Documents.Adorner);
                adorner.arrange$1();
            }
        },
        add: function (adorner) {
            this.addLogicalChild(adorner);
            this.addVisualChild(adorner);

            this.invalidateArrange();
        },
        remove: function (adorner) {
            this.removeVisualChild(adorner);
            this.removeLogicalChild(adorner);
        }
    });

    Bridge.define("System.Windows.Documents.Block", {
        inherits: [System.Windows.Documents.TextElement],
        statics: {
            borderBrushProperty: null,
            borderThicknessProperty: null,
            lineHeightProperty: null,
            paddingProperty: null,
            textAlignmentProperty: null,
            config: {
                init: function () {
                    this.borderBrushProperty = System.Windows.Controls.Border.borderBrushProperty.addOwner(System.Windows.Documents.Block);
                    this.borderThicknessProperty = System.Windows.Controls.Border.borderThicknessProperty.addOwner(System.Windows.Documents.Block);
                    this.lineHeightProperty = System.Windows.DependencyProperty.register("LineHeight", System.Double, System.Windows.Documents.Block, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.paddingProperty = System.Windows.Controls.Border.paddingProperty.addOwner(System.Windows.Documents.Block);
                    this.textAlignmentProperty = System.Windows.DependencyProperty.registerAttached("TextAlignment", System.Windows.TextAlignment, System.Windows.Documents.Block, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.TextAlignment.Left, System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                }
            }
        },
        config: {
            properties: {
                SiblingBlocks: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Documents.TextElement.ctor.call(this);
            //FrameworkElement.MarginProperty.OverrideMetadata(typeof(Block), ...
        },
        getBorderBrush: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.Block.borderBrushProperty), System.Windows.Media.Brush);
        },
        setBorderBrush: function (value) {
            this.setValue(System.Windows.Documents.Block.borderBrushProperty, value);
        },
        getBorderThickness: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.Block.borderThicknessProperty), System.Windows.Thickness);
        },
        setBorderThickness: function (value) {
            this.setValue(System.Windows.Documents.Block.borderThicknessProperty, value);
        },
        getLineHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.Block.lineHeightProperty), System.Double));
        },
        setLineHeight: function (value) {
            this.setValue(System.Windows.Documents.Block.lineHeightProperty, value);
        },
        getPadding: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.Block.paddingProperty), System.Windows.Thickness);
        },
        setPadding: function (value) {
            this.setValue(System.Windows.Documents.Block.paddingProperty, value);
        },
        getTextAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Documents.Block.textAlignmentProperty), System.Int32));
        },
        setTextAlignment: function (value) {
            this.setValue(System.Windows.Documents.Block.textAlignmentProperty, value);
        },
        getRenderElement: function (factory) {
            return null;
        },
        removeRenderElement: function (factory) {
            //
        }
    });

    Bridge.define("System.Windows.Documents.Inline", {
        inherits: [System.Windows.Documents.TextElement],
        config: {
            properties: {
                SiblingInlines: null
            }
        }
    });

    Bridge.define("System.Windows.EventTrigger", {
        inherits: [System.Windows.EventTriggerBase],
        config: {
            properties: {
                RoutedEvent: null,
                SourceName: null,
                Actions: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.EventTriggerBase.ctor.call(this);
            this.setActions(new (Granular.Collections.ObservableCollection$1(System.Windows.ITriggerAction)).ctor());
        },
        getTriggerActions: function () {
            return this.getActions();
        },
        createEventTriggerCondition: function (element) {
            if (this.getRoutedEvent() == null) {
                throw new Granular.Exception("EventTrigger.RoutedEvent cannot be null");
            }

            return System.Windows.EventTrigger.EventTriggerCondition.register(element, this.getRoutedEvent());
        }
    });

    Bridge.define("System.Windows.Media.Animation.TransitionAnimationTimeline$1", function (T) { return {
        inherits: [System.Windows.Media.Animation.AnimationTimeline],
        statics: {
            toProperty: null,
            fromProperty: null,
            byProperty: null,
            easingFunctionProperty: null,
            config: {
                init: function () {
                    this.toProperty = System.Windows.DependencyProperty.register("To", T, System.Windows.Media.Animation.TransitionAnimationTimeline$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.fromProperty = System.Windows.DependencyProperty.register("From", T, System.Windows.Media.Animation.TransitionAnimationTimeline$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.byProperty = System.Windows.DependencyProperty.register("By", T, System.Windows.Media.Animation.TransitionAnimationTimeline$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.easingFunctionProperty = System.Windows.DependencyProperty.register("EasingFunction", System.Windows.Media.Animation.IEasingFunction, System.Windows.Media.Animation.TransitionAnimationTimeline$1(T), new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        animationOperations: null,
        isAccumulable: false,
        ctor: function (animationOperations, isAccumulable) {
            this.$initialize();
            System.Windows.Media.Animation.AnimationTimeline.ctor.call(this);
            this.animationOperations = animationOperations;
            this.isAccumulable = isAccumulable;
        },
        getTo: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).toProperty), T);
        },
        setTo: function (value) {
            this.setValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).toProperty, value);
        },
        getFrom: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).fromProperty), T);
        },
        setFrom: function (value) {
            this.setValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).fromProperty, value);
        },
        getBy: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).byProperty), T);
        },
        setBy: function (value) {
            this.setValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).byProperty, value);
        },
        getEasingFunction: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).easingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
        },
        setEasingFunction: function (value) {
            this.setValue(System.Windows.Media.Animation.TransitionAnimationTimeline$1(T).easingFunctionProperty, value);
        },
        getCurrentValue: function (defaultOriginValue, defaultDestinationValue, animationClock) {
            var progress = this.getEasingFunction() != null ? this.getEasingFunction().System$Windows$Media$Animation$IEasingFunction$ease(animationClock.getCurrentState().getProgress()) : animationClock.getCurrentState().getProgress();

            var baseValue = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$getZero"]();
            var from;
            var to;

            if (this.getFrom() != null) {
                if (this.getTo() != null) {
                    if (this.getIsAdditive() && this.isAccumulable) {
                        baseValue = Bridge.cast(defaultOriginValue, T);
                    }
                    from = this.getFrom();
                    to = this.getTo();
                } else if (this.getBy() != null) {
                    if (this.getIsAdditive() && this.isAccumulable) {
                        baseValue = Bridge.cast(defaultOriginValue, T);
                    }
                    from = this.getFrom();
                    to = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$add"](this.getFrom(), this.getBy());
                } else {
                    from = this.getFrom();
                    to = Bridge.cast(defaultDestinationValue, T);
                }
            } else if (this.getTo() != null) {
                from = Bridge.cast(defaultOriginValue, T);
                to = this.getTo();
            } else if (this.getBy() != null) {
                if (this.isAccumulable) {
                    baseValue = Bridge.cast(defaultOriginValue, T);
                }
                from = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$getZero"]();
                to = this.getBy();
            } else {
                from = Bridge.cast(defaultOriginValue, T);
                to = Bridge.cast(defaultDestinationValue, T);
            }

            if (this.getIsCumulative() && this.isAccumulable) {
                baseValue = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$add"](baseValue, this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$scale"](this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$subtract"](to, from), Math.floor(animationClock.getCurrentState().getIteration())));
            }

            return this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$add"](baseValue, this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$interpolate"](from, to, progress));
        }
    }; });

    Bridge.define("System.Windows.Media.Animation.KeyFramesAnimationTimeline$1", function (T) { return {
        inherits: [System.Windows.Media.Animation.AnimationTimeline],
        animationOperations: null,
        isAccumulable: false,
        config: {
            properties: {
                KeyFrames: null
            }
        },
        ctor: function (animationOperations, isAccumulable) {
            this.$initialize();
            System.Windows.Media.Animation.AnimationTimeline.ctor.call(this);
            this.animationOperations = animationOperations;
            this.isAccumulable = isAccumulable;

            this.setKeyFrames(new (System.Windows.FreezableCollection$1(System.Windows.Media.Animation.KeyFrame$1(T))).ctor());
            this.getKeyFrames().trySetContextParent(this);
        },
        getCurrentValue: function (defaultOriginValue, defaultDestinationValue, animationClock) {
            if (this.getKeyFrames().getCount() === 0) {
                return defaultDestinationValue;
            }

            var duration = this.getDuration().getHasTimeSpan() ? this.getDuration().getTimeSpan() : this.getKeyFramesDuration();

            var time = Granular.Extensions.TimeSpanExtensions.scale(duration, animationClock.getCurrentState().getProgress());

            var index = this.getKeyFrameIndexAtTime(time, duration);

            var value;

            if (index === this.getKeyFrames().getCount()) {
                value = this.getKeyFrames().getItem(((this.getKeyFrames().getCount() - 1) | 0)).getValue$5();
            } else {
                var baseValue;

                if (index === 0) {
                    baseValue = this.getIsAdditive() && this.isAccumulable ? this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$getZero"]() : Bridge.cast(defaultOriginValue, T);
                } else {
                    baseValue = this.getKeyFrames().getItem(((index - 1) | 0)).getValue$5();
                }

                var segmentStart = index === 0 ? System.TimeSpan.zero : this.getKeyFrameTime(this.getKeyFrames().getItem(((index - 1) | 0)), duration);
                var segmentEnd = this.getKeyFrameTime(this.getKeyFrames().getItem(index), duration);

                var progress = System.TimeSpan.eq(segmentEnd, segmentStart) ? 1 : (System.TimeSpan.sub(time, segmentStart)).getTicks() / System.Int64.toNumber((System.TimeSpan.sub(segmentEnd, segmentStart)).getTicks());

                value = this.getKeyFrames().getItem(index).interpolateValue(baseValue, progress);
            }

            if (this.getIsAdditive() && this.isAccumulable) {
                value = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$add"](value, Bridge.cast(defaultOriginValue, T));
            }

            if (this.getIsCumulative() && this.isAccumulable) {
                value = this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$add"](value, this.animationOperations["System$Windows$Media$Animation$IAnimationOperations$1$" + Bridge.getTypeAlias(T) + "$scale"](this.getKeyFrames().getItem(((this.getKeyFrames().getCount() - 1) | 0)).getValue$5(), Math.floor(animationClock.getCurrentState().getIteration())));
            }

            return value;
        },
        getKeyFrameTime: function (keyFrame, keyFramesDuration) {
            if (keyFrame.getKeyTime().getHasTimeSpan()) {
                return keyFrame.getKeyTime().getTimeSpan();
            }

            if (keyFrame.getKeyTime().getHasPercent()) {
                return Granular.Extensions.TimeSpanExtensions.scale(keyFramesDuration, keyFrame.getKeyTime().getPercent());
            }

            throw new Granular.Exception("KeyTime of type \"{0}\" is not supported", [keyFrame.getKeyTime().getType()]);
        },
        getKeyFrameIndexAtTime: function (time, keyFramesDuration) {
            return ((this.getKeyFrames().indexOf(System.Linq.Enumerable.from(this.getKeyFrames()).lastOrDefault(Bridge.fn.bind(this, function (keyFrame) {
                    return System.TimeSpan.lt(this.getKeyFrameTime(keyFrame, keyFramesDuration), time);
                }), null)) + 1) | 0);
        },
        getKeyFramesDuration: function () {
            return System.Linq.Enumerable.from(System.Linq.Enumerable.from(this.getKeyFrames()).where($asm.$.System.Windows.Media.Animation.KeyFramesAnimationTimeline$1.f1).select($asm.$.System.Windows.Media.Animation.KeyFramesAnimationTimeline$1.f2).defaultIfEmpty(System.TimeSpan.fromSeconds(1))).max();
        }
    }; });

    Bridge.ns("System.Windows.Media.Animation.KeyFramesAnimationTimeline$1", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Animation.KeyFramesAnimationTimeline$1, {
        f1: function (keyFrame) {
            return keyFrame.getKeyTime().getHasTimeSpan();
        },
        f2: function (keyFrame) {
            return keyFrame.getKeyTime().getTimeSpan();
        }
    });

    Bridge.define("System.Windows.Media.Animation.DiscreteColorKeyFrame", {
        inherits: [System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Media.Color)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Media.Color).ctor.call(this, System.Windows.Media.Animation.ColorAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.DiscreteDoubleKeyFrame", {
        inherits: [System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Nullable$1(System.Double))],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Nullable$1(System.Double)).ctor.call(this, System.Windows.Media.Animation.DoubleAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.DiscreteRectKeyFrame", {
        inherits: [System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Rect)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Rect).ctor.call(this, System.Windows.Media.Animation.RectAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.DiscreteThicknessKeyFrame", {
        inherits: [System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Thickness)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.DiscreteKeyFrame$1(System.Windows.Thickness).ctor.call(this, System.Windows.Media.Animation.ThicknessAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingColorKeyFrame", {
        inherits: [System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Media.Color)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Media.Color).ctor.call(this, System.Windows.Media.Animation.ColorAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingDoubleKeyFrame", {
        inherits: [System.Windows.Media.Animation.EasingKeyFrame$1(System.Nullable$1(System.Double))],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.EasingKeyFrame$1(System.Nullable$1(System.Double)).ctor.call(this, System.Windows.Media.Animation.DoubleAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingRectKeyFrame", {
        inherits: [System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Rect)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Rect).ctor.call(this, System.Windows.Media.Animation.RectAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.EasingThicknessKeyFrame", {
        inherits: [System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Thickness)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.EasingKeyFrame$1(System.Windows.Thickness).ctor.call(this, System.Windows.Media.Animation.ThicknessAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.LinearColorKeyFrame", {
        inherits: [System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Media.Color)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Media.Color).ctor.call(this, System.Windows.Media.Animation.ColorAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.LinearDoubleKeyFrame", {
        inherits: [System.Windows.Media.Animation.LinearKeyFrame$1(System.Nullable$1(System.Double))],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.LinearKeyFrame$1(System.Nullable$1(System.Double)).ctor.call(this, System.Windows.Media.Animation.DoubleAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.LinearRectKeyFrame", {
        inherits: [System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Rect)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Rect).ctor.call(this, System.Windows.Media.Animation.RectAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.LinearThicknessKeyFrame", {
        inherits: [System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Thickness)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.LinearKeyFrame$1(System.Windows.Thickness).ctor.call(this, System.Windows.Media.Animation.ThicknessAnimationOperations.default);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.ParallelTimeline", {
        inherits: [System.Windows.Media.Animation.TimelineGroup],
        createGroupClock: function (children) {
            return new System.Windows.Media.Animation.ParallelTimelineClock(this, children);
        }
    });

    Bridge.define("System.Windows.Media.Animation.SequentialTimeline", {
        inherits: [System.Windows.Media.Animation.TimelineGroup],
        createGroupClock: function (children) {
            return new System.Windows.Media.Animation.SequentialTimelineClock(this, children);
        }
    });

    Bridge.define("System.Windows.Media.GradientBrush", {
        inherits: [System.Windows.Media.Brush],
        statics: {
            spreadMethodProperty: null,
            mappingModeProperty: null,
            gradientStopsProperty: null,
            config: {
                init: function () {
                    this.spreadMethodProperty = System.Windows.DependencyProperty.register("SpreadMethod", System.Windows.Media.GradientSpreadMethod, System.Windows.Media.GradientBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.mappingModeProperty = System.Windows.DependencyProperty.register("MappingMode", System.Windows.Media.BrushMappingMode, System.Windows.Media.GradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.BrushMappingMode.RelativeToBoundingBox));
                    this.gradientStopsProperty = System.Windows.DependencyProperty.register("GradientStops", System.Windows.Media.GradientStopCollection, System.Windows.Media.GradientBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Brush.ctor.call(this);
            //
        },
        $ctor1: function (gradientStops) {
            this.$initialize();
            System.Windows.Media.Brush.ctor.call(this);
            this.setGradientStops(new System.Windows.Media.GradientStopCollection.$ctor1(gradientStops));
        },
        getSpreadMethod: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.GradientBrush.spreadMethodProperty), System.Int32));
        },
        setSpreadMethod: function (value) {
            this.setValue(System.Windows.Media.GradientBrush.spreadMethodProperty, value);
        },
        getMappingMode: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.GradientBrush.mappingModeProperty), System.Int32));
        },
        setMappingMode: function (value) {
            this.setValue(System.Windows.Media.GradientBrush.mappingModeProperty, value);
        },
        getGradientStops: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.GradientBrush.gradientStopsProperty), System.Windows.Media.GradientStopCollection);
        },
        setGradientStops: function (value) {
            this.setValue(System.Windows.Media.GradientBrush.gradientStopsProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.TileBrush", {
        inherits: [System.Windows.Media.Brush],
        statics: {
            tileModeProperty: null,
            stretchProperty: null,
            viewportProperty: null,
            viewportUnitsProperty: null,
            config: {
                init: function () {
                    this.tileModeProperty = System.Windows.DependencyProperty.register("TileMode", System.Windows.Media.TileMode, System.Windows.Media.TileBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.stretchProperty = System.Windows.DependencyProperty.register("Stretch", System.Windows.Media.Stretch, System.Windows.Media.TileBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.viewportProperty = System.Windows.DependencyProperty.register("Viewport", System.Windows.Rect, System.Windows.Media.TileBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.viewportUnitsProperty = System.Windows.DependencyProperty.register("ViewportUnits", System.Windows.Media.BrushMappingMode, System.Windows.Media.TileBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        getTileMode: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.TileBrush.tileModeProperty), System.Int32));
        },
        setTileMode: function (value) {
            this.setValue(System.Windows.Media.TileBrush.tileModeProperty, value);
        },
        getStretch: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.TileBrush.stretchProperty), System.Int32));
        },
        setStretch: function (value) {
            this.setValue(System.Windows.Media.TileBrush.stretchProperty, value);
        },
        getViewport: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.TileBrush.viewportProperty), System.Windows.Rect);
        },
        setViewport: function (value) {
            this.setValue(System.Windows.Media.TileBrush.viewportProperty, value);
        },
        getViewportUnits: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.TileBrush.viewportUnitsProperty), System.Int32));
        },
        setViewportUnits: function (value) {
            this.setValue(System.Windows.Media.TileBrush.viewportUnitsProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.Imaging.BitmapSource", {
        inherits: [System.Windows.Media.ImageSource],
        statics: {
            create: function (data, sourceRect) {
                if (sourceRect === void 0) { sourceRect = null; }
                return System.Windows.Media.Imaging.BitmapSource.create$1(System.Windows.Media.RenderImageType.Unknown, data, sourceRect);
            },
            create$1: function (imageType, data, sourceRect) {
                if (sourceRect === void 0) { sourceRect = null; }
                return new System.Windows.Media.Imaging.BitmapSource.$ctor1(System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getRenderImageSourceFactory().System$Windows$IRenderImageSourceFactory$createRenderImageSource$1(imageType, data, sourceRect));
            }
        },
        renderImageSource: null,
        renderImageState: 0,
        config: {
            events: {
                DownloadProgress: null,
                DownloadCompleted: null,
                DownloadFailed: null
            },
            properties: {
                IsDownloading: false
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.ImageSource.ctor.call(this);
            //
        },
        $ctor1: function (renderImageSource) {
            this.$initialize();
            System.Windows.Media.ImageSource.ctor.call(this);
            this.renderImageSource = renderImageSource;
        },
        getRenderImageSource: function () {
            return this.renderImageSource;
        },
        setRenderImageState: function (renderImageState) {
            if (this.renderImageState === renderImageState) {
                return;
            }

            var oldRenderImageState = this.renderImageState;
            this.renderImageState = renderImageState;

            if (oldRenderImageState !== System.Windows.Media.RenderImageState.Idle && oldRenderImageState !== System.Windows.Media.RenderImageState.DownloadProgress || renderImageState === System.Windows.Media.RenderImageState.Idle) {
                throw new Granular.Exception("Can't change BitmapSource.RenderImageState from \"{0}\" to \"{1}\"", [oldRenderImageState, renderImageState]);
            }

            switch (renderImageState) {
                case System.Windows.Media.RenderImageState.DownloadProgress: 
                    this.setIsDownloading(true);
                    Granular.Extensions.EventHandlerExtensions.raise$2(this.DownloadProgress, this);
                    break;
                case System.Windows.Media.RenderImageState.DownloadCompleted: 
                    this.setIsDownloading(false);
                    Granular.Extensions.EventHandlerExtensions.raise$2(this.DownloadCompleted, this);
                    break;
                case System.Windows.Media.RenderImageState.DownloadFailed: 
                    this.setIsDownloading(false);
                    Granular.Extensions.EventHandlerExtensions.raise$2(this.DownloadFailed, this);
                    break;
                default: 
                    throw new Granular.Exception("Unexpected DownloadState \"{0}\"", [renderImageState]);
            }
        }
    });

    Bridge.define("System.Windows.Media.MatrixTransform", {
        inherits: [System.Windows.Media.Transform],
        statics: {
            matrixProperty: null,
            config: {
                init: function () {
                    this.matrixProperty = System.Windows.DependencyProperty.register("Matrix", System.Windows.Media.Matrix, System.Windows.Media.MatrixTransform, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.Matrix.identity));
                }
            }
        },
        getValue$5: function () {
            return this.getMatrix();
        },
        getMatrix: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.MatrixTransform.matrixProperty), System.Windows.Media.Matrix);
        },
        setMatrix: function (value) {
            this.setValue(System.Windows.Media.MatrixTransform.matrixProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.RotateTransform", {
        inherits: [System.Windows.Media.Transform],
        statics: {
            angleProperty: null,
            centerXProperty: null,
            centerYProperty: null,
            config: {
                init: function () {
                    this.angleProperty = System.Windows.DependencyProperty.register("Angle", System.Double, System.Windows.Media.RotateTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.RotateTransform.setMatrix));
                    this.centerXProperty = System.Windows.DependencyProperty.register("CenterX", System.Double, System.Windows.Media.RotateTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.RotateTransform.setMatrix));
                    this.centerYProperty = System.Windows.DependencyProperty.register("CenterY", System.Double, System.Windows.Media.RotateTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.RotateTransform.setMatrix));
                }
            },
            setMatrix: function (dependencyObject, e) {
                (Bridge.as(dependencyObject, System.Windows.Media.RotateTransform)).setMatrix();
            }
        },
        matrix: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            this.matrix = System.Windows.Media.Matrix.identity;
        },
        getValue$5: function () {
            return this.matrix;
        },
        getAngle: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.RotateTransform.angleProperty), System.Double));
        },
        setAngle: function (value) {
            this.setValue(System.Windows.Media.RotateTransform.angleProperty, value);
        },
        getCenterX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.RotateTransform.centerXProperty), System.Double));
        },
        setCenterX: function (value) {
            this.setValue(System.Windows.Media.RotateTransform.centerXProperty, value);
        },
        getCenterY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.RotateTransform.centerYProperty), System.Double));
        },
        setCenterY: function (value) {
            this.setValue(System.Windows.Media.RotateTransform.centerYProperty, value);
        },
        setMatrix: function () {
            this.matrix = System.Windows.Media.Matrix.rotationMatrix(Math.PI * this.getAngle() / 180, this.getCenterX(), this.getCenterY());
        }
    });

    Bridge.define("System.Windows.Media.ScaleTransform", {
        inherits: [System.Windows.Media.Transform],
        statics: {
            scaleXProperty: null,
            scaleYProperty: null,
            centerXProperty: null,
            centerYProperty: null,
            config: {
                init: function () {
                    this.scaleXProperty = System.Windows.DependencyProperty.register("ScaleX", System.Double, System.Windows.Media.ScaleTransform, new System.Windows.FrameworkPropertyMetadata.$ctor6(1.0, System.Windows.Media.ScaleTransform.setMatrix));
                    this.scaleYProperty = System.Windows.DependencyProperty.register("ScaleY", System.Double, System.Windows.Media.ScaleTransform, new System.Windows.FrameworkPropertyMetadata.$ctor6(1.0, System.Windows.Media.ScaleTransform.setMatrix));
                    this.centerXProperty = System.Windows.DependencyProperty.register("CenterX", System.Double, System.Windows.Media.ScaleTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.ScaleTransform.setMatrix));
                    this.centerYProperty = System.Windows.DependencyProperty.register("CenterY", System.Double, System.Windows.Media.ScaleTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.ScaleTransform.setMatrix));
                }
            },
            setMatrix: function (dependencyObject, e) {
                (Bridge.as(dependencyObject, System.Windows.Media.ScaleTransform)).setMatrix();
            }
        },
        matrix: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            this.matrix = System.Windows.Media.Matrix.identity;
        },
        getValue$5: function () {
            return this.matrix;
        },
        getScaleX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.ScaleTransform.scaleXProperty), System.Double));
        },
        setScaleX: function (value) {
            this.setValue(System.Windows.Media.ScaleTransform.scaleXProperty, value);
        },
        getScaleY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.ScaleTransform.scaleYProperty), System.Double));
        },
        setScaleY: function (value) {
            this.setValue(System.Windows.Media.ScaleTransform.scaleYProperty, value);
        },
        getCenterX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.ScaleTransform.centerXProperty), System.Double));
        },
        setCenterX: function (value) {
            this.setValue(System.Windows.Media.ScaleTransform.centerXProperty, value);
        },
        getCenterY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.ScaleTransform.centerYProperty), System.Double));
        },
        setCenterY: function (value) {
            this.setValue(System.Windows.Media.ScaleTransform.centerYProperty, value);
        },
        setMatrix: function () {
            this.matrix = System.Windows.Media.Matrix.scalingMatrix(this.getScaleX(), this.getScaleY(), this.getCenterX(), this.getCenterY());
        }
    });

    Bridge.define("System.Windows.Media.SkewTransform", {
        inherits: [System.Windows.Media.Transform],
        statics: {
            angleXProperty: null,
            angleYProperty: null,
            centerXProperty: null,
            centerYProperty: null,
            config: {
                init: function () {
                    this.angleXProperty = System.Windows.DependencyProperty.register("AngleX", System.Double, System.Windows.Media.SkewTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.SkewTransform.setMatrix));
                    this.angleYProperty = System.Windows.DependencyProperty.register("AngleY", System.Double, System.Windows.Media.SkewTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.SkewTransform.setMatrix));
                    this.centerXProperty = System.Windows.DependencyProperty.register("CenterX", System.Double, System.Windows.Media.SkewTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.SkewTransform.setMatrix));
                    this.centerYProperty = System.Windows.DependencyProperty.register("CenterY", System.Double, System.Windows.Media.SkewTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.SkewTransform.setMatrix));
                }
            },
            setMatrix: function (dependencyObject, e) {
                (Bridge.as(dependencyObject, System.Windows.Media.SkewTransform)).setMatrix();
            }
        },
        matrix: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            this.matrix = System.Windows.Media.Matrix.identity;
        },
        getValue$5: function () {
            return this.matrix;
        },
        getAngleX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.SkewTransform.angleXProperty), System.Double));
        },
        setAngleX: function (value) {
            this.setValue(System.Windows.Media.SkewTransform.angleXProperty, value);
        },
        getAngleY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.SkewTransform.angleYProperty), System.Double));
        },
        setAngleY: function (value) {
            this.setValue(System.Windows.Media.SkewTransform.angleYProperty, value);
        },
        getCenterX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.SkewTransform.centerXProperty), System.Double));
        },
        setCenterX: function (value) {
            this.setValue(System.Windows.Media.SkewTransform.centerXProperty, value);
        },
        getCenterY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.SkewTransform.centerYProperty), System.Double));
        },
        setCenterY: function (value) {
            this.setValue(System.Windows.Media.SkewTransform.centerYProperty, value);
        },
        setMatrix: function () {
            this.matrix = System.Windows.Media.Matrix.skewMatrix(Math.PI * this.getAngleX() / 180, Math.PI * this.getAngleY() / 180, this.getCenterX(), this.getCenterY());
        }
    });

    Bridge.define("System.Windows.Media.SolidColorBrush", {
        inherits: [System.Windows.Media.Brush],
        statics: {
            colorProperty: null,
            config: {
                init: function () {
                    this.colorProperty = System.Windows.DependencyProperty.register("Color", System.Windows.Media.Color, System.Windows.Media.SolidColorBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Media.Colors.getTransparent()));
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Brush.ctor.call(this);
            //
        },
        $ctor1: function (color) {
            this.$initialize();
            System.Windows.Media.Brush.ctor.call(this);
            this.setColor(color);
        },
        getColor: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.SolidColorBrush.colorProperty), System.Windows.Media.Color);
        },
        setColor: function (value) {
            this.setValue(System.Windows.Media.SolidColorBrush.colorProperty, value);
        },
        toString: function () {
            return System.String.format("SolidColorBrush({0})", this.getColor());
        }
    });

    Bridge.define("System.Windows.Media.Transform.IdentityTransform", {
        inherits: [System.Windows.Media.Transform],
        getValue$5: function () {
            return System.Windows.Media.Matrix.identity;
        }
    });

    Bridge.define("System.Windows.Media.TransformGroup", {
        inherits: [System.Windows.Media.Transform],
        matrix: null,
        config: {
            properties: {
                Children: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            this.matrix = System.Windows.Media.Matrix.identity;

            this.setChildren(new (System.Windows.FreezableCollection$1(System.Windows.Media.Transform)).ctor());
            this.getChildren().trySetContextParent(this);
            this.getChildren().addChanged(Bridge.fn.cacheBind(this, this.onChildChanged));
        },
        getValue$5: function () {
            return this.matrix;
        },
        onChildChanged: function (sender, e) {
            this.matrix = System.Linq.Enumerable.from(this.getChildren()).select($asm.$.System.Windows.Media.TransformGroup.f1).defaultIfEmpty(System.Windows.Media.Matrix.identity).aggregate($asm.$.System.Windows.Media.TransformGroup.f2);

            this.raiseChanged();
        }
    });

    Bridge.ns("System.Windows.Media.TransformGroup", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.TransformGroup, {
        f1: function (child) {
            return child.getValue$5();
        },
        f2: function (matrix1, matrix2) {
            return System.Windows.Media.Matrix.op_Multiply(matrix1, matrix2);
        }
    });

    Bridge.define("System.Windows.Media.TranslateTransform", {
        inherits: [System.Windows.Media.Transform],
        statics: {
            xProperty: null,
            yProperty: null,
            config: {
                init: function () {
                    this.xProperty = System.Windows.DependencyProperty.register("X", System.Double, System.Windows.Media.TranslateTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.TranslateTransform.setMatrix));
                    this.yProperty = System.Windows.DependencyProperty.register("Y", System.Double, System.Windows.Media.TranslateTransform, new System.Windows.FrameworkPropertyMetadata.$ctor9(0.0, System.Windows.Media.TranslateTransform.setMatrix));
                }
            },
            setMatrix: function (dependencyObject, e) {
                Bridge.cast(dependencyObject, System.Windows.Media.TranslateTransform).setMatrix();
            }
        },
        matrix: null,
        ctor: function () {
            System.Windows.Media.TranslateTransform.$ctor2.call(this, System.Windows.Media.Matrix.identity);
            //
        },
        $ctor1: function (x, y) {
            System.Windows.Media.TranslateTransform.$ctor2.call(this, System.Windows.Media.Matrix.translationMatrix(x, y));
            //
        },
        $ctor2: function (matrix) {
            this.$initialize();
            System.Windows.Media.Transform.ctor.call(this);
            this.matrix = matrix;
        },
        getValue$5: function () {
            return this.matrix;
        },
        getX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.TranslateTransform.xProperty), System.Double));
        },
        setX: function (value) {
            this.setValue(System.Windows.Media.TranslateTransform.xProperty, value);
        },
        getY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.TranslateTransform.yProperty), System.Double));
        },
        setY: function (value) {
            this.setValue(System.Windows.Media.TranslateTransform.yProperty, value);
        },
        setMatrix: function () {
            this.matrix = System.Windows.Media.Matrix.translationMatrix(this.getX(), this.getY());
        }
    });

    Bridge.define("System.Windows.MultiDataTriggerBase", {
        inherits: [System.Windows.DataTriggerBase],
        config: {
            properties: {
                Conditions: null,
                Setters: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.DataTriggerBase.ctor.call(this);
            this.setConditions(new (Granular.Collections.ObservableCollection$1(System.Windows.Condition)).ctor());
            this.setSetters(new (Granular.Collections.ObservableCollection$1(System.Windows.ITriggerAction)).ctor());
        },
        getTriggerActions: function () {
            return this.getSetters();
        }
    });

    Bridge.define("System.Windows.Trigger", {
        inherits: [System.Windows.DataTriggerBase],
        config: {
            properties: {
                Property: null,
                Value$5: null,
                SourceName: null,
                Setters: null
            },
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.DataTriggerBase.ctor.call(this);
            this.setSetters(new (Granular.Collections.ObservableCollection$1(System.Windows.ITriggerAction)).ctor());
        },
        getTriggerActions: function () {
            return this.getSetters();
        },
        createDataTriggerCondition: function (element) {
            if (this.getProperty() == null) {
                throw new Granular.Exception("Trigger.Property cannot be null");
            }

            var dependencyProperty = System.Windows.PropertyPathElementExtensions.getDependencyProperty(this.getProperty(), Bridge.getType(element));

            var resolvedValue = this.getValue$5() == null || Bridge.Reflection.isInstanceOfType(this.getValue$5(), dependencyProperty.getPropertyType()) ? this.getValue$5() : System.Windows.Markup.TypeConverter.convertValue(this.getValue$5().toString(), dependencyProperty.getPropertyType(), System.Windows.Markup.XamlNamespaces.empty, null);

            var source = Granular.Extensions.StringExtensions.isNullOrEmpty(this.getSourceName()) ? element : Bridge.as(System.Windows.NameScope.getTemplateNameScope(element).System$Windows$INameScope$findName(this.getSourceName()), System.Windows.FrameworkElement);

            return System.Windows.TriggerCondition.register(source, dependencyProperty, resolvedValue);
        }
    });

    Bridge.define("System.Windows.Controls.Border", {
        inherits: [System.Windows.Controls.Decorator],
        statics: {
            ctor: function () {
                System.Windows.UIElement.isHitTestVisibleProperty.overrideMetadata(System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Border.f1));
            },
            backgroundProperty: null,
            borderBrushProperty: null,
            borderThicknessProperty: null,
            cornerRadiusProperty: null,
            paddingProperty: null,
            config: {
                init: function () {
                    this.backgroundProperty = System.Windows.Controls.Panel.backgroundProperty.addOwner(System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.Border.f2));
                    this.borderBrushProperty = System.Windows.DependencyProperty.register("BorderBrush", System.Windows.Media.Brush, System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.Border.f3));
                    this.borderThicknessProperty = System.Windows.DependencyProperty.register("BorderThickness", System.Windows.Thickness, System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Thickness.zero, System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure, $asm.$.System.Windows.Controls.Border.f4));
                    this.cornerRadiusProperty = System.Windows.DependencyProperty.register("CornerRadius", System.Windows.CornerRadius, System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.CornerRadius.zero, $asm.$.System.Windows.Controls.Border.f5));
                    this.paddingProperty = System.Windows.DependencyProperty.register("Padding", System.Windows.Thickness, System.Windows.Controls.Border, new System.Windows.FrameworkPropertyMetadata.$ctor2(System.Windows.Thickness.zero, System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                }
            },
            isOverBorder: function (position, borderSize, borderTickness, cornerRadius) {
                return position.getX() < borderTickness.getLeft() || position.getY() < borderTickness.getTop() || borderSize.getWidth() - position.getX() < borderTickness.getRight() || borderSize.getHeight() - position.getY() < borderTickness.getBottom(); // cornerRadius is ignored
            }
        },
        borderRenderElements: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Decorator.ctor.call(this);
            this.borderRenderElements = new (System.Windows.Media.RenderElementDictionary$1(System.Windows.Media.IBorderRenderElement))(Bridge.fn.cacheBind(this, this.createRenderElement$1));
        },
        getBackground: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Border.backgroundProperty), System.Windows.Media.Brush);
        },
        setBackground: function (value) {
            this.setValue(System.Windows.Controls.Border.backgroundProperty, value);
        },
        getBorderBrush: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Border.borderBrushProperty), System.Windows.Media.Brush);
        },
        setBorderBrush: function (value) {
            this.setValue(System.Windows.Controls.Border.borderBrushProperty, value);
        },
        getBorderThickness: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Border.borderThicknessProperty), System.Windows.Thickness);
        },
        setBorderThickness: function (value) {
            this.setValue(System.Windows.Controls.Border.borderThicknessProperty, value);
        },
        getCornerRadius: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Border.cornerRadiusProperty), System.Windows.CornerRadius);
        },
        setCornerRadius: function (value) {
            this.setValue(System.Windows.Controls.Border.cornerRadiusProperty, value);
        },
        getPadding: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Border.paddingProperty), System.Windows.Thickness);
        },
        setPadding: function (value) {
            this.setValue(System.Windows.Controls.Border.paddingProperty, value);
        },
        createRenderElementContentOverride: function (factory) {
            return this.borderRenderElements.getRenderElement(factory);
        },
        measureOverride: function (availableSize) {
            return System.Windows.Size.op_Addition(System.Windows.Size.op_Addition(System.Windows.Controls.Decorator.prototype.measureOverride.call(this, System.Windows.SizeExtensions.max((System.Windows.Size.op_Subtraction(System.Windows.Size.op_Subtraction(availableSize, this.getBorderThickness().getSize()), this.getPadding().getSize())), System.Windows.Size.zero)), this.getBorderThickness().getSize()), this.getPadding().getSize());
        },
        arrangeOverride: function (finalSize) {
            var $t;
            if (this.getChild() != null) {
                this.getChild().arrange(new System.Windows.Rect.$ctor2(System.Windows.Point.op_Addition(this.getBorderThickness().getLocation(), this.getPadding().getLocation()), System.Windows.SizeExtensions.max((System.Windows.Size.op_Subtraction(System.Windows.Size.op_Subtraction(finalSize, this.getBorderThickness().getSize()), this.getPadding().getSize())), System.Windows.Size.zero)));
            }

            $t = Bridge.getEnumerator(this.borderRenderElements.getElements());
            while ($t.moveNext()) {
                var borderRenderElement = $t.getCurrent();
                borderRenderElement.System$Windows$Media$IBorderRenderElement$setBounds(new System.Windows.Rect.$ctor3(finalSize));
            }

            return finalSize;
        },
        hitTestOverride: function (position) {
            return System.Windows.SizeExtensions.contains(this.getVisualSize(), position) && (this.getBackground() != null || this.getBorderBrush() != null && System.Windows.Controls.Border.isOverBorder(position, this.getVisualSize(), this.getBorderThickness(), this.getCornerRadius()));
        },
        createRenderElement$1: function (factory) {
            var borderRenderElement = factory.System$Windows$Media$IRenderElementFactory$createBorderRenderElement(this);

            borderRenderElement.System$Windows$Media$IBorderRenderElement$setBackground(this.getBackground());
            borderRenderElement.System$Windows$Media$IBorderRenderElement$setBorderBrush(this.getBorderBrush());
            borderRenderElement.System$Windows$Media$IBorderRenderElement$setBorderThickness(this.getBorderThickness());
            borderRenderElement.System$Windows$Media$IBorderRenderElement$setBounds(new System.Windows.Rect.$ctor3(this.getVisualSize()));
            borderRenderElement.System$Windows$Media$IBorderRenderElement$setCornerRadius(this.getCornerRadius());
            borderRenderElement.System$Windows$Media$IBorderRenderElement$setIsHitTestVisible(this.getIsHitTestVisible());

            return borderRenderElement;
        }
    });

    Bridge.ns("System.Windows.Controls.Border", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Border, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Border).borderRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$IBorderRenderElement$setIsHitTestVisible(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
            });
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Border).borderRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$IBorderRenderElement$setBackground(Bridge.cast(e.getNewValue(), System.Windows.Media.Brush));
            });
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Border).borderRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$IBorderRenderElement$setBorderBrush(Bridge.cast(e.getNewValue(), System.Windows.Media.Brush));
            });
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Border).borderRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$IBorderRenderElement$setBorderThickness(Bridge.cast(e.getNewValue(), System.Windows.Thickness));
            });
        },
        f5: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Border).borderRenderElements.setRenderElementsProperty(function (renderElement) {
                renderElement.System$Windows$Media$IBorderRenderElement$setCornerRadius(Bridge.cast(e.getNewValue(), System.Windows.CornerRadius));
            });
        }
    });

    Bridge.define("System.Windows.Controls.ContentControl", {
        inherits: [System.Windows.Controls.Control,System.Windows.Controls.IItemContainer],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ContentControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ContentControl)));
            },
            contentProperty: null,
            contentTemplateProperty: null,
            contentTemplateSelectorProperty: null,
            hasContentPropertyKey: null,
            hasContentProperty: null,
            config: {
                init: function () {
                    this.contentProperty = System.Windows.DependencyProperty.register("Content", Object, System.Windows.Controls.ContentControl, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ContentControl.f1));
                    this.contentTemplateProperty = System.Windows.DependencyProperty.register("ContentTemplate", System.Windows.DataTemplate, System.Windows.Controls.ContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.contentTemplateSelectorProperty = System.Windows.DependencyProperty.register("ContentTemplateSelector", System.Windows.Controls.IDataTemplateSelector, System.Windows.Controls.ContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.hasContentPropertyKey = System.Windows.DependencyProperty.registerReadOnly("HasContent", Boolean, System.Windows.Controls.ContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.hasContentProperty = System.Windows.Controls.ContentControl.hasContentPropertyKey.getDependencyProperty();
                }
            }
        },
        itemTemplate: null,
        itemContainerStyle: null,
        config: {
            alias: [
            "prepareContainerForItem", "System$Windows$Controls$IItemContainer$prepareContainerForItem",
            "clearContainerForItem", "System$Windows$Controls$IItemContainer$clearContainerForItem"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Control.ctor.call(this);
            //
        },
        getContent: function () {
            return this.getValue(System.Windows.Controls.ContentControl.contentProperty);
        },
        setContent: function (value) {
            this.setValue(System.Windows.Controls.ContentControl.contentProperty, value);
        },
        getContentTemplate: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ContentControl.contentTemplateProperty), System.Windows.DataTemplate);
        },
        setContentTemplate: function (value) {
            this.setValue(System.Windows.Controls.ContentControl.contentTemplateProperty, value);
        },
        getContentTemplateSelector: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ContentControl.contentTemplateSelectorProperty), System.Windows.Controls.IDataTemplateSelector);
        },
        setContentTemplateSelector: function (value) {
            this.setValue(System.Windows.Controls.ContentControl.contentTemplateSelectorProperty, value);
        },
        getHasContent: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ContentControl.hasContentPropertyKey), Boolean));
        },
        setHasContent: function (value) {
            this.setValue$1(System.Windows.Controls.ContentControl.hasContentPropertyKey, value);
        },
        onContentChanged: function (e) {
            this.setHasContent(this.getContent() != null);
            this.removeLogicalChild(e.getOldValue());
            this.addLogicalChild(e.getNewValue());
        },
        prepareContainerForItem: function (item, itemTemplate, itemContainerStyle) {
            if (!this.containsValue(System.Windows.Controls.ContentControl.contentTemplateProperty) && !this.containsValue(System.Windows.Controls.ContentControl.contentTemplateSelectorProperty) && itemTemplate != null) {
                this.setContentTemplate(itemTemplate);
                this.itemTemplate = itemTemplate;
            }

            if (!this.containsValue(System.Windows.FrameworkElement.styleProperty) && itemContainerStyle != null) {
                this.setStyle(itemContainerStyle);
                this.itemContainerStyle = itemContainerStyle;
            }

            if (!Bridge.referenceEquals(item, this)) {
                this.setContent(item);
            }
        },
        clearContainerForItem: function (item) {
            if (Bridge.referenceEquals(this.itemTemplate, this.getContentTemplate())) {
                this.clearValue(System.Windows.Controls.ContentControl.contentTemplateProperty);
                this.itemTemplate = null;
            }

            if (Bridge.referenceEquals(this.itemContainerStyle, this.getStyle())) {
                this.clearValue(System.Windows.FrameworkElement.styleProperty);
                this.itemContainerStyle = null;
            }

            if (Bridge.referenceEquals(this.getContent(), item)) {
                this.clearValue(System.Windows.Controls.ContentControl.contentProperty);
            }
        }
    });

    Bridge.ns("System.Windows.Controls.ContentControl", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ContentControl, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ContentControl).onContentChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Canvas", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            leftProperty: null,
            topProperty: null,
            rightProperty: null,
            bottomProperty: null,
            config: {
                init: function () {
                    this.leftProperty = System.Windows.DependencyProperty.registerAttached("Left", System.Double, System.Windows.Controls.Canvas, new System.Windows.FrameworkPropertyMetadata.$ctor6(Number.NaN, System.Windows.Controls.Canvas.onPositioningChanged));
                    this.topProperty = System.Windows.DependencyProperty.registerAttached("Top", System.Double, System.Windows.Controls.Canvas, new System.Windows.FrameworkPropertyMetadata.$ctor6(Number.NaN, System.Windows.Controls.Canvas.onPositioningChanged));
                    this.rightProperty = System.Windows.DependencyProperty.registerAttached("Right", System.Double, System.Windows.Controls.Canvas, new System.Windows.FrameworkPropertyMetadata.$ctor6(Number.NaN, System.Windows.Controls.Canvas.onPositioningChanged));
                    this.bottomProperty = System.Windows.DependencyProperty.registerAttached("Bottom", System.Double, System.Windows.Controls.Canvas, new System.Windows.FrameworkPropertyMetadata.$ctor6(Number.NaN, System.Windows.Controls.Canvas.onPositioningChanged));
                }
            },
            getLeft: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Canvas.leftProperty), System.Double));
            },
            setLeft: function (obj, value) {
                obj.setValue(System.Windows.Controls.Canvas.leftProperty, value);
            },
            getTop: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Canvas.topProperty), System.Double));
            },
            setTop: function (obj, value) {
                obj.setValue(System.Windows.Controls.Canvas.topProperty, value);
            },
            getRight: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Canvas.rightProperty), System.Double));
            },
            setRight: function (obj, value) {
                obj.setValue(System.Windows.Controls.Canvas.rightProperty, value);
            },
            getBottom: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Canvas.bottomProperty), System.Double));
            },
            setBottom: function (obj, value) {
                obj.setValue(System.Windows.Controls.Canvas.bottomProperty, value);
            },
            onPositioningChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Media.Visual) && Bridge.is(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.Canvas)) {
                    Bridge.cast(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.Canvas).invalidateArrange();
                }
            }
        },
        measureOverride: function (availableSize) {
            var $t;
            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.measure(System.Windows.Size.infinity);
            }

            return System.Windows.Size.zero;
        },
        arrangeOverride: function (finalSize) {
            var $t;
            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                // Canvas.Left and Canvas.Top have higher priority
                var x = Granular.Extensions.DoubleExtensions.defaultIfNaN(Granular.Extensions.DoubleExtensions.defaultIfNaN(System.Windows.Controls.Canvas.getLeft(child), finalSize.getWidth() - child.getDesiredSize().getWidth() - System.Windows.Controls.Canvas.getRight(child)), 0);
                var y = Granular.Extensions.DoubleExtensions.defaultIfNaN(Granular.Extensions.DoubleExtensions.defaultIfNaN(System.Windows.Controls.Canvas.getTop(child), finalSize.getHeight() - child.getDesiredSize().getHeight() - System.Windows.Controls.Canvas.getBottom(child)), 0);

                child.arrange(new System.Windows.Rect.$ctor2(new System.Windows.Point.$ctor1(x, y), child.getDesiredSize()));
            }

            return finalSize;
        }
    });

    Bridge.define("System.Windows.Controls.DockPanel", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            dockProperty: null,
            lastChildFillProperty: null,
            config: {
                init: function () {
                    this.dockProperty = System.Windows.DependencyProperty.registerAttached("Dock", System.Windows.Controls.Dock, System.Windows.Controls.DockPanel, new System.Windows.FrameworkPropertyMetadata.$ctor11(System.Windows.Controls.DockPanel.onDockChanged));
                    this.lastChildFillProperty = System.Windows.DependencyProperty.register("LastChildFill", Boolean, System.Windows.Controls.DockPanel, new System.Windows.FrameworkPropertyMetadata.$ctor2(true, System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                }
            },
            getDock: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.DockPanel.dockProperty), System.Int32));
            },
            setDock: function (obj, value) {
                obj.setValue(System.Windows.Controls.DockPanel.dockProperty, value);
            },
            getDockOrientation: function (dock) {
                return dock === System.Windows.Controls.Dock.Left || dock === System.Windows.Controls.Dock.Right ? System.Windows.Controls.Orientation.Horizontal : System.Windows.Controls.Orientation.Vertical;
            },
            onDockChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Media.Visual) && Bridge.is(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.DockPanel)) {
                    Bridge.cast(Bridge.cast(dependencyObject, System.Windows.Media.Visual).getVisualParent(), System.Windows.Controls.DockPanel).invalidateArrange();
                }
            }
        },
        getLastChildFill: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.DockPanel.lastChildFillProperty), Boolean));
        },
        setLastChildFill: function (value) {
            this.setValue(System.Windows.Controls.DockPanel.lastChildFillProperty, value);
        },
        measureOverride: function (availableSize) {
            var $t;
            var remainingWidth = availableSize.getWidth();
            var remainingHeight = availableSize.getHeight();

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.measure(System.Windows.SizeExtensions.max(new System.Windows.Size(remainingWidth, remainingHeight), System.Windows.Size.zero));

                if (System.Windows.Controls.DockPanel.getDockOrientation(System.Windows.Controls.DockPanel.getDock(child)) === System.Windows.Controls.Orientation.Horizontal) {
                    remainingWidth -= child.getDesiredSize().getWidth();
                } else {
                    remainingHeight -= child.getDesiredSize().getHeight();
                }
            }

            var childrenWidth = 0;
            var childrenHeight = 0;

            for (var i = (this.getChildren().getCount() - 1) | 0; i >= 0; i = (i - 1) | 0) {
                var child1 = this.getChildren().getItem(i);

                if (System.Windows.Controls.DockPanel.getDockOrientation(System.Windows.Controls.DockPanel.getDock(child1)) === System.Windows.Controls.Orientation.Horizontal) {
                    childrenWidth += child1.getDesiredSize().getWidth();
                    childrenHeight = Math.max(childrenHeight, child1.getDesiredSize().getHeight());
                } else {
                    childrenHeight += child1.getDesiredSize().getHeight();
                    childrenWidth = Math.max(childrenWidth, child1.getDesiredSize().getWidth());
                }
            }

            return new System.Windows.Size(childrenWidth, childrenHeight);
        },
        arrangeOverride: function (finalSize) {
            var remainingWidth = finalSize.getWidth();
            var remainingHeight = finalSize.getHeight();

            var left = 0;
            var top = 0;

            for (var i = 0; i < this.getChildren().getCount(); i = (i + 1) | 0) {
                var child = this.getChildren().getItem(i);
                var childDock = System.Windows.Controls.DockPanel.getDock(child);
                var childDockOrientation = System.Windows.Controls.DockPanel.getDockOrientation(childDock);

                var childFill = this.getLastChildFill() && i === ((this.getChildren().getCount() - 1) | 0);

                var cellWidth = childDockOrientation === System.Windows.Controls.Orientation.Vertical || childFill ? remainingWidth : child.getDesiredSize().getWidth();
                var cellHeight = childDockOrientation === System.Windows.Controls.Orientation.Horizontal || childFill ? remainingHeight : child.getDesiredSize().getHeight();

                var cellLeft = childDock === System.Windows.Controls.Dock.Right ? remainingWidth - cellWidth : 0;
                var cellTop = childDock === System.Windows.Controls.Dock.Bottom ? remainingHeight - cellHeight : 0;

                child.arrange(new System.Windows.Rect.$ctor1(left + cellLeft, top + cellTop, Granular.Extensions.DoubleExtensions.max(cellWidth, 0), Granular.Extensions.DoubleExtensions.max(cellHeight, 0)));

                if (childDockOrientation === System.Windows.Controls.Orientation.Horizontal) {
                    remainingWidth -= cellWidth;

                    if (childDock === System.Windows.Controls.Dock.Left) {
                        left += cellWidth;
                    }
                } else {
                    remainingHeight -= cellHeight;

                    if (childDock === System.Windows.Controls.Dock.Top) {
                        top += cellHeight;
                    }
                }
            }

            return finalSize;
        }
    });

    Bridge.define("System.Windows.Controls.Grid", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            rowProperty: null,
            columnProperty: null,
            rowSpanProperty: null,
            columnSpanProperty: null,
            config: {
                init: function () {
                    this.rowProperty = System.Windows.DependencyProperty.registerAttached("Row", System.Int32, System.Windows.Controls.Grid, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.columnProperty = System.Windows.DependencyProperty.registerAttached("Column", System.Int32, System.Windows.Controls.Grid, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.rowSpanProperty = System.Windows.DependencyProperty.registerAttached("RowSpan", System.Int32, System.Windows.Controls.Grid, new System.Windows.FrameworkPropertyMetadata.$ctor1(1));
                    this.columnSpanProperty = System.Windows.DependencyProperty.registerAttached("ColumnSpan", System.Int32, System.Windows.Controls.Grid, new System.Windows.FrameworkPropertyMetadata.$ctor1(1));
                }
            },
            getRow: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Grid.rowProperty), System.Int32));
            },
            setRow: function (obj, value) {
                obj.setValue(System.Windows.Controls.Grid.rowProperty, value);
            },
            getColumn: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Grid.columnProperty), System.Int32));
            },
            setColumn: function (obj, value) {
                obj.setValue(System.Windows.Controls.Grid.columnProperty, value);
            },
            getRowSpan: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Grid.rowSpanProperty), System.Int32));
            },
            setRowSpan: function (obj, value) {
                obj.setValue(System.Windows.Controls.Grid.rowSpanProperty, value);
            },
            getColumnSpan: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Grid.columnSpanProperty), System.Int32));
            },
            setColumnSpan: function (obj, value) {
                obj.setValue(System.Windows.Controls.Grid.columnSpanProperty, value);
            },
            getChildPosition: function (child, rowsCount, columnsCount, row, column, rowSpan, columnSpan) {
                row.v = Granular.Extensions.IntExtensions.bounds(System.Windows.Controls.Grid.getRow(child), 0, ((rowsCount - 1) | 0));
                column.v = Granular.Extensions.IntExtensions.bounds(System.Windows.Controls.Grid.getColumn(child), 0, ((columnsCount - 1) | 0));
                rowSpan.v = Granular.Extensions.IntExtensions.bounds(System.Windows.Controls.Grid.getRowSpan(child), 1, ((rowsCount - row.v) | 0));
                columnSpan.v = Granular.Extensions.IntExtensions.bounds(System.Windows.Controls.Grid.getColumnSpan(child), 1, ((columnsCount - column.v) | 0));
            },
            getMeasureLength: function (definitionBases, availableLength, start, span) {
                var remainingLength = availableLength;
                var absoluteLength = 0;
                var allAbsolute = true;

                for (var i = 0; i < definitionBases.length; i = (i + 1) | 0) {
                    if (i >= start && i < start + span) {
                        if (definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getIsAbsolute()) {
                            absoluteLength += definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getValue();
                        } else {
                            allAbsolute = false;
                        }
                    } else if (definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getIsAbsolute()) {
                        remainingLength -= definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getValue();
                    }
                }

                return allAbsolute ? absoluteLength : Math.max(0, remainingLength);
            },
            setBoundedValues: function (definitionBases, lengths) {
                for (var i = 0; i < lengths.v.length; i = (i + 1) | 0) {
                    lengths.v[i] = Granular.Extensions.DoubleExtensions.bounds(lengths.v[i], definitionBases[i].System$Windows$Controls$IDefinitionBase$getMinLength(), definitionBases[i].System$Windows$Controls$IDefinitionBase$getMaxLength());
                }
            },
            setStarLengths: function (definitionBases, starLength, lengths) {
                for (var i = 0; i < definitionBases.length; i = (i + 1) | 0) {
                    if (definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getIsStar()) {
                        lengths.v[i] = definitionBases[i].System$Windows$Controls$IDefinitionBase$getLength().getValue() * starLength;
                    }
                }
            },
            setActualLength: function (definitionBases, actualLengths) {
                for (var i = 0; i < definitionBases.length; i = (i + 1) | 0) {
                    definitionBases[i].System$Windows$Controls$IDefinitionBase$setActualLength(actualLengths[i]);
                }
            },
            getStarLength: function (definitionBases, totalStarsLength) {
                // each axis starred length is a bounded function:
                // axis.GetStarredLength(starLength) => (axis.Length.Value * starLength).Bounds(axis.MinLength, axis.MaxLength)

                // find a starLength where:
                // definitionBases.Sum(axis => axis.GetStarredLength(starLength)) == totalStarsLength

                var starredAxis = Granular.Compatibility.Linq.Enumerable.where(System.Windows.Controls.IDefinitionBase, definitionBases, $asm.$.System.Windows.Controls.Grid.f1);

                if (Granular.Compatibility.Linq.Enumerable.count(System.Windows.Controls.IDefinitionBase, starredAxis) === 0 || totalStarsLength <= 0) {
                    return 0;
                }

                if (Granular.Compatibility.Linq.Enumerable.count(System.Windows.Controls.IDefinitionBase, starredAxis) === 1) {
                    return totalStarsLength;
                }

                var bounds = Granular.Compatibility.Linq.Enumerable.toArray(System.Double, Granular.Compatibility.Linq.Enumerable.union(System.Double, Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, starredAxis, $asm.$.System.Windows.Controls.Grid.f2), Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, starredAxis, $asm.$.System.Windows.Controls.Grid.f3)));

                var smallerBound = Granular.Compatibility.Linq.Enumerable.max$1(Granular.Compatibility.Linq.Enumerable.defaultIfEmpty$1(System.Double, Granular.Compatibility.Linq.Enumerable.where(System.Double, bounds, function (vertex) {
                    return Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                        return System.Windows.Controls.Grid.getStarredAxisLength(axis, vertex);
                    }) <= totalStarsLength;
                }), Number.NaN));
                var largerBound = Granular.Compatibility.Linq.Enumerable.min$1(Granular.Compatibility.Linq.Enumerable.defaultIfEmpty$1(System.Double, Granular.Compatibility.Linq.Enumerable.where(System.Double, bounds, function (vertex) {
                    return Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                        return System.Windows.Controls.Grid.getStarredAxisLength(axis, vertex);
                    }) >= totalStarsLength;
                }), Number.NaN));

                if (!isNaN(smallerBound) && !isNaN(largerBound)) {
                    if (smallerBound === largerBound) {
                        return smallerBound;
                    }

                    if (Granular.Compatibility.Double.isInfinity(largerBound)) {
                        var totalSmallerStarsLength = Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, Granular.Compatibility.Linq.Enumerable.where(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                            return axis.System$Windows$Controls$IDefinitionBase$getMaxLength() <= axis.System$Windows$Controls$IDefinitionBase$getLength().getValue() * smallerBound;
                        }), function (axis) {
                            return System.Windows.Controls.Grid.getStarredAxisLength(axis, smallerBound);
                        });
                        var totalLargerStars = Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, Granular.Compatibility.Linq.Enumerable.where(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                            return axis.System$Windows$Controls$IDefinitionBase$getMaxLength() > axis.System$Windows$Controls$IDefinitionBase$getLength().getValue() * smallerBound;
                        }), $asm.$.System.Windows.Controls.Grid.f4);

                        return (totalStarsLength - totalSmallerStarsLength) / totalLargerStars;
                    }

                    var smallerBoundTotalLength = Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                        return System.Windows.Controls.Grid.getStarredAxisLength(axis, smallerBound);
                    });
                    var largerBoundTotalLength = Granular.Compatibility.Linq.Enumerable.sum$1(System.Windows.Controls.IDefinitionBase, starredAxis, function (axis) {
                        return System.Windows.Controls.Grid.getStarredAxisLength(axis, largerBound);
                    });

                    return smallerBound + (largerBound - smallerBound) * (totalStarsLength - smallerBoundTotalLength) / (largerBoundTotalLength - smallerBoundTotalLength);
                }

                return Granular.Extensions.DoubleExtensions.defaultIfNaN(Granular.Extensions.DoubleExtensions.defaultIfNaN(smallerBound, largerBound), 0);
            },
            getStarredAxisLength: function (starredAxis, starLength) {
                return Granular.Extensions.DoubleExtensions.bounds((starredAxis.System$Windows$Controls$IDefinitionBase$getLength().getValue() * starLength), starredAxis.System$Windows$Controls$IDefinitionBase$getMinLength(), starredAxis.System$Windows$Controls$IDefinitionBase$getMaxLength());
            }
        },
        defaultRowDefinitions: null,
        defaultColumnDefinitions: null,
        config: {
            properties: {
                RowDefinitions: null,
                ColumnDefinitions: null
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Panel.ctor.call(this);
            this.setRowDefinitions(new (System.Windows.FreezableCollection$1(System.Windows.Controls.RowDefinition)).ctor());
            this.getRowDefinitions().trySetContextParent(this);

            this.setColumnDefinitions(new (System.Windows.FreezableCollection$1(System.Windows.Controls.ColumnDefinition)).ctor());
            this.getColumnDefinitions().trySetContextParent(this);

            this.defaultRowDefinitions = System.Array.init([new System.Windows.Controls.RowDefinition()], System.Windows.Controls.RowDefinition);
            this.defaultColumnDefinitions = System.Array.init([new System.Windows.Controls.ColumnDefinition()], System.Windows.Controls.ColumnDefinition);
        },
        measureOverride: function (availableSize) {
            var $t;
            var currentRowDefinitions = this.getRowDefinitions().getCount() === 0 ? this.defaultRowDefinitions : Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.Controls.RowDefinition, this.getRowDefinitions());
            var currentColumnDefinitions = this.getColumnDefinitions().getCount() === 0 ? this.defaultColumnDefinitions : Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.Controls.ColumnDefinition, this.getColumnDefinitions());

            if (currentRowDefinitions.length === 1 && currentColumnDefinitions.length === 1) {
                // optimization
                return this.measureSingleCell(availableSize, currentColumnDefinitions[0].System$Windows$Controls$IDefinitionBase$getLength(), currentRowDefinitions[0].System$Windows$Controls$IDefinitionBase$getLength());
            }

            var rowsLength = { v : Granular.Compatibility.Linq.Enumerable.toArray(System.Double, Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, currentRowDefinitions, $asm.$.System.Windows.Controls.Grid.f5)) };
            var columnsLength = { v : Granular.Compatibility.Linq.Enumerable.toArray(System.Double, Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, currentColumnDefinitions, $asm.$.System.Windows.Controls.Grid.f5)) };

            var row = { };
            var column = { };
            var rowSpan = { };
            var columnSpan = { };

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                System.Windows.Controls.Grid.getChildPosition(child, currentRowDefinitions.length, currentColumnDefinitions.length, row, column, rowSpan, columnSpan);

                child.measure(new System.Windows.Size(System.Windows.Controls.Grid.getMeasureLength(currentColumnDefinitions, availableSize.getWidth(), column.v, columnSpan.v), System.Windows.Controls.Grid.getMeasureLength(currentRowDefinitions, availableSize.getHeight(), row.v, rowSpan.v)));

                if (rowSpan.v === 1 && (currentRowDefinitions[row.v].System$Windows$Controls$IDefinitionBase$getLength().getIsAuto() || currentRowDefinitions[row.v].System$Windows$Controls$IDefinitionBase$getLength().getIsStar())) {
                    rowsLength.v[row.v] = Math.max(rowsLength.v[row.v], child.getDesiredSize().getHeight());
                }

                if (columnSpan.v === 1 && (currentColumnDefinitions[column.v].System$Windows$Controls$IDefinitionBase$getLength().getIsAuto() || currentColumnDefinitions[column.v].System$Windows$Controls$IDefinitionBase$getLength().getIsStar())) {
                    columnsLength.v[column.v] = Math.max(columnsLength.v[column.v], child.getDesiredSize().getWidth());
                }
            }

            System.Windows.Controls.Grid.setBoundedValues(currentRowDefinitions, rowsLength);
            System.Windows.Controls.Grid.setBoundedValues(currentColumnDefinitions, columnsLength);

            return new System.Windows.Size(Granular.Compatibility.Linq.Enumerable.sum(columnsLength.v), Granular.Compatibility.Linq.Enumerable.sum(rowsLength.v));
        },
        arrangeOverride: function (finalSize) {
            var $t, $t1;
            var currentRowDefinitions = this.getRowDefinitions().getCount() === 0 ? this.defaultRowDefinitions : Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.Controls.RowDefinition, this.getRowDefinitions());
            var currentColumnDefinitions = this.getColumnDefinitions().getCount() === 0 ? this.defaultColumnDefinitions : Granular.Compatibility.Linq.Enumerable.toArray(System.Windows.Controls.ColumnDefinition, this.getColumnDefinitions());

            if (currentRowDefinitions.length === 1 && currentColumnDefinitions.length === 1) {
                // optimization
                return this.arrangeSingleCell(finalSize, currentColumnDefinitions[0], currentRowDefinitions[0]);
            }

            var rowsLength = { v : Granular.Compatibility.Linq.Enumerable.toArray(System.Double, Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, currentRowDefinitions, $asm.$.System.Windows.Controls.Grid.f5)) };
            var columnsLength = { v : Granular.Compatibility.Linq.Enumerable.toArray(System.Double, Granular.Compatibility.Linq.Enumerable.select(System.Windows.Controls.IDefinitionBase, System.Double, currentColumnDefinitions, $asm.$.System.Windows.Controls.Grid.f5)) };

            var row = { };
            var column = { };
            var rowSpan = { };
            var columnSpan = { };

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                System.Windows.Controls.Grid.getChildPosition(child, currentRowDefinitions.length, currentColumnDefinitions.length, row, column, rowSpan, columnSpan);

                if (rowSpan.v === 1 && currentRowDefinitions[row.v].System$Windows$Controls$IDefinitionBase$getLength().getIsAuto()) {
                    rowsLength.v[row.v] = Math.max(rowsLength.v[row.v], child.getDesiredSize().getHeight());
                }

                if (columnSpan.v === 1 && currentColumnDefinitions[column.v].System$Windows$Controls$IDefinitionBase$getLength().getIsAuto()) {
                    columnsLength.v[column.v] = Math.max(columnsLength.v[column.v], child.getDesiredSize().getWidth());
                }
            }

            var rowStarLength = System.Windows.Controls.Grid.getStarLength(currentRowDefinitions, finalSize.getHeight() - Granular.Compatibility.Linq.Enumerable.sum(rowsLength.v));
            var columnStarLength = System.Windows.Controls.Grid.getStarLength(currentColumnDefinitions, finalSize.getWidth() - Granular.Compatibility.Linq.Enumerable.sum(columnsLength.v));

            System.Windows.Controls.Grid.setStarLengths(currentRowDefinitions, rowStarLength, rowsLength);
            System.Windows.Controls.Grid.setStarLengths(currentColumnDefinitions, columnStarLength, columnsLength);

            System.Windows.Controls.Grid.setBoundedValues(currentRowDefinitions, rowsLength);
            System.Windows.Controls.Grid.setBoundedValues(currentColumnDefinitions, columnsLength);

            System.Windows.Controls.Grid.setActualLength(currentRowDefinitions, rowsLength.v);
            System.Windows.Controls.Grid.setActualLength(currentColumnDefinitions, columnsLength.v);

            $t1 = Bridge.getEnumerator(this.getChildren());
            while ($t1.moveNext()) {
                var child1 = Bridge.cast($t1.getCurrent(), System.Windows.FrameworkElement);
                System.Windows.Controls.Grid.getChildPosition(child1, currentRowDefinitions.length, currentColumnDefinitions.length, row, column, rowSpan, columnSpan);

                child1.arrange(new System.Windows.Rect.$ctor1(Granular.Compatibility.Linq.Enumerable.sum(Granular.Compatibility.Linq.Enumerable.take(System.Double, columnsLength.v, column.v)), Granular.Compatibility.Linq.Enumerable.sum(Granular.Compatibility.Linq.Enumerable.take(System.Double, rowsLength.v, row.v)), Granular.Compatibility.Linq.Enumerable.sum(Granular.Compatibility.Linq.Enumerable.take(System.Double, Granular.Compatibility.Linq.Enumerable.skip(System.Double, columnsLength.v, column.v), columnSpan.v)), Granular.Compatibility.Linq.Enumerable.sum(Granular.Compatibility.Linq.Enumerable.take(System.Double, Granular.Compatibility.Linq.Enumerable.skip(System.Double, rowsLength.v, row.v), rowSpan.v))));
            }

            return finalSize;
        },
        measureSingleCell: function (availableSize, width, height) {
            var $t;
            var desiredSize = System.Windows.Size.zero;
            availableSize = new System.Windows.Size(width.getIsAbsolute() ? width.getValue() : availableSize.getWidth(), height.getIsAbsolute() ? height.getValue() : availableSize.getHeight());

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                child.measure(availableSize);
                desiredSize = System.Windows.SizeExtensions.max(desiredSize, child.getDesiredSize());
            }

            return desiredSize;
        },
        arrangeSingleCell: function (finalSize, columnDefinition, rowDefinition) {
            var $t;
            var finalWidth = rowDefinition.System$Windows$Controls$IDefinitionBase$getLength().getIsAbsolute() ? rowDefinition.System$Windows$Controls$IDefinitionBase$getLength().getValue() : finalSize.getWidth();
            var finalHeight = columnDefinition.System$Windows$Controls$IDefinitionBase$getLength().getIsAbsolute() ? columnDefinition.System$Windows$Controls$IDefinitionBase$getLength().getValue() : finalSize.getHeight();

            var finalRect = new System.Windows.Rect.ctor(finalWidth, finalHeight);

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                child.arrange(finalRect);
            }

            columnDefinition.System$Windows$Controls$IDefinitionBase$setActualLength(finalWidth);
            rowDefinition.System$Windows$Controls$IDefinitionBase$setActualLength(finalHeight);

            return finalSize;
        }
    });

    Bridge.ns("System.Windows.Controls.Grid", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Grid, {
        f1: function (axis) {
            return axis.System$Windows$Controls$IDefinitionBase$getLength().getIsStar();
        },
        f2: function (axis) {
            return axis.System$Windows$Controls$IDefinitionBase$getMinLength() / axis.System$Windows$Controls$IDefinitionBase$getLength().getValue();
        },
        f3: function (axis) {
            return axis.System$Windows$Controls$IDefinitionBase$getMaxLength() / axis.System$Windows$Controls$IDefinitionBase$getLength().getValue();
        },
        f4: function (axis) {
            return axis.System$Windows$Controls$IDefinitionBase$getLength().getValue();
        },
        f5: function (definitionBase) {
            return definitionBase.System$Windows$Controls$IDefinitionBase$getLength().getIsAbsolute() ? definitionBase.System$Windows$Controls$IDefinitionBase$getLength().getValue() : 0;
        }
    });

    Bridge.define("System.Windows.Controls.ItemsControl", {
        inherits: [System.Windows.Controls.Control,System.Windows.Controls.Primitives.IGeneratorHost],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ItemsControl)));
            },
            itemsSourceProperty: null,
            itemContainerStyleProperty: null,
            itemContainerStyleSelectorProperty: null,
            itemsPanelProperty: null,
            itemTemplateProperty: null,
            itemTemplateSelectorProperty: null,
            itemContainerGeneratorPropertyKey: null,
            itemContainerGeneratorProperty: null,
            config: {
                init: function () {
                    this.itemsSourceProperty = System.Windows.DependencyProperty.register("ItemsSource", System.Collections.IEnumerable, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.ItemsControl.f1));
                    this.itemContainerStyleProperty = System.Windows.DependencyProperty.register("ItemContainerStyle", System.Windows.Style, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.itemContainerStyleSelectorProperty = System.Windows.DependencyProperty.register("ItemContainerStyleSelector", System.Windows.Controls.IStyleSelector, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.itemsPanelProperty = System.Windows.DependencyProperty.register("ItemsPanel", System.Windows.IFrameworkTemplate, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.Controls.ItemsControl.DefaultItemsPanelTemplate()));
                    this.itemTemplateProperty = System.Windows.DependencyProperty.register("ItemTemplate", System.Windows.DataTemplate, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.itemTemplateSelectorProperty = System.Windows.DependencyProperty.register("ItemTemplateSelector", System.Windows.Controls.IDataTemplateSelector, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.itemContainerGeneratorPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ItemContainerGenerator", System.Windows.Controls.Primitives.IItemContainerGenerator, System.Windows.Controls.ItemsControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.itemContainerGeneratorProperty = System.Windows.Controls.ItemsControl.itemContainerGeneratorPropertyKey.getDependencyProperty();
                }
            }
        },
        config: {
            properties: {
                Items: null
            },
            alias: [
            "getContainerForItem", "System$Windows$Controls$Primitives$IGeneratorHost$getContainerForItem",
            "prepareContainerForItem", "System$Windows$Controls$Primitives$IGeneratorHost$prepareContainerForItem",
            "clearContainerForItem", "System$Windows$Controls$Primitives$IGeneratorHost$clearContainerForItem"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Control.ctor.call(this);
            this.setItems(new System.Windows.Controls.ItemCollection());
            this.setItemContainerGenerator(new System.Windows.Controls.ItemContainerGenerator(this));
        },
        getItemsSource: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemsSourceProperty), System.Collections.IEnumerable);
        },
        setItemsSource: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemsSourceProperty, value);
        },
        getItemContainerStyle: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemContainerStyleProperty), System.Windows.Style);
        },
        setItemContainerStyle: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemContainerStyleProperty, value);
        },
        getItemContainerStyleSelector: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemContainerStyleSelectorProperty), System.Windows.Controls.IStyleSelector);
        },
        setItemContainerStyleSelector: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemContainerStyleSelectorProperty, value);
        },
        getItemsPanel: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemsPanelProperty), System.Windows.IFrameworkTemplate);
        },
        setItemsPanel: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemsPanelProperty, value);
        },
        getItemTemplate: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemTemplateProperty), System.Windows.DataTemplate);
        },
        setItemTemplate: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemTemplateProperty, value);
        },
        getItemTemplateSelector: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.ItemsControl.itemTemplateSelectorProperty), System.Windows.Controls.IDataTemplateSelector);
        },
        setItemTemplateSelector: function (value) {
            this.setValue(System.Windows.Controls.ItemsControl.itemTemplateSelectorProperty, value);
        },
        System$Windows$Controls$Primitives$IGeneratorHost$getView: function () {
            return this.getItems();
        },
        getItemContainerGenerator: function () {
            return Bridge.cast(this.getValue$1(System.Windows.Controls.ItemsControl.itemContainerGeneratorPropertyKey), System.Windows.Controls.Primitives.IItemContainerGenerator);
        },
        setItemContainerGenerator: function (value) {
            this.setValue$1(System.Windows.Controls.ItemsControl.itemContainerGeneratorPropertyKey, value);
        },
        isItemItsOwnContainer: function (item) {
            return this.isItemItsOwnContainerOverride(item);
        },
        isItemItsOwnContainerOverride: function (item) {
            return Bridge.is(item, System.Windows.FrameworkElement);
        },
        getContainerForItem: function (item) {
            if (this.isItemItsOwnContainer(item)) {
                return Bridge.as(item, System.Windows.FrameworkElement);
            }

            return this.getContainerForItemOverride();
        },
        getContainerForItemOverride: function () {
            return new System.Windows.Controls.ContentPresenter();
        },
        prepareContainerForItem: function (item, container) {
            this.prepareContainerForItemOverride(item, container);

            this.onPrepareContainerForItem(item, container);
        },
        prepareContainerForItemOverride: function (item, container) {
            if (Bridge.is(container, System.Windows.Controls.IItemContainer)) {
                var itemTemplate = this.getItemTemplate() || (this.getItemTemplateSelector() != null ? this.getItemTemplateSelector().System$Windows$Controls$IDataTemplateSelector$selectTemplate(item, container) : null);
                var itemContainerStyle = this.getItemContainerStyle() || (this.getItemContainerStyleSelector() != null ? this.getItemContainerStyleSelector().System$Windows$Controls$IStyleSelector$selectStyle(item, container) : null);

                Bridge.cast(container, System.Windows.Controls.IItemContainer).System$Windows$Controls$IItemContainer$prepareContainerForItem(item, itemTemplate, itemContainerStyle);
            }
        },
        onPrepareContainerForItem: function (item, container) {
            //
        },
        clearContainerForItem: function (item, container) {
            this.clearContainerForItemOverride(item, container);

            this.onClearContainerForItem(item, container);
        },
        clearContainerForItemOverride: function (item, container) {
            if (Bridge.is(container, System.Windows.Controls.IItemContainer)) {
                Bridge.cast(container, System.Windows.Controls.IItemContainer).System$Windows$Controls$IItemContainer$clearContainerForItem(item);
            }
        },
        onClearContainerForItem: function (item, container) {
            //
        },
        onItemsSourceChanged: function (e) {
            if (this.getItemsSource() == null && !this.getValueSource(System.Windows.Controls.ItemsControl.itemsSourceProperty).getIsExpression()) {
                this.getItems().clearItemsSource();
            } else {
                this.getItems().setItemsSource(this.getItemsSource());
            }
        }
    });

    Bridge.ns("System.Windows.Controls.ItemsControl", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ItemsControl, {
        f1: function (dependencyObject, e) {
            (Bridge.as(dependencyObject, System.Windows.Controls.ItemsControl)).onItemsSourceChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.PasswordBox", {
        inherits: [System.Windows.Controls.Control],
        statics: {
            ctor: function () {
                System.Windows.UIElement.isEnabledProperty.overrideMetadata(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState, $asm.$.System.Windows.Controls.PasswordBox.f1));
                System.Windows.UIElement.isMouseOverProperty.overrideMetadata(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isFocusedProperty.overrideMetadata(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.FrameworkElement.cursorProperty.overrideMetadata(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.Cursors.getIBeam()));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.PasswordBox)));
            },
            passwordChangedEvent: null,
            maxLengthProperty: null,
            config: {
                init: function () {
                    this.passwordChangedEvent = System.Windows.EventManager.registerRoutedEvent("PasswordChanged", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.PasswordBox);
                    this.maxLengthProperty = System.Windows.Controls.TextBox.maxLengthProperty.addOwner(System.Windows.Controls.PasswordBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.PasswordBox.f2));
                }
            }
        },
        password: null,
        textBoxView: null,
        contentHost: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Control.ctor.call(this);
            this.textBoxView = Bridge.merge(new System.Windows.Controls.TextBoxView(), {
                setIsPassword: true
            } );
            this.textBoxView.addTextChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.PasswordBox.f3));
        },
        addPasswordChanged: function (value) {
            this.addHandler(System.Windows.Controls.PasswordBox.passwordChangedEvent, value);
        },
        removePasswordChanged: function (value) {
            this.removeHandler(System.Windows.Controls.PasswordBox.passwordChangedEvent, value);
        },
        getMaxLength: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.PasswordBox.maxLengthProperty), System.Int32));
        },
        setMaxLength: function (value) {
            this.setValue(System.Windows.Controls.PasswordBox.maxLengthProperty, value);
        },
        getPassword: function () {
            return this.password;
        },
        setPassword: function (value) {
            if (Bridge.referenceEquals(this.password, value)) {
                return;
            }

            this.password = value;
            this.textBoxView.setText(this.password);
            this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.PasswordBox.passwordChangedEvent, this));
        },
        onApplyTemplate: function () {
            System.Windows.Controls.Control.prototype.onApplyTemplate.call(this);

            if (this.getTemplate$1() == null) {
                this.contentHost = null;
            } else {
                this.contentHost = Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_ContentHost", this), System.Windows.Controls.Decorator);
                this.contentHost.setChild(this.textBoxView);
            }
        },
        selectAll: function () {
            this.textBoxView.setSelectionStart(0);
            this.textBoxView.setSelectionLength(this.getPassword().length);
        },
        onGotFocus: function (e) {
            this.textBoxView.focusRenderElement();
        },
        onLostFocus: function (e) {
            this.textBoxView.clearFocusRenderElement();
        },
        onMouseDown: function (e) {
            this.focus();
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getFocusState: function () {
            return this.getIsFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        }
    });

    Bridge.ns("System.Windows.Controls.PasswordBox", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.PasswordBox, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.PasswordBox).textBoxView.setIsReadOnly(!Bridge.cast(sender, System.Windows.Controls.PasswordBox).getIsEnabled());
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.PasswordBox).textBoxView.setMaxLength(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f3: function (sender, e) {
            this.setPassword(this.textBoxView.getText());
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.RangeBase", {
        inherits: [System.Windows.Controls.Control],
        statics: {
            valueChangedEvent: null,
            valueProperty: null,
            minimumProperty: null,
            maximumProperty: null,
            smallChangeProperty: null,
            largeChangeProperty: null,
            config: {
                init: function () {
                    this.valueChangedEvent = System.Windows.EventManager.registerRoutedEvent("ValueChanged", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.RangeBase);
                    this.valueProperty = System.Windows.DependencyProperty.register("Value", System.Double, System.Windows.Controls.Primitives.RangeBase, new System.Windows.FrameworkPropertyMetadata.$ctor10(System.Windows.FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, $asm.$.System.Windows.Controls.Primitives.RangeBase.f1, System.Windows.Controls.Primitives.RangeBase.coerceValueRange));
                    this.minimumProperty = System.Windows.DependencyProperty.register("Minimum", System.Double, System.Windows.Controls.Primitives.RangeBase, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.RangeBase.f2));
                    this.maximumProperty = System.Windows.DependencyProperty.register("Maximum", System.Double, System.Windows.Controls.Primitives.RangeBase, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.RangeBase.f3));
                    this.smallChangeProperty = System.Windows.DependencyProperty.register("SmallChange", System.Double, System.Windows.Controls.Primitives.RangeBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.largeChangeProperty = System.Windows.DependencyProperty.register("LargeChange", System.Double, System.Windows.Controls.Primitives.RangeBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            coerceValueRange: function (dependencyObject, value) {
                return Granular.Extensions.DoubleExtensions.bounds(System.Nullable.getValue(Bridge.cast(value, System.Double)), Bridge.cast(dependencyObject, System.Windows.Controls.Primitives.RangeBase).getMinimum(), Bridge.cast(dependencyObject, System.Windows.Controls.Primitives.RangeBase).getMaximum());
            }
        },
        addValueChanged: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.RangeBase.valueChangedEvent, value);
        },
        removeValueChanged: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.RangeBase.valueChangedEvent, value);
        },
        getValue$5: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RangeBase.valueProperty), System.Double));
        },
        setValue$5: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RangeBase.valueProperty, value);
        },
        getMinimum: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RangeBase.minimumProperty), System.Double));
        },
        setMinimum: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RangeBase.minimumProperty, value);
        },
        getMaximum: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RangeBase.maximumProperty), System.Double));
        },
        setMaximum: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RangeBase.maximumProperty, value);
        },
        getSmallChange: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RangeBase.smallChangeProperty), System.Double));
        },
        setSmallChange: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RangeBase.smallChangeProperty, value);
        },
        getLargeChange: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RangeBase.largeChangeProperty), System.Double));
        },
        setLargeChange: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RangeBase.largeChangeProperty, value);
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        onValueChanged: function (e) {
            this.raiseEvent(new (System.Windows.RoutedPropertyChangedEventArgs$1(System.Double))(System.Windows.Controls.Primitives.RangeBase.valueChangedEvent, this, System.Nullable.getValue(Bridge.cast(e.getOldValue(), System.Double)), System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Double))));
        },
        onMinimumChanged: function (e) {
            this.coerceValue(System.Windows.Controls.Primitives.RangeBase.valueProperty); // CoerceValueRange may return a different value
        },
        onMaximumChanged: function (e) {
            this.coerceValue(System.Windows.Controls.Primitives.RangeBase.valueProperty); // CoerceValueRange may return a different value
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getFocusState: function () {
            return this.getIsKeyboardFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.RangeBase", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.RangeBase, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.RangeBase).onValueChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.RangeBase).onMinimumChanged(e);
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.RangeBase).onMaximumChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.TextBoxBase", {
        inherits: [System.Windows.Controls.Control],
        statics: {
            ctor: function () {
                System.Windows.UIElement.isEnabledProperty.overrideMetadata(System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isMouseOverProperty.overrideMetadata(System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isFocusedProperty.overrideMetadata(System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
            },
            selectionChangedEvent: null,
            textChangedEvent: null,
            acceptsReturnProperty: null,
            acceptsTabProperty: null,
            isReadOnlyProperty: null,
            config: {
                init: function () {
                    this.selectionChangedEvent = System.Windows.EventManager.registerRoutedEvent("SelectionChanged", System.Windows.RoutingStrategy.Direct, Function, System.Windows.Controls.Primitives.TextBoxBase);
                    this.textChangedEvent = System.Windows.EventManager.registerRoutedEvent("TextChanged", System.Windows.RoutingStrategy.Direct, Function, System.Windows.Controls.Primitives.TextBoxBase);
                    this.acceptsReturnProperty = System.Windows.DependencyProperty.register("AcceptsReturn", Boolean, System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.acceptsTabProperty = System.Windows.DependencyProperty.register("AcceptsTab", Boolean, System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isReadOnlyProperty = System.Windows.DependencyProperty.register("IsReadOnly", Boolean, System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        config: {
            properties: {
                ContentHost: null
            }
        },
        addSelectionChanged: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.TextBoxBase.selectionChangedEvent, value);
        },
        removeSelectionChanged: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.TextBoxBase.selectionChangedEvent, value);
        },
        addTextChanged: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.TextBoxBase.textChangedEvent, value);
        },
        removeTextChanged: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.TextBoxBase.textChangedEvent, value);
        },
        getAcceptsReturn: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.TextBoxBase.acceptsReturnProperty), Boolean));
        },
        setAcceptsReturn: function (value) {
            this.setValue(System.Windows.Controls.Primitives.TextBoxBase.acceptsReturnProperty, value);
        },
        getAcceptsTab: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.TextBoxBase.acceptsTabProperty), Boolean));
        },
        setAcceptsTab: function (value) {
            this.setValue(System.Windows.Controls.Primitives.TextBoxBase.acceptsTabProperty, value);
        },
        getIsReadOnly: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.TextBoxBase.isReadOnlyProperty), Boolean));
        },
        setIsReadOnly: function (value) {
            this.setValue(System.Windows.Controls.Primitives.TextBoxBase.isReadOnlyProperty, value);
        },
        onApplyTemplate: function () {
            System.Windows.Controls.Control.prototype.onApplyTemplate.call(this);

            if (this.getTemplate$1() == null) {
                this.setContentHost(null);
            } else {
                this.setContentHost(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_ContentHost", this), System.Windows.Controls.Decorator));
                this.getContentHost().setChild(this.getTextBoxContent());
            }
        },
        onMouseDown: function (e) {
            this.focus();
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getFocusState: function () {
            return this.getIsFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Thumb", {
        inherits: [System.Windows.Controls.Control],
        statics: {
            ctor: function () {
                System.Windows.UIElement.focusableProperty.overrideMetadata(System.Windows.Controls.Primitives.Thumb, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Primitives.Thumb, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Primitives.Thumb)));
            },
            dragStartedEvent: null,
            dragDeltaEvent: null,
            dragCompletedEvent: null,
            isDraggingPropertyKey: null,
            isDraggingProperty: null,
            config: {
                init: function () {
                    this.dragStartedEvent = System.Windows.EventManager.registerRoutedEvent("DragStarted", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Thumb);
                    this.dragDeltaEvent = System.Windows.EventManager.registerRoutedEvent("DragDelta", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Thumb);
                    this.dragCompletedEvent = System.Windows.EventManager.registerRoutedEvent("DragCompleted", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Thumb);
                    this.isDraggingPropertyKey = System.Windows.DependencyProperty.registerReadOnly("IsDragging", Boolean, System.Windows.Controls.Primitives.Thumb, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                    this.isDraggingProperty = System.Windows.Controls.Primitives.Thumb.isDraggingPropertyKey.getDependencyProperty();
                }
            }
        },
        dragStartPosition: null,
        addDragStarted: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Thumb.dragStartedEvent, value);
        },
        removeDragStarted: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Thumb.dragStartedEvent, value);
        },
        addDragDelta: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Thumb.dragDeltaEvent, value);
        },
        removeDragDelta: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Thumb.dragDeltaEvent, value);
        },
        addDragCompleted: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Thumb.dragCompletedEvent, value);
        },
        removeDragCompleted: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Thumb.dragCompletedEvent, value);
        },
        getIsDragging: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.Primitives.Thumb.isDraggingPropertyKey), Boolean));
        },
        setIsDragging: function (value) {
            this.setValue$1(System.Windows.Controls.Primitives.Thumb.isDraggingPropertyKey, value);
        },
        onMouseDown: function (e) {
            if (e.getChangedButton() === System.Windows.Input.MouseButton.Left) {
                e.getMouseDevice().capture(this);
                this.dragStartPosition = e.getPosition(Bridge.cast(this.getVisualParent(), System.Windows.IInputElement));

                this.setIsDragging(true);

                var dragStartedEventArgs = new System.Windows.Controls.Primitives.DragStartedEventArgs(System.Windows.Controls.Primitives.Thumb.dragStartedEvent, this);
                this.raiseEvent(dragStartedEventArgs);

                e.setHandled(dragStartedEventArgs.getHandled());
            }
        },
        onMouseMove: function (e) {
            if (this.getIsDragging()) {
                var DragDeltaEventArgs = new System.Windows.Controls.Primitives.DragDeltaEventArgs(System.Windows.Controls.Primitives.Thumb.dragDeltaEvent, this, System.Windows.Point.op_Subtraction(e.getPosition(Bridge.cast(this.getVisualParent(), System.Windows.IInputElement)), this.dragStartPosition));
                this.raiseEvent(DragDeltaEventArgs);

                e.setHandled(DragDeltaEventArgs.getHandled());
            }
        },
        onMouseUp: function (e) {
            if (this.getIsDragging()) {
                e.getMouseDevice().releaseCapture();

                this.setIsDragging(false);

                var dragCompletedEventArgs = new System.Windows.Controls.Primitives.DragCompletedEventArgs(System.Windows.Controls.Primitives.Thumb.dragCompletedEvent, this, false);
                this.raiseEvent(dragCompletedEventArgs);

                e.setHandled(dragCompletedEventArgs.getHandled());
            }
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsDragging()) {
                return System.Windows.Controls.VisualStates.PressedState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getFocusState: function () {
            return this.getIsKeyboardFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.UniformGrid", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            rowsProperty: null,
            columnsProperty: null,
            firstColumnProperty: null,
            config: {
                init: function () {
                    this.rowsProperty = System.Windows.DependencyProperty.register("Rows", System.Int32, System.Windows.Controls.Primitives.UniformGrid, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                    this.columnsProperty = System.Windows.DependencyProperty.register("Columns", System.Int32, System.Windows.Controls.Primitives.UniformGrid, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                    this.firstColumnProperty = System.Windows.DependencyProperty.register("FirstColumn", System.Int32, System.Windows.Controls.Primitives.UniformGrid, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure));
                }
            }
        },
        actualRows: 0,
        actualColumns: 0,
        getRows: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.UniformGrid.rowsProperty), System.Int32));
        },
        setRows: function (value) {
            this.setValue(System.Windows.Controls.Primitives.UniformGrid.rowsProperty, value);
        },
        getColumns: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.UniformGrid.columnsProperty), System.Int32));
        },
        setColumns: function (value) {
            this.setValue(System.Windows.Controls.Primitives.UniformGrid.columnsProperty, value);
        },
        getFirstColumn: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.UniformGrid.firstColumnProperty), System.Int32));
        },
        setFirstColumn: function (value) {
            this.setValue(System.Windows.Controls.Primitives.UniformGrid.firstColumnProperty, value);
        },
        measureOverride: function (availableSize) {
            var $t;
            var cellsCount = (this.getFirstColumn() + System.Linq.Enumerable.from(this.getChildren()).where($asm.$.System.Windows.Controls.Primitives.UniformGrid.f1).count()) | 0;

            if (cellsCount === 0) {
                return System.Windows.Size.zero;
            }

            this.actualRows = this.getRows() > 0 ? this.getRows() : Bridge.Int.clip32(Granular.Extensions.DoubleExtensions.max(Math.ceil(this.getColumns() > 0 ? cellsCount / this.getColumns() : Math.sqrt(cellsCount)), 1));
            this.actualColumns = this.getColumns() > 0 ? this.getColumns() : Bridge.Int.clip32(Granular.Extensions.DoubleExtensions.max(Math.ceil(cellsCount / this.actualRows), 1));

            var availableCellSize = new System.Windows.Size(availableSize.getWidth() / this.actualColumns, availableSize.getHeight() / this.actualRows);
            var desiredCellSize = System.Windows.Size.zero;

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                child.measure(availableCellSize);
                desiredCellSize = System.Windows.SizeExtensions.max(desiredCellSize, child.getDesiredSize());
            }

            return new System.Windows.Size(desiredCellSize.getWidth() * this.actualColumns, desiredCellSize.getHeight() * this.actualRows);
        },
        arrangeOverride: function (finalSize) {
            var $t;
            var cellWidth = finalSize.getWidth() / this.actualColumns;
            var cellHeight = finalSize.getHeight() / this.actualRows;

            var cellIndex = this.getFirstColumn();

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                var columnIndex = cellIndex % this.actualColumns;
                var rowIndex = (Bridge.Int.div(cellIndex, this.actualColumns)) | 0;

                child.arrange(new System.Windows.Rect.$ctor1(columnIndex * cellWidth, rowIndex * cellHeight, cellWidth, cellHeight));

                if (child.getVisibility() !== System.Windows.Visibility.Collapsed) {
                    cellIndex = (cellIndex + 1) | 0;
                }
            }

            return finalSize;
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.UniformGrid", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.UniformGrid, {
        f1: function (child) {
            return child.getVisibility() !== System.Windows.Visibility.Collapsed;
        }
    });

    Bridge.define("System.Windows.Controls.ScrollContentPresenter", {
        inherits: [System.Windows.Controls.ContentPresenter,System.Windows.Controls.Primitives.IScrollInfo,System.Windows.Documents.IAdornerLayerHost],
        statics: {
            canContentScrollProperty: null,
            config: {
                init: function () {
                    this.canContentScrollProperty = System.Windows.Controls.ScrollViewer.canContentScrollProperty.addOwner(System.Windows.Controls.ScrollContentPresenter, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange, System.Windows.Controls.ScrollContentPresenter.onCanContentScrollChanged));
                }
            },
            onCanContentScrollChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Controls.ScrollContentPresenter)) {
                    Bridge.cast(dependencyObject, System.Windows.Controls.ScrollContentPresenter).onCanContentScrollChanged(e);
                }
            }
        },
        innerScrollInfo: null,
        delegateScrollInfo: null,
        config: {
            properties: {
                AdornerLayer: null
            },
            alias: [
            "getAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$getAdornerLayer",
            "setAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$setAdornerLayer",
            "getExtentSize", "System$Windows$Controls$Primitives$IScrollInfo$getExtentSize",
            "getViewportSize", "System$Windows$Controls$Primitives$IScrollInfo$getViewportSize",
            "getCanHorizontallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$getCanHorizontallyScroll",
            "setCanHorizontallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$setCanHorizontallyScroll",
            "getCanVerticallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$getCanVerticallyScroll",
            "setCanVerticallyScroll", "System$Windows$Controls$Primitives$IScrollInfo$setCanVerticallyScroll",
            "getOffset", "System$Windows$Controls$Primitives$IScrollInfo$getOffset",
            "setOffset", "System$Windows$Controls$Primitives$IScrollInfo$setOffset"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.ContentPresenter.ctor.call(this);
            this.innerScrollInfo = new System.Windows.Controls.ScrollContentPresenter.InnerScrollInfo();
            this.delegateScrollInfo = this.innerScrollInfo;

            this.setAdornerLayer(new System.Windows.Documents.AdornerLayer());
            this.addVisualChild(this.getAdornerLayer());
        },
        getCanContentScroll: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ScrollContentPresenter.canContentScrollProperty), Boolean));
        },
        setCanContentScroll: function (value) {
            this.setValue(System.Windows.Controls.ScrollContentPresenter.canContentScrollProperty, value);
        },
        getExtentSize: function () {
            return this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getExtentSize();
        },
        getViewportSize: function () {
            return this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getViewportSize();
        },
        getCanHorizontallyScroll: function () {
            return this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getCanHorizontallyScroll();
        },
        setCanHorizontallyScroll: function (value) {
            if (this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getCanHorizontallyScroll() === value) {
                return;
            }

            this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setCanHorizontallyScroll(value);
            this.invalidateMeasure();
        },
        getCanVerticallyScroll: function () {
            return this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getCanVerticallyScroll();
        },
        setCanVerticallyScroll: function (value) {
            if (this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getCanVerticallyScroll() === value) {
                return;
            }

            this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setCanVerticallyScroll(value);
            this.invalidateMeasure();
        },
        getOffset: function () {
            return this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset();
        },
        setOffset: function (value) {
            if (System.Windows.Point.op_Equality(this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$getOffset(), value)) {
                return;
            }

            this.delegateScrollInfo.System$Windows$Controls$Primitives$IScrollInfo$setOffset(value);
            this.invalidateArrange();
        },
        onTemplateChildChanged: function () {
            // move AdornerLayer to the top
            this.setVisualChildIndex(this.getAdornerLayer(), ((System.Linq.Enumerable.from(this.getVisualChildren()).count() - 1) | 0));
        },
        measureOverride: function (availableSize) {
            this.getAdornerLayer().measure(availableSize);

            var availableScrollSize = new System.Windows.Size(this.getCanHorizontallyScroll() ? Number.POSITIVE_INFINITY : availableSize.getWidth(), this.getCanVerticallyScroll() ? Number.POSITIVE_INFINITY : availableSize.getHeight());
            var measuredSize = System.Windows.Controls.ContentPresenter.prototype.measureOverride.call(this, availableScrollSize);

            this.innerScrollInfo.setExtentSize(measuredSize);
            this.innerScrollInfo.setViewportSize(availableSize);

            return System.Windows.SizeExtensions.min(measuredSize, availableSize);
        },
        arrangeOverride: function (finalSize) {
            this.getAdornerLayer().arrange(new System.Windows.Rect.$ctor3(finalSize));

            if (this.getTemplateChild() != null) {
                if (Bridge.referenceEquals(this.delegateScrollInfo, this.innerScrollInfo)) {
                    var finalScrollSize = new System.Windows.Size(this.getCanHorizontallyScroll() ? Number.POSITIVE_INFINITY : finalSize.getWidth(), this.getCanVerticallyScroll() ? Number.POSITIVE_INFINITY : finalSize.getHeight());

                    var childFinalSize = System.Windows.SizeExtensions.bounds(this.getTemplateChild().getDesiredSize(), finalSize, finalScrollSize);
                    var childOffset = System.Windows.PointExtensions.bounds(this.getOffset(), System.Windows.Point.zero, System.Windows.SizeExtensions.toPoint(System.Windows.SizeExtensions.max((System.Windows.Size.op_Subtraction(childFinalSize, this.getViewportSize())), System.Windows.Size.zero)));

                    this.getTemplateChild().arrange(new System.Windows.Rect.$ctor2(System.Windows.Point.op_UnaryNegation(childOffset), childFinalSize));
                } else {
                    // CanContentScroll and Content implements IScrollInfo
                    this.getTemplateChild().arrange(new System.Windows.Rect.$ctor3(finalSize));
                }
            }

            this.innerScrollInfo.setExtentSize(this.getTemplateChild() != null ? this.getTemplateChild().getVisualSize() : System.Windows.Size.zero);
            this.innerScrollInfo.setViewportSize(finalSize);

            return finalSize;
        },
        onContentChanged: function (e) {
            System.Windows.Controls.ContentPresenter.prototype.onContentChanged.call(this, e);
            this.delegateScrollInfo = this.getDelegateScrollInfo();
        },
        getDelegateScrollInfo: function () {
            if (this.getCanContentScroll()) {
                if (Bridge.is(this.getContent(), System.Windows.Controls.Primitives.IScrollInfo)) {
                    return Bridge.cast(this.getContent(), System.Windows.Controls.Primitives.IScrollInfo);
                }

                if (Bridge.is(this.getContent(), System.Windows.Controls.ItemsPresenter) && Bridge.is(Bridge.cast(this.getContent(), System.Windows.Controls.ItemsPresenter).getPanel(), System.Windows.Controls.Primitives.IScrollInfo)) {
                    return Bridge.cast(Bridge.cast(this.getContent(), System.Windows.Controls.ItemsPresenter).getPanel(), System.Windows.Controls.Primitives.IScrollInfo);
                }
            }

            return this.innerScrollInfo;
        },
        onCanContentScrollChanged: function (e) {
            this.delegateScrollInfo = this.getDelegateScrollInfo();
        }
    });

    Bridge.define("System.Windows.Controls.StackPanel", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            orientationProperty: null,
            flowDirectionProperty: null,
            config: {
                init: function () {
                    this.orientationProperty = System.Windows.DependencyProperty.register("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.StackPanel, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Controls.Orientation.Vertical));
                    this.flowDirectionProperty = System.Windows.DependencyProperty.register("FlowDirection", System.Windows.FlowDirection, System.Windows.Controls.StackPanel, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.FlowDirection.TopDown));
                }
            },
            createSize: function (orientation, mainLength, crossLength) {
                return orientation === System.Windows.Controls.Orientation.Horizontal ? new System.Windows.Size(mainLength, crossLength) : new System.Windows.Size(crossLength, mainLength);
            },
            createRect: function (orientation, mainStart, crossStart, mainLength, crossLength) {
                return orientation === System.Windows.Controls.Orientation.Horizontal ? new System.Windows.Rect.$ctor1(mainStart, crossStart, mainLength, crossLength) : new System.Windows.Rect.$ctor1(crossStart, mainStart, crossLength, mainLength);
            }
        },
        measuredCrossLength: 0,
        getOrientation: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.StackPanel.orientationProperty), System.Int32));
        },
        setOrientation: function (value) {
            this.setValue(System.Windows.Controls.StackPanel.orientationProperty, value);
        },
        getFlowDirection: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.StackPanel.flowDirectionProperty), System.Int32));
        },
        setFlowDirection: function (value) {
            this.setValue(System.Windows.Controls.StackPanel.flowDirectionProperty, value);
        },
        getIsNormalFlow: function () {
            return this.getFlowDirection() === System.Windows.FlowDirection.LeftToRight || this.getFlowDirection() === System.Windows.FlowDirection.TopDown;
        },
        measureOverride: function (availableSize) {
            var $t;
            var availableCrossLength = this.getCrossLength(availableSize);
            var measureSize = System.Windows.Controls.StackPanel.createSize(this.getOrientation(), Number.POSITIVE_INFINITY, availableCrossLength);

            var mainLength = 0;
            var crossLength = 0;

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                child.measure(measureSize);

                mainLength += this.getMainLength(child.getDesiredSize());
                crossLength = Math.max(crossLength, this.getCrossLength(child.getDesiredSize()));
            }

            this.measuredCrossLength = availableCrossLength;

            return System.Windows.Controls.StackPanel.createSize(this.getOrientation(), mainLength, crossLength);
        },
        arrangeOverride: function (finalSize) {
            var $t, $t1;
            var panelMainLength = System.Linq.Enumerable.from(this.getChildren()).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.StackPanel.f1)).sum();
            var panelCrossLength = this.getCrossLength(finalSize);

            if (this.measuredCrossLength !== panelCrossLength) {
                var measureSize = System.Windows.Controls.StackPanel.createSize(this.getOrientation(), Number.POSITIVE_INFINITY, panelCrossLength);

                $t = Bridge.getEnumerator(this.getChildren());
                while ($t.moveNext()) {
                    var child = Bridge.cast($t.getCurrent(), System.Windows.FrameworkElement);
                    child.measure(measureSize);
                }

                this.measuredCrossLength = panelCrossLength;
            }

            var childrenMainLength = 0;
            $t1 = Bridge.getEnumerator(this.getChildren());
            while ($t1.moveNext()) {
                var child1 = $t1.getCurrent();
                var childMainLength = this.getMainLength(child1.getDesiredSize());
                var childMainStart = this.getIsNormalFlow() ? childrenMainLength : panelMainLength - childrenMainLength - childMainLength;

                child1.arrange(System.Windows.Controls.StackPanel.createRect(this.getOrientation(), childMainStart, 0, childMainLength, panelCrossLength));

                childrenMainLength += childMainLength;
            }

            return System.Windows.Controls.StackPanel.createSize(this.getOrientation(), this.getMainLength(finalSize), panelCrossLength);
        },
        getMainLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getWidth() : size.getHeight();
        },
        getCrossLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getHeight() : size.getWidth();
        }
    });

    Bridge.ns("System.Windows.Controls.StackPanel", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.StackPanel, {
        f1: function (child) {
            return this.getMainLength(child.getDesiredSize());
        }
    });

    Bridge.define("System.Windows.Controls.WrapPanel", {
        inherits: [System.Windows.Controls.Panel],
        statics: {
            orientationProperty: null,
            config: {
                init: function () {
                    this.orientationProperty = System.Windows.DependencyProperty.register("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.WrapPanel, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        getOrientation: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.WrapPanel.orientationProperty), System.Int32));
        },
        setOrientation: function (value) {
            this.setValue(System.Windows.Controls.WrapPanel.orientationProperty, value);
        },
        measureOverride: function (availableSize) {
            var $t;
            if (!System.Linq.Enumerable.from(this.getChildren()).any()) {
                return System.Windows.Size.zero;
            }

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                this.measureChild(child, this.getMainLength(availableSize), this.getCrossLength(availableSize));
            }

            var groups = this.getElementGroups(availableSize);

            var mainLength = System.Linq.Enumerable.from(groups).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.WrapPanel.f2)).max();
            var crossLength = System.Linq.Enumerable.from(groups).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.WrapPanel.f4)).sum();

            return this.createSize(mainLength, crossLength);
        },
        arrangeOverride: function (finalSize) {
            var $t, $t1;
            if (!System.Linq.Enumerable.from(this.getChildren()).any()) {
                return System.Windows.Size.zero;
            }

            var groups = this.getElementGroups(finalSize);

            var maxMainLength = 0;
            var totalCrossLength = 0;

            $t = Bridge.getEnumerator(groups, System.Collections.Generic.IEnumerable$1(System.Windows.UIElement));
            while ($t.moveNext()) {
                var group = $t.getCurrent();
                var groupMainLength = 0;
                var groupMaxCrossLength = System.Linq.Enumerable.from(group).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.WrapPanel.f5)).max();

                $t1 = Bridge.getEnumerator(group, System.Windows.UIElement);
                while ($t1.moveNext()) {
                    var child = $t1.getCurrent();
                    var childMainLength = this.getMainLength(child.getDesiredSize());

                    this.arrangeChild(child, groupMainLength, totalCrossLength, childMainLength, groupMaxCrossLength);

                    groupMainLength += childMainLength;
                }

                maxMainLength = Math.max(maxMainLength, groupMainLength);
                totalCrossLength += groupMaxCrossLength;
            }

            return this.createSize(maxMainLength, totalCrossLength);
        },
        getElementGroups: function (size) {
            var $t;
            var mainLength = this.getMainLength(size);

            var groups = new (System.Collections.Generic.List$1(System.Collections.Generic.IEnumerable$1(System.Windows.UIElement)))();

            var currentGroup = new (System.Collections.Generic.List$1(System.Windows.UIElement))();
            var currentGroupMainLength = 0;

            $t = Bridge.getEnumerator(this.getChildren());
            while ($t.moveNext()) {
                var child = $t.getCurrent();
                var childMainLength = this.getMainLength(child.getDesiredSize());

                if (currentGroupMainLength > 0 && currentGroupMainLength + childMainLength > mainLength) {
                    groups.add(currentGroup);

                    // start a new group
                    currentGroup = new (System.Collections.Generic.List$1(System.Windows.UIElement))();
                    currentGroupMainLength = 0;
                }

                currentGroupMainLength += childMainLength;
                currentGroup.add(child);
            }

            groups.add(currentGroup);
            return groups;
        },
        measureChild: function (child, availableMainLength, availableCrossLength) {
            child.measure(this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? new System.Windows.Size(availableMainLength, availableCrossLength) : new System.Windows.Size(availableCrossLength, availableMainLength));
        },
        arrangeChild: function (child, finalMainStart, finalCrossStart, finalMainLength, finalCrossLength) {
            child.arrange(this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? new System.Windows.Rect.$ctor1(finalMainStart, finalCrossStart, finalMainLength, finalCrossLength) : new System.Windows.Rect.$ctor1(finalCrossStart, finalMainStart, finalCrossLength, finalMainLength));
        },
        createSize: function (mainLength, crossLength) {
            if (this.getOrientation() === System.Windows.Controls.Orientation.Horizontal) {
                return new System.Windows.Size(mainLength, crossLength);
            }

            return new System.Windows.Size(crossLength, mainLength);
        },
        getMainLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getWidth() : size.getHeight();
        },
        getCrossLength: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getHeight() : size.getWidth();
        }
    });

    Bridge.ns("System.Windows.Controls.WrapPanel", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.WrapPanel, {
        f1: function (child1) {
            return this.getMainLength(child1.getDesiredSize());
        },
        f2: function (group) {
            return System.Linq.Enumerable.from(group).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.WrapPanel.f1)).sum();
        },
        f3: function (child1) {
            return this.getCrossLength(child1.getDesiredSize());
        },
        f4: function (group) {
            return System.Linq.Enumerable.from(group).select(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.WrapPanel.f3)).max();
        },
        f5: function (child) {
            return this.getCrossLength(child.getDesiredSize());
        }
    });

    Bridge.define("System.Windows.Documents.Paragraph", {
        inherits: [System.Windows.Documents.Block],
        config: {
            properties: {
                Inlines: null
            }
        }
    });

    Bridge.define("System.Windows.Documents.Run", {
        inherits: [System.Windows.Documents.Inline],
        statics: {
            textProperty: null,
            config: {
                init: function () {
                    this.textProperty = System.Windows.DependencyProperty.register("Text", String, System.Windows.Documents.Run, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Documents.Inline.ctor.call(this);
            //
        },
        $ctor1: function (text) {
            this.$initialize();
            System.Windows.Documents.Inline.ctor.call(this);
            this.setText(text);
        },
        getText: function () {
            return Bridge.cast(this.getValue(System.Windows.Documents.Run.textProperty), String);
        },
        setText: function (value) {
            this.setValue(System.Windows.Documents.Run.textProperty, value);
        },
        getRenderElement: function (factory) {
            return null;
        },
        removeRenderElement: function (factory) {
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.ColorAnimation", {
        inherits: [System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Media.Color)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Media.Color).ctor.call(this, System.Windows.Media.Animation.ColorAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.ColorAnimationUsingKeyFrames", {
        inherits: [System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Media.Color)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Media.Color).ctor.call(this, System.Windows.Media.Animation.ColorAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.DoubleAnimation", {
        inherits: [System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Nullable$1(System.Double))],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Nullable$1(System.Double)).ctor.call(this, System.Windows.Media.Animation.DoubleAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames", {
        inherits: [System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Nullable$1(System.Double))],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Nullable$1(System.Double)).ctor.call(this, System.Windows.Media.Animation.DoubleAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.RectAnimation", {
        inherits: [System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Rect)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Rect).ctor.call(this, System.Windows.Media.Animation.RectAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.RectAnimationUsingKeyFrames", {
        inherits: [System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Rect)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Rect).ctor.call(this, System.Windows.Media.Animation.RectAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.Storyboard", {
        inherits: [System.Windows.Media.Animation.ParallelTimeline],
        statics: {
            targetNameProperty: null,
            targetProperty: null,
            targetPropertyProperty: null,
            config: {
                init: function () {
                    this.targetNameProperty = System.Windows.DependencyProperty.registerAttached("TargetName", String, System.Windows.Media.Animation.Storyboard, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.targetProperty = System.Windows.DependencyProperty.registerAttached("Target", System.Windows.DependencyObject, System.Windows.Media.Animation.Storyboard, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.targetPropertyProperty = System.Windows.DependencyProperty.registerAttached("TargetProperty", System.Windows.PropertyPath, System.Windows.Media.Animation.Storyboard, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            getTargetName: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Media.Animation.Storyboard.targetNameProperty), String);
            },
            setTargetName: function (obj, value) {
                obj.setValue(System.Windows.Media.Animation.Storyboard.targetNameProperty, value);
            },
            getTarget: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Media.Animation.Storyboard.targetProperty), System.Windows.DependencyObject);
            },
            setTarget: function (obj, value) {
                obj.setValue(System.Windows.Media.Animation.Storyboard.targetProperty, value);
            },
            getTargetProperty: function (obj) {
                return Bridge.cast(obj.getValue(System.Windows.Media.Animation.Storyboard.targetPropertyProperty), System.Windows.PropertyPath);
            },
            setTargetProperty: function (obj, value) {
                obj.setValue(System.Windows.Media.Animation.Storyboard.targetPropertyProperty, value);
            },
            tryGetPropertyPathTarget: function (root, propertyPath, target, targetProperty) {
                var baseValue = { };
                target.v = System.Linq.Enumerable.from(propertyPath.getElements()).count() > 1 && System.Windows.PropertyPathExtensions.tryGetValue(System.Windows.PropertyPathExtensions.getBasePropertyPath(propertyPath), root, baseValue) ? Bridge.as(baseValue.v, System.Windows.DependencyObject) : root;

                if (target.v != null && !propertyPath.getIsEmpty()) {
                    return System.Linq.Enumerable.from(propertyPath.getElements()).last().System$Windows$IPropertyPathElement$tryGetDependencyProperty(Bridge.getType(target.v), targetProperty);
                }

                target.v = null;
                targetProperty.v = null;
                return false;
            }
        },
        clocks: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.ParallelTimeline.ctor.call(this);
            this.clocks = new (System.Collections.Generic.Dictionary$2(System.Windows.FrameworkElement,System.Windows.Media.Animation.TimelineClock))();
        },
        begin: function (containingObject, nameScope, handoffBehavior, layerOwner) {
            var $t;
            if (nameScope === void 0) { nameScope = null; }
            if (handoffBehavior === void 0) { handoffBehavior = 0; }
            if (layerOwner === void 0) { layerOwner = null; }
            this.stop(containingObject);

            var clock = this.createClock();
            clock.begin(Bridge.cast(containingObject, System.Windows.Media.Animation.IAnimatable).System$Windows$Media$Animation$IAnimatable$getRootClock());

            this.clocks.set(containingObject, clock);

            var targets = this.getAnimationClocksTargets(clock, containingObject, nameScope || System.Windows.NameScope.getContainingNameScope(containingObject));
            $t = Bridge.getEnumerator(Granular.Collections.IListDictionaryExtensions.getKeys(System.Windows.Media.Animation.Storyboard.TargetKey, System.Windows.Media.Animation.AnimationTimelineClock, targets), System.Windows.Media.Animation.Storyboard.TargetKey);
            while ($t.moveNext()) {
                var target = $t.getCurrent();
                System.Windows.Media.Animation.AnimatableExtensions.applyAnimationClocks(target.getTarget(), target.getTargetProperty(), targets.getValues(target), handoffBehavior, layerOwner);
            }
        },
        remove: function (containingObject, nameScope, layerOwner) {
            var $t;
            if (nameScope === void 0) { nameScope = null; }
            if (layerOwner === void 0) { layerOwner = null; }
            this.stop(containingObject);

            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                var targets = this.getAnimationClocksTargets(clock.v, containingObject, nameScope || System.Windows.NameScope.getContainingNameScope(containingObject));
                $t = Bridge.getEnumerator(Granular.Collections.IListDictionaryExtensions.getKeys(System.Windows.Media.Animation.Storyboard.TargetKey, System.Windows.Media.Animation.AnimationTimelineClock, targets), System.Windows.Media.Animation.Storyboard.TargetKey);
                while ($t.moveNext()) {
                    var target = $t.getCurrent();
                    target.getTarget().System$Windows$Media$Animation$IAnimatable$removeAnimationClocks(target.getTargetProperty(), targets.getValues(target), layerOwner);
                }
                this.clocks.remove(containingObject);
            }
        },
        pause: function (containingObject) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.pause();
            }
        },
        resume: function (containingObject) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.resume();
            }
        },
        seek: function (containingObject, time) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.seek(time);
            }
        },
        seekOffset: function (containingObject, offset) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.seekOffset(offset);
            }
        },
        skipToFill: function (containingObject) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.skipToFill();
            }
        },
        stop: function (containingObject) {
            var clock = { };
            if (this.clocks.tryGetValue(containingObject, clock)) {
                clock.v.stop();
            }
        },
        getAnimationClocksTargets: function (clock, containingObject, nameScope) {
            var targets = { v : new (Granular.Collections.ListDictionary$2(System.Windows.Media.Animation.Storyboard.TargetKey,System.Windows.Media.Animation.AnimationTimelineClock))() };
            this.getAnimationClocksTargets$1(clock, containingObject, nameScope, targets);
            return targets.v;
        },
        getAnimationClocksTargets$1: function (clock, containingObject, nameScope, targets) {
            var $t;
            var animationClock = Bridge.as(clock, System.Windows.Media.Animation.AnimationTimelineClock);
            if (animationClock != null) {
                var target = this.getClockTarget(animationClock, containingObject, nameScope);
                if (target != null) {
                    targets.v.add(target, animationClock);
                }
            }

            var clockGroup = Bridge.as(clock, System.Windows.Media.Animation.TimelineGroupClock);
            if (clockGroup != null) {
                $t = Bridge.getEnumerator(clockGroup.getChildren(), System.Windows.Media.Animation.TimelineClock);
                while ($t.moveNext()) {
                    var child = $t.getCurrent();
                    this.getAnimationClocksTargets$1(child, containingObject, nameScope, targets);
                }
            }
        },
        getClockTarget: function (clock, containingObject, nameScope) {
            var root = System.Windows.Media.Animation.Storyboard.getTarget(clock.getTimeline());

            if (root == null) {
                var targetName = System.Windows.Media.Animation.Storyboard.getTargetName(clock.getTimeline());

                if (Granular.Extensions.StringExtensions.isNullOrEmpty(targetName)) {
                    root = containingObject;
                } else {
                    root = Bridge.as(nameScope.System$Windows$INameScope$findName(targetName), System.Windows.DependencyObject);

                    if (root == null) {
                        throw new Granular.Exception("Can't find Storyboard.TargetName \"{0}\" for element \"{1}\"", [targetName, containingObject]);
                    }
                }
            }

            var propertyPath = System.Windows.Media.Animation.Storyboard.getTargetProperty(clock.getTimeline());

            var target = { };
            var targetProperty = { };
            return System.Windows.Media.Animation.Storyboard.tryGetPropertyPathTarget(root, propertyPath, target, targetProperty) && Bridge.is(target.v, System.Windows.Media.Animation.IAnimatable) ? new System.Windows.Media.Animation.Storyboard.TargetKey(Bridge.cast(target.v, System.Windows.Media.Animation.IAnimatable), targetProperty.v) : null;
        }
    });

    Bridge.define("System.Windows.Media.Animation.ThicknessAnimation", {
        inherits: [System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Thickness)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.TransitionAnimationTimeline$1(System.Windows.Thickness).ctor.call(this, System.Windows.Media.Animation.ThicknessAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames", {
        inherits: [System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Thickness)],
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Animation.KeyFramesAnimationTimeline$1(System.Windows.Thickness).ctor.call(this, System.Windows.Media.Animation.ThicknessAnimationOperations.default, true);
            //
        }
    });

    Bridge.define("System.Windows.Media.ImageBrush", {
        inherits: [System.Windows.Media.TileBrush],
        statics: {
            imageSourceProperty: null,
            config: {
                init: function () {
                    this.imageSourceProperty = System.Windows.DependencyProperty.register("ImageSource", String, System.Windows.Media.ImageBrush, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            }
        },
        getImageSource: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.ImageBrush.imageSourceProperty), String);
        },
        setImageSource: function (value) {
            this.setValue(System.Windows.Media.ImageBrush.imageSourceProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.Imaging.BitmapImage", {
        inherits: [System.Windows.Media.Imaging.BitmapSource,System.Windows.Markup.IUriContext,System.Windows.Markup.ISupportInitialize],
        statics: {
            uriSourceProperty: null,
            cacheOptionProperty: null,
            sourceRectProperty: null,
            config: {
                init: function () {
                    this.uriSourceProperty = System.Windows.DependencyProperty.register("UriSource", System.Uri, System.Windows.Media.Imaging.BitmapImage, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Media.Imaging.BitmapImage.f1));
                    this.cacheOptionProperty = System.Windows.DependencyProperty.register("CacheOption", System.Windows.Media.Imaging.BitmapCacheOption, System.Windows.Media.Imaging.BitmapImage, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.sourceRectProperty = System.Windows.DependencyProperty.register("SourceRect", System.Windows.Rect, System.Windows.Media.Imaging.BitmapImage, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Media.Imaging.BitmapImage.f2));
                }
            }
        },
        renderImageSource$1: null,
        isInitializing: false,
        config: {
            properties: {
                BaseUri: null
            },
            alias: [
            "getBaseUri", "System$Windows$Markup$IUriContext$getBaseUri",
            "setBaseUri", "System$Windows$Markup$IUriContext$setBaseUri",
            "beginInit", "System$Windows$Markup$ISupportInitialize$beginInit",
            "endInit", "System$Windows$Markup$ISupportInitialize$endInit"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.Imaging.BitmapSource.ctor.call(this);
            //
        },
        $ctor1: function (uriSource, cacheOption) {
            if (cacheOption === void 0) { cacheOption = 0; }

            this.$initialize();
            System.Windows.Media.Imaging.BitmapSource.ctor.call(this);
            this.beginInit();
            this.setUriSource(uriSource);
            this.setCacheOption(cacheOption);
            this.endInit();
        },
        getUriSource: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Imaging.BitmapImage.uriSourceProperty), System.Uri);
        },
        setUriSource: function (value) {
            this.setValue(System.Windows.Media.Imaging.BitmapImage.uriSourceProperty, value);
        },
        getCacheOption: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.Imaging.BitmapImage.cacheOptionProperty), System.Int32));
        },
        setCacheOption: function (value) {
            this.setValue(System.Windows.Media.Imaging.BitmapImage.cacheOptionProperty, value);
        },
        getSourceRect: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.Imaging.BitmapImage.sourceRectProperty), System.Windows.Rect);
        },
        setSourceRect: function (value) {
            this.setValue(System.Windows.Media.Imaging.BitmapImage.sourceRectProperty, value);
        },
        getRenderImageSource: function () {
            if (this.renderImageSource$1 == null) {
                this.createRenderImageSource();
            }

            return this.renderImageSource$1;
        },
        beginInit: function () {
            if (this.isInitializing) {
                throw new Granular.Exception("BitmapImage is already initializing");
            }

            this.isInitializing = true;
        },
        endInit: function () {
            if (!this.isInitializing) {
                return;
            }

            if (this.getCacheOption() === System.Windows.Media.Imaging.BitmapCacheOption.OnLoad) {
                this.createRenderImageSource();
            }

            this.isInitializing = false;
        },
        onUriSourceChanged: function (e) {
            if (this.renderImageSource$1 != null) {
                throw new Granular.Exception("UriSource cannot be changed after BitmapImage was initialized");
            }

            if (!this.isInitializing && this.getCacheOption() === System.Windows.Media.Imaging.BitmapCacheOption.OnLoad) {
                this.createRenderImageSource();
            }
        },
        onSourceRectChanged: function (e) {
            if (this.renderImageSource$1 != null) {
                throw new Granular.Exception("UriSource cannot be changed after BitmapImage was initialized");
            }
        },
        createRenderImageSource: function () {
            if (this.renderImageSource$1 != null || this.getUriSource() == null) {
                return;
            }

            this.renderImageSource$1 = System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getRenderImageSourceFactory().System$Windows$IRenderImageSourceFactory$createRenderImageSource(System.UriExtensions.resolveAbsoluteUri(this.getUriSource(), this.getBaseUri()), this.getSourceRect());
            this.renderImageSource$1.System$Windows$Media$IRenderImageSource$addStateChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Media.Imaging.BitmapImage.f3));
            this.setRenderImageState(this.renderImageSource$1.System$Windows$Media$IRenderImageSource$getState());
        }
    });

    Bridge.ns("System.Windows.Media.Imaging.BitmapImage", $asm.$);

    Bridge.apply($asm.$.System.Windows.Media.Imaging.BitmapImage, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Media.Imaging.BitmapImage).onUriSourceChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Media.Imaging.BitmapImage).onSourceRectChanged(e);
        },
        f3: function (sender, e) {
            this.setRenderImageState(this.renderImageSource$1.System$Windows$Media$IRenderImageSource$getState());
        }
    });

    Bridge.define("System.Windows.Media.LinearGradientBrush", {
        inherits: [System.Windows.Media.GradientBrush],
        statics: {
            startPointProperty: null,
            endPointProperty: null,
            config: {
                init: function () {
                    this.startPointProperty = System.Windows.DependencyProperty.register("StartPoint", System.Windows.Point, System.Windows.Media.LinearGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Point.zero));
                    this.endPointProperty = System.Windows.DependencyProperty.register("EndPoint", System.Windows.Point, System.Windows.Media.LinearGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.Point.$ctor1(1, 1)));
                }
            },
            getStartPoint: function (angle) {
                var startPoint = { };
                var endPoint = { };

                System.Windows.Media.LinearGradientBrush.getPoints(angle, startPoint, endPoint);

                return startPoint.v;
            },
            getEndPoint: function (angle) {
                var startPoint = { };
                var endPoint = { };

                System.Windows.Media.LinearGradientBrush.getPoints(angle, startPoint, endPoint);

                return endPoint.v;
            },
            getPoints: function (angle, startPoint, endPoint) {
                var radians = Math.PI * angle / 180;
                var x = Math.cos(radians);
                var y = Math.sin(radians);

                var scale = 1 / Granular.Extensions.DoubleExtensions.max(Granular.Extensions.DoubleExtensions.abs(x), Granular.Extensions.DoubleExtensions.abs(y));
                x *= scale;
                y *= scale;

                var offset = new System.Windows.Point.$ctor1(Granular.Extensions.DoubleExtensions.min(x, 0), Granular.Extensions.DoubleExtensions.min(y, 0));

                startPoint.v = System.Windows.Point.op_UnaryNegation(offset);
                endPoint.v = System.Windows.Point.op_Subtraction(new System.Windows.Point.$ctor1(x, y), offset);
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.GradientBrush.ctor.call(this);
            //
        },
        $ctor2: function (angle, startColor, endColor) {
            System.Windows.Media.LinearGradientBrush.$ctor3.call(this, System.Windows.Media.LinearGradientBrush.getStartPoint(angle), System.Windows.Media.LinearGradientBrush.getEndPoint(angle), System.Array.init([new System.Windows.Media.GradientStop.$ctor1(startColor, 0), new System.Windows.Media.GradientStop.$ctor1(endColor, 1)], System.Windows.Media.GradientStop));
            //
        },
        $ctor1: function (angle, gradientStops) {
            System.Windows.Media.LinearGradientBrush.$ctor3.call(this, System.Windows.Media.LinearGradientBrush.getStartPoint(angle), System.Windows.Media.LinearGradientBrush.getEndPoint(angle), gradientStops);
            //
        },
        $ctor4: function (startPoint, endPoint, startColor, endColor) {
            System.Windows.Media.LinearGradientBrush.$ctor3.call(this, startPoint, endPoint, System.Array.init([new System.Windows.Media.GradientStop.$ctor1(startColor, 0), new System.Windows.Media.GradientStop.$ctor1(endColor, 1)], System.Windows.Media.GradientStop));
            //
        },
        $ctor3: function (startPoint, endPoint, gradientStops) {
            this.$initialize();
            System.Windows.Media.GradientBrush.$ctor1.call(this, gradientStops);
            this.setStartPoint(startPoint);
            this.setEndPoint(endPoint);
        },
        getStartPoint: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.LinearGradientBrush.startPointProperty), System.Windows.Point);
        },
        setStartPoint: function (value) {
            this.setValue(System.Windows.Media.LinearGradientBrush.startPointProperty, value);
        },
        getEndPoint: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.LinearGradientBrush.endPointProperty), System.Windows.Point);
        },
        setEndPoint: function (value) {
            this.setValue(System.Windows.Media.LinearGradientBrush.endPointProperty, value);
        }
    });

    Bridge.define("System.Windows.Media.RadialGradientBrush", {
        inherits: [System.Windows.Media.GradientBrush],
        statics: {
            centerProperty: null,
            gradientOriginProperty: null,
            radiusXProperty: null,
            radiusYProperty: null,
            config: {
                init: function () {
                    this.centerProperty = System.Windows.DependencyProperty.register("Center", System.Windows.Point, System.Windows.Media.RadialGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.Point.$ctor1(0.5, 0.5)));
                    this.gradientOriginProperty = System.Windows.DependencyProperty.register("GradientOrigin", System.Windows.Point, System.Windows.Media.RadialGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.Point.$ctor1(0.5, 0.5)));
                    this.radiusXProperty = System.Windows.DependencyProperty.register("RadiusX", System.Double, System.Windows.Media.RadialGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(0.5));
                    this.radiusYProperty = System.Windows.DependencyProperty.register("RadiusY", System.Double, System.Windows.Media.RadialGradientBrush, new System.Windows.FrameworkPropertyMetadata.$ctor1(0.5));
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Media.GradientBrush.ctor.call(this);
            //
        },
        $ctor2: function (startColor, endColor) {
            System.Windows.Media.RadialGradientBrush.$ctor1.call(this, System.Array.init([new System.Windows.Media.GradientStop.$ctor1(startColor, 0), new System.Windows.Media.GradientStop.$ctor1(endColor, 1)], System.Windows.Media.GradientStop));
            //
        },
        $ctor1: function (gradientStops) {
            this.$initialize();
            System.Windows.Media.GradientBrush.$ctor1.call(this, gradientStops);
            //
        },
        getCenter: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.RadialGradientBrush.centerProperty), System.Windows.Point);
        },
        setCenter: function (value) {
            this.setValue(System.Windows.Media.RadialGradientBrush.centerProperty, value);
        },
        getGradientOrigin: function () {
            return Bridge.cast(this.getValue(System.Windows.Media.RadialGradientBrush.gradientOriginProperty), System.Windows.Point);
        },
        setGradientOrigin: function (value) {
            this.setValue(System.Windows.Media.RadialGradientBrush.gradientOriginProperty, value);
        },
        getRadiusX: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.RadialGradientBrush.radiusXProperty), System.Double));
        },
        setRadiusX: function (value) {
            this.setValue(System.Windows.Media.RadialGradientBrush.radiusXProperty, value);
        },
        getRadiusY: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Media.RadialGradientBrush.radiusYProperty), System.Double));
        },
        setRadiusY: function (value) {
            this.setValue(System.Windows.Media.RadialGradientBrush.radiusYProperty, value);
        }
    });

    Bridge.define("System.Windows.MultiDataTrigger", {
        inherits: [System.Windows.MultiDataTriggerBase],
        config: {
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        createDataTriggerCondition: function (element) {
            return System.Windows.MultiDataTriggerCondition.register(element, System.Linq.Enumerable.from(this.getConditions()).select($asm.$.System.Windows.MultiDataTrigger.f1).toArray());
        }
    });

    Bridge.ns("System.Windows.MultiDataTrigger", $asm.$);

    Bridge.apply($asm.$.System.Windows.MultiDataTrigger, {
        f1: function (condition) {
            return new System.Windows.MultiDataTrigger.MultiDataTriggerConditionProvider(condition);
        }
    });

    Bridge.define("System.Windows.MultiTrigger", {
        inherits: [System.Windows.MultiDataTriggerBase],
        config: {
            alias: [
            "createDataTriggerCondition", "System$Windows$IDataTriggerConditionProvider$createDataTriggerCondition"
            ]
        },
        createDataTriggerCondition: function (element) {
            return System.Windows.MultiDataTriggerCondition.register(element, System.Linq.Enumerable.from(this.getConditions()).select($asm.$.System.Windows.MultiTrigger.f1).toArray());
        }
    });

    Bridge.ns("System.Windows.MultiTrigger", $asm.$);

    Bridge.apply($asm.$.System.Windows.MultiTrigger, {
        f1: function (condition) {
            return new System.Windows.MultiTrigger.TriggerConditionProvider(condition);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ButtonBase", {
        inherits: [System.Windows.Controls.ContentControl],
        statics: {
            ctor: function () {
                System.Windows.EventManager.registerClassHandler(System.Windows.Controls.Primitives.ButtonBase, System.Windows.Controls.Primitives.ButtonBase.clickEvent, $asm.$.System.Windows.Controls.Primitives.ButtonBase.f1, false);

                System.Windows.UIElement.isEnabledProperty.overrideMetadata(System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isMouseOverProperty.overrideMetadata(System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isFocusedProperty.overrideMetadata(System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
            },
            clickEvent: null,
            clickModeProperty: null,
            isPressedProperty: null,
            commandProperty: null,
            commandParameterProperty: null,
            config: {
                init: function () {
                    this.clickEvent = System.Windows.EventManager.registerRoutedEvent("Click", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.ButtonBase);
                    this.clickModeProperty = System.Windows.DependencyProperty.register("ClickMode", System.Windows.Controls.ClickMode, System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isPressedProperty = System.Windows.DependencyProperty.register("IsPressed", Boolean, System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.$ctor3(false, System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState, $asm.$.System.Windows.Controls.Primitives.ButtonBase.f2));
                    this.commandProperty = System.Windows.DependencyProperty.register("Command", System.Windows.Input.ICommand, System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.$ctor6(null, $asm.$.System.Windows.Controls.Primitives.ButtonBase.f3));
                    this.commandParameterProperty = System.Windows.DependencyProperty.register("CommandParameterProperty", Object, System.Windows.Controls.Primitives.ButtonBase, new System.Windows.FrameworkPropertyMetadata.ctor());
                }
            },
            isVisualChild: function (parent, child) {
                return child != null && (Bridge.referenceEquals(parent, child) || System.Windows.Controls.Primitives.ButtonBase.isVisualChild(parent, child.getVisualParent()));
            }
        },
        keyboardFocus: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.ContentControl.ctor.call(this);
            //
        },
        addClick: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.ButtonBase.clickEvent, value);
        },
        removeClick: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.ButtonBase.clickEvent, value);
        },
        getClickMode: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ButtonBase.clickModeProperty), System.Int32));
        },
        setClickMode: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ButtonBase.clickModeProperty, value);
        },
        getIsPressed: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ButtonBase.isPressedProperty), Boolean));
        },
        setIsPressed: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ButtonBase.isPressedProperty, value);
        },
        getCommand: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ButtonBase.commandProperty), System.Windows.Input.ICommand);
        },
        setCommand: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ButtonBase.commandProperty, value);
        },
        getCommandParameter: function () {
            return this.getValue(System.Windows.Controls.Primitives.ButtonBase.commandParameterProperty);
        },
        setCommandParameter: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ButtonBase.commandParameterProperty, value);
        },
        raiseClick: function () {
            var e = new System.Windows.RoutedEventArgs(System.Windows.Controls.Primitives.ButtonBase.clickEvent, this);
            this.raiseEvent(e);
            return e.getHandled();
        },
        onClick: function (e) {
            var command = this.getCommand();
            if (command != null) {
                command.System$Windows$Input$ICommand$execute(this.getCommandParameter());
            }
        },
        onIsPressedChanged: function (e) {
            //
        },
        onPressStarted: function () {
            //
        },
        onPressEnded: function () {
            //
        },
        onMouseDown: function (e) {
            if (e.getChangedButton() === System.Windows.Input.MouseButton.Left) {
                this.focus();

                this.setIsPressed(true);
                this.onPressStarted();

                e.getMouseDevice().capture(this);

                if (this.getClickMode() === System.Windows.Controls.ClickMode.Press) {
                    e.setHandled(this.raiseClick());
                }
            }
        },
        onMouseUp: function (e) {
            if (e.getChangedButton() === System.Windows.Input.MouseButton.Left && Bridge.referenceEquals(e.getMouseDevice().getCaptureTarget(), this)) {
                this.setIsPressed(false);
                this.onPressEnded();

                e.getMouseDevice().releaseCapture();

                if (this.getIsMouseOver() && this.getClickMode() === System.Windows.Controls.ClickMode.Release) {
                    e.setHandled(this.raiseClick());
                }
            }
        },
        onMouseMove: function (e) {
            if (Bridge.referenceEquals(e.getMouseDevice().getCaptureTarget(), this)) {
                this.setIsPressed(Bridge.referenceEquals(e.getMouseDevice().getCaptureTarget(), this) && System.Windows.Controls.Primitives.ButtonBase.isVisualChild(this, Bridge.as(e.getMouseDevice().getHitTarget(), System.Windows.Media.Visual)));
            }
        },
        onKeyDown: function (e) {
            if (e.getKey() === System.Windows.Input.Key.Space && !this.getIsPressed()) {
                this.setIsPressed(true);
                this.onPressStarted();

                if (this.getClickMode() === System.Windows.Controls.ClickMode.Press) {
                    e.setHandled(this.raiseClick());
                }
            }
        },
        onKeyUp: function (e) {
            if (e.getKey() === System.Windows.Input.Key.Space) {
                this.setIsPressed(false);
                this.onPressEnded();

                if (this.getClickMode() === System.Windows.Controls.ClickMode.Release) {
                    e.setHandled(this.raiseClick());
                }
            }
        },
        onGotFocus: function (e) {
            this.keyboardFocus = System.Windows.Input.Keyboard.focus(this);
        },
        onLostFocus: function (e) {
            if (this.keyboardFocus != null) {
                this.keyboardFocus.System$IDisposable$dispose();
                this.keyboardFocus = null;
            }
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsPressed()) {
                return System.Windows.Controls.VisualStates.PressedState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getFocusState: function () {
            return this.getIsFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        },
        onCommandChanged: function (oldValue, newValue) {
            if (oldValue != null) {
                oldValue.System$Windows$Input$ICommand$removeCanExecuteChanged(Bridge.fn.cacheBind(this, this.updateCommandStatus));
            }

            if (newValue != null) {
                newValue.System$Windows$Input$ICommand$addCanExecuteChanged(Bridge.fn.cacheBind(this, this.updateCommandStatus));
                this.updateCommandStatus(this, Object.empty);
            }
        },
        updateCommandStatus: function (sender, e) {
            this.setIsEnabled(this.getCommand().System$Windows$Input$ICommand$canExecute(this.getCommandParameter()));
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.ButtonBase", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.ButtonBase, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.ButtonBase).onClick(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.ButtonBase).onIsPressedChanged(e);
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.ButtonBase).onCommandChanged(Bridge.cast(e.getOldValue(), System.Windows.Input.ICommand), Bridge.cast(e.getNewValue(), System.Windows.Input.ICommand));
        }
    });

    Bridge.define("System.Windows.Controls.HeaderedContentControl", {
        inherits: [System.Windows.Controls.ContentControl],
        statics: {
            headerProperty: null,
            headerTemplateProperty: null,
            headerTemplateSelectorProperty: null,
            hasHeaderPropertyKey: null,
            hasHeaderProperty: null,
            config: {
                init: function () {
                    this.headerProperty = System.Windows.DependencyProperty.register("Header", Object, System.Windows.Controls.HeaderedContentControl, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.HeaderedContentControl.f1));
                    this.headerTemplateProperty = System.Windows.DependencyProperty.register("HeaderTemplate", System.Windows.DataTemplate, System.Windows.Controls.HeaderedContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.headerTemplateSelectorProperty = System.Windows.DependencyProperty.register("HeaderTemplateSelector", System.Windows.Controls.IDataTemplateSelector, System.Windows.Controls.HeaderedContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.hasHeaderPropertyKey = System.Windows.DependencyProperty.registerReadOnly("HasHeader", Boolean, System.Windows.Controls.HeaderedContentControl, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.hasHeaderProperty = System.Windows.Controls.HeaderedContentControl.hasHeaderPropertyKey.getDependencyProperty();
                }
            }
        },
        getHeader: function () {
            return this.getValue(System.Windows.Controls.HeaderedContentControl.headerProperty);
        },
        setHeader: function (value) {
            this.setValue(System.Windows.Controls.HeaderedContentControl.headerProperty, value);
        },
        getHeaderTemplate: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.HeaderedContentControl.headerTemplateProperty), System.Windows.DataTemplate);
        },
        setHeaderTemplate: function (value) {
            this.setValue(System.Windows.Controls.HeaderedContentControl.headerTemplateProperty, value);
        },
        getHeaderTemplateSelector: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.HeaderedContentControl.headerTemplateSelectorProperty), System.Windows.Controls.IDataTemplateSelector);
        },
        setHeaderTemplateSelector: function (value) {
            this.setValue(System.Windows.Controls.HeaderedContentControl.headerTemplateSelectorProperty, value);
        },
        getHasHeader: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.HeaderedContentControl.hasHeaderPropertyKey), Boolean));
        },
        setHasHeader: function (value) {
            this.setValue$1(System.Windows.Controls.HeaderedContentControl.hasHeaderPropertyKey, value);
        },
        onHeaderChanged: function (e) {
            this.setHasHeader(this.getHeader() != null);
            this.removeLogicalChild(e.getOldValue());
            this.addLogicalChild(e.getNewValue());
        }
    });

    Bridge.ns("System.Windows.Controls.HeaderedContentControl", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.HeaderedContentControl, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.HeaderedContentControl).onHeaderChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.Selector", {
        inherits: [System.Windows.Controls.ItemsControl],
        statics: {
            selectionChangedEvent: null,
            selectedEvent: null,
            unselectedEvent: null,
            isSynchronizedWithCurrentItemProperty: null,
            selectedIndexProperty: null,
            selectedItemProperty: null,
            selectedValueProperty: null,
            selectedValuePathProperty: null,
            isSelectedProperty: null,
            isSelectionActivePropertyKey: null,
            isSelectionActiveProperty: null,
            config: {
                init: function () {
                    this.selectionChangedEvent = System.Windows.EventManager.registerRoutedEvent("SelectionChanged", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Selector);
                    this.selectedEvent = System.Windows.EventManager.registerRoutedEvent("Selected", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Selector);
                    this.unselectedEvent = System.Windows.EventManager.registerRoutedEvent("Unselected", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.Selector);
                    this.isSynchronizedWithCurrentItemProperty = System.Windows.DependencyProperty.register("IsSynchronizedWithCurrentItem", System.Nullable$1(Boolean), System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.selectedIndexProperty = System.Windows.DependencyProperty.register("SelectedIndex", System.Int32, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Selector.f1));
                    this.selectedItemProperty = System.Windows.DependencyProperty.register("SelectedItem", Object, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Selector.f2));
                    this.selectedValueProperty = System.Windows.DependencyProperty.register("SelectedValue", Object, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.Selector.f3));
                    this.selectedValuePathProperty = System.Windows.DependencyProperty.register("SelectedValuePath", String, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isSelectedProperty = System.Windows.DependencyProperty.register("IsSelected", Boolean, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isSelectionActivePropertyKey = System.Windows.DependencyProperty.registerAttachedReadOnly("IsSelectionActive", Boolean, System.Windows.Controls.Primitives.Selector, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.isSelectionActiveProperty = System.Windows.Controls.Primitives.Selector.isSelectionActivePropertyKey.getDependencyProperty();
                }
            },
            getIsSelectionActive: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.Primitives.Selector.isSelectionActiveProperty), Boolean));
            },
            setIsSelectionActive: function (obj, value) {
                obj.setValue$1(System.Windows.Controls.Primitives.Selector.isSelectionActivePropertyKey, value);
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.ItemsControl.ctor.call(this);
            System.Windows.Controls.Primitives.Selector.setIsSelectionActive(this, false);
        },
        addSelectionChanged: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Selector.selectionChangedEvent, value);
        },
        removeSelectionChanged: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Selector.selectionChangedEvent, value);
        },
        addSelected: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Selector.selectedEvent, value);
        },
        removeSelected: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Selector.selectedEvent, value);
        },
        addUnselected: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.Selector.unselectedEvent, value);
        },
        removeUnselected: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.Selector.unselectedEvent, value);
        },
        getIsSynchronizedWithCurrentItem: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Selector.isSynchronizedWithCurrentItemProperty), Boolean, true);
        },
        setIsSynchronizedWithCurrentItem: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.isSynchronizedWithCurrentItemProperty, value);
        },
        getSelectedIndex: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Selector.selectedIndexProperty), System.Int32));
        },
        setSelectedIndex: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.selectedIndexProperty, value);
        },
        getSelectedItem: function () {
            return this.getValue(System.Windows.Controls.Primitives.Selector.selectedItemProperty);
        },
        setSelectedItem: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.selectedItemProperty, value);
        },
        getSelectedValue: function () {
            return this.getValue(System.Windows.Controls.Primitives.Selector.selectedValueProperty);
        },
        setSelectedValue: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.selectedValueProperty, value);
        },
        getSelectedValuePath: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Selector.selectedValuePathProperty), String);
        },
        setSelectedValuePath: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.selectedValuePathProperty, value);
        },
        getIsSelected: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty), Boolean));
        },
        setIsSelected: function (value) {
            this.setValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, value);
        },
        onGotFocus: function (e) {
            System.Windows.Controls.Primitives.Selector.setIsSelectionActive(this, true);
        },
        onLostFocus: function (e) {
            System.Windows.Controls.Primitives.Selector.setIsSelectionActive(this, false);
        },
        onSelectedIndexChanged: function (e) {
            //
        },
        onSelectedItemChanged: function (e) {
            if (e.getOldValue() != null) {
                this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$containerFromItem(e.getOldValue()).setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, false);
            }

            if (e.getNewValue() != null) {
                this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$containerFromItem(e.getNewValue()).setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, true);
            }
        },
        onSelectedValueChanged: function (e) {
            //
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.Selector", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.Selector, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Selector).onSelectedIndexChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Selector).onSelectedItemChanged(e);
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.Selector).onSelectedValueChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ListBoxItem", {
        inherits: [System.Windows.Controls.ContentControl],
        statics: {
            ctor: function () {
                System.Windows.UIElement.isEnabledProperty.overrideMetadata(System.Windows.Controls.ListBoxItem, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.UIElement.isMouseOverProperty.overrideMetadata(System.Windows.Controls.ListBoxItem, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState));
                System.Windows.Controls.Primitives.Selector.isSelectionActiveProperty.overrideMetadata(System.Windows.Controls.ListBoxItem, new System.Windows.FrameworkPropertyMetadata.$ctor8(2080));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ListBoxItem, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ListBoxItem)));
            },
            selectedEvent: null,
            unselectedEvent: null,
            isSelectedProperty: null,
            config: {
                init: function () {
                    this.selectedEvent = System.Windows.Controls.Primitives.Selector.selectedEvent.addOwner(System.Windows.Controls.ListBoxItem);
                    this.unselectedEvent = System.Windows.Controls.Primitives.Selector.unselectedEvent.addOwner(System.Windows.Controls.ListBoxItem);
                    this.isSelectedProperty = System.Windows.Controls.Primitives.Selector.isSelectedProperty.addOwner(System.Windows.Controls.ListBoxItem, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ListBoxItem.f1));
                }
            }
        },
        addSelected: function (value) {
            this.addHandler(System.Windows.Controls.ListBoxItem.selectedEvent, value);
        },
        removeSelected: function (value) {
            this.removeHandler(System.Windows.Controls.ListBoxItem.selectedEvent, value);
        },
        addUnselected: function (value) {
            this.addHandler(System.Windows.Controls.ListBoxItem.unselectedEvent, value);
        },
        removeUnselected: function (value) {
            this.removeHandler(System.Windows.Controls.ListBoxItem.unselectedEvent, value);
        },
        getIsSelected: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ListBoxItem.isSelectedProperty), Boolean));
        },
        setIsSelected: function (value) {
            this.setValue(System.Windows.Controls.ListBoxItem.isSelectedProperty, value);
        },
        onMouseDown: function (e) {
            this.focus();
        },
        onIsSelectedChanged: function (e) {
            this.raiseEvent(new System.Windows.RoutedEventArgs(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)) === true ? System.Windows.Controls.ListBoxItem.selectedEvent : System.Windows.Controls.ListBoxItem.unselectedEvent, this));
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getSelectionState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getFocusState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getSelectionState: function () {
            if (!this.getIsSelected()) {
                return System.Windows.Controls.VisualStates.UnselectedState;
            }

            if (!System.Windows.Controls.Primitives.Selector.getIsSelectionActive(this)) {
                return System.Windows.Controls.VisualStates.SelectedUnfocusedState;
            }

            return System.Windows.Controls.VisualStates.SelectedState;
        },
        getFocusState: function () {
            return this.getIsFocused() ? System.Windows.Controls.VisualStates.FocusedState : System.Windows.Controls.VisualStates.UnfocusedState;
        }
    });

    Bridge.ns("System.Windows.Controls.ListBoxItem", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ListBoxItem, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ListBoxItem).onIsSelectedChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ScrollBar", {
        inherits: [System.Windows.Controls.Primitives.RangeBase],
        statics: {
            ctor: function () {
                System.Windows.UIElement.focusableProperty.overrideMetadata(System.Windows.Controls.Primitives.ScrollBar, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Primitives.ScrollBar, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Primitives.ScrollBar)));
            },
            scrollEvent: null,
            orientationProperty: null,
            viewportSizeProperty: null,
            config: {
                init: function () {
                    this.scrollEvent = System.Windows.EventManager.registerRoutedEvent("Scroll", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.ScrollBar);
                    this.orientationProperty = System.Windows.DependencyProperty.register("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.Primitives.ScrollBar, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.viewportSizeProperty = System.Windows.DependencyProperty.register("ViewportSize", System.Double, System.Windows.Controls.Primitives.ScrollBar, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.Primitives.ScrollBar.f1));
                }
            }
        },
        snapBackThreshold: 150,
        thumb: null,
        track: null,
        decreasePageButton: null,
        increasePageButton: null,
        decreaseLineButton: null,
        increaseLineButton: null,
        dragInitialValue: 0,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Primitives.RangeBase.ctor.call(this);
            //
        },
        addScroll: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.ScrollBar.scrollEvent, value);
        },
        removeScroll: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.ScrollBar.scrollEvent, value);
        },
        getOrientation: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ScrollBar.orientationProperty), System.Int32));
        },
        setOrientation: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ScrollBar.orientationProperty, value);
        },
        getViewportSize: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ScrollBar.viewportSizeProperty), System.Double));
        },
        setViewportSize: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ScrollBar.viewportSizeProperty, value);
        },
        getThumb: function () {
            return this.thumb;
        },
        setThumb: function (value) {
            if (Bridge.referenceEquals(this.thumb, value)) {
                return;
            }

            if (this.thumb != null) {
                this.thumb.removeDragStarted(Bridge.fn.cacheBind(this, this.onThumbDragStarted));
                this.thumb.removeDragDelta(Bridge.fn.cacheBind(this, this.onThumbDragDelta));
                this.thumb.removeDragCompleted(Bridge.fn.cacheBind(this, this.onThumbDragCompleted));
            }

            this.thumb = value;

            if (this.thumb != null) {
                this.thumb.addDragStarted(Bridge.fn.cacheBind(this, this.onThumbDragStarted));
                this.thumb.addDragDelta(Bridge.fn.cacheBind(this, this.onThumbDragDelta));
                this.thumb.addDragCompleted(Bridge.fn.cacheBind(this, this.onThumbDragCompleted));
            }
        },
        getTrack: function () {
            return this.track;
        },
        setTrack: function (value) {
            this.track = value;

            if (this.track != null) {
                this.setThumb(this.track.getThumb());
                this.setDecreasePageButton(this.track.getDecreaseRepeatButton());
                this.setIncreasePageButton(this.track.getIncreaseRepeatButton());
            } else {
                this.setThumb(null);
                this.setDecreasePageButton(null);
                this.setIncreasePageButton(null);
            }
        },
        getDecreasePageButton: function () {
            return this.decreasePageButton;
        },
        setDecreasePageButton: function (value) {
            if (Bridge.referenceEquals(this.decreasePageButton, value)) {
                return;
            }

            if (this.decreasePageButton != null) {
                this.decreasePageButton.removeClick(Bridge.fn.cacheBind(this, this.onDecreasePageClicked));
            }

            this.decreasePageButton = value;

            if (this.decreasePageButton != null) {
                this.decreasePageButton.addClick(Bridge.fn.cacheBind(this, this.onDecreasePageClicked));
            }
        },
        getIncreasePageButton: function () {
            return this.increasePageButton;
        },
        setIncreasePageButton: function (value) {
            if (Bridge.referenceEquals(this.increasePageButton, value)) {
                return;
            }

            if (this.increasePageButton != null) {
                this.increasePageButton.removeClick(Bridge.fn.cacheBind(this, this.onIncreasePageClicked));
            }

            this.increasePageButton = value;

            if (this.increasePageButton != null) {
                this.increasePageButton.addClick(Bridge.fn.cacheBind(this, this.onIncreasePageClicked));
            }
        },
        getDecreaseLineButton: function () {
            return this.decreaseLineButton;
        },
        setDecreaseLineButton: function (value) {
            if (Bridge.referenceEquals(this.decreaseLineButton, value)) {
                return;
            }

            if (this.decreaseLineButton != null) {
                this.decreaseLineButton.removeClick(Bridge.fn.cacheBind(this, this.onDecreaseLineClicked));
            }

            this.decreaseLineButton = value;

            if (this.decreaseLineButton != null) {
                this.decreaseLineButton.addClick(Bridge.fn.cacheBind(this, this.onDecreaseLineClicked));
            }
        },
        getIncreaseLineButton: function () {
            return this.increaseLineButton;
        },
        setIncreaseLineButton: function (value) {
            if (Bridge.referenceEquals(this.increaseLineButton, value)) {
                return;
            }

            if (this.increaseLineButton != null) {
                this.increaseLineButton.removeClick(Bridge.fn.cacheBind(this, this.onIncreaseLineClicked));
            }

            this.increaseLineButton = value;

            if (this.increaseLineButton != null) {
                this.increaseLineButton.addClick(Bridge.fn.cacheBind(this, this.onIncreaseLineClicked));
            }
        },
        onApplyTemplate: function () {
            System.Windows.Controls.Primitives.RangeBase.prototype.onApplyTemplate.call(this);

            if (this.getTemplate$1() != null) {
                this.setDecreaseLineButton(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_DecreaseButton", this), System.Windows.Controls.Primitives.ButtonBase));
                this.setIncreaseLineButton(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_IncreaseButton", this), System.Windows.Controls.Primitives.ButtonBase));
                this.setTrack(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_Track", this), System.Windows.Controls.Primitives.Track));
            } else {
                this.setDecreaseLineButton(null);
                this.setIncreaseLineButton(null);
                this.setTrack(null);
            }
        },
        onDecreaseLineClicked: function (sender, e) {
            this.setValue$5(this.getValue$5()-this.getSmallChange());
            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement);
            e.setHandled(true);
        },
        onIncreaseLineClicked: function (sender, e) {
            this.setValue$5(this.getValue$5()+this.getSmallChange());
            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement);
            e.setHandled(true);
        },
        onDecreasePageClicked: function (sender, e) {
            this.setValue$5(this.getValue$5()-this.getLargeChange());
            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement);
            e.setHandled(true);
        },
        onIncreasePageClicked: function (sender, e) {
            this.setValue$5(this.getValue$5()+this.getLargeChange());
            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement);
            e.setHandled(true);
        },
        onThumbDragStarted: function (sender, e) {
            this.dragInitialValue = this.getValue$5();
            e.setHandled(true);
        },
        onThumbDragDelta: function (sender, e) {
            this.setValue$5(Math.abs(this.getCrossLength(e.getDelta())) > this.snapBackThreshold ? this.dragInitialValue : Granular.Extensions.DoubleExtensions.bounds((this.dragInitialValue + (this.getMaximum() - this.getMinimum()) * this.getMainLength(e.getDelta()) / (this.getMainLength$1(this.getTrack().getRenderSize()) - this.getMainLength$1(this.getThumb().getRenderSize()))), this.getMinimum(), this.getMaximum()));

            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack);
            e.setHandled(true);
        },
        onThumbDragCompleted: function (sender, e) {
            if (e.getIsCanceled()) {
                this.setValue$5(this.dragInitialValue);
            }

            this.raiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.EndScroll);
            e.setHandled(true);
        },
        onViewportSizeChanged: function (e) {
            this.setSmallChange(System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta);
            this.setLargeChange(Granular.Extensions.DoubleExtensions.max((this.getViewportSize() - System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta), System.Windows.Controls.Primitives.ScrollInfoExtensions.ScrollLineDelta));
        },
        getMainLength$1: function (size) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? size.getWidth() : size.getHeight();
        },
        getMainLength: function (point) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? point.getX() : point.getY();
        },
        getCrossLength: function (point) {
            return this.getOrientation() === System.Windows.Controls.Orientation.Horizontal ? point.getY() : point.getX();
        },
        raiseScrollEvent: function (scrollEventType) {
            this.raiseEvent(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollBar.scrollEvent, this, scrollEventType, this.getValue$5()));
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.ScrollBar", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.ScrollBar, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.ScrollBar).onViewportSizeChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ProgressBar", {
        inherits: [System.Windows.Controls.Primitives.RangeBase],
        statics: {
            ctor: function () {
                System.Windows.UIElement.focusableProperty.overrideMetadata(System.Windows.Controls.ProgressBar, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.Controls.Primitives.RangeBase.maximumProperty.overrideMetadata(System.Windows.Controls.ProgressBar, new System.Windows.FrameworkPropertyMetadata.$ctor1(100.0));
                System.Windows.Controls.Control.foregroundProperty.overrideMetadata(System.Windows.Controls.ProgressBar, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.Inherits, $asm.$.System.Windows.Controls.ProgressBar.f1));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ProgressBar, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ProgressBar)));
            },
            isIndeterminateProperty: null,
            config: {
                init: function () {
                    this.isIndeterminateProperty = System.Windows.DependencyProperty.register("IsIndeterminate", Boolean, System.Windows.Controls.ProgressBar, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.ProgressBar.f2));
                }
            }
        },
        track: null,
        indicator: null,
        glow: null,
        currentAnimatedIndicatorWidth: 0,
        currentAnimationClock: null,
        getIsIndeterminate: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ProgressBar.isIndeterminateProperty), Boolean));
        },
        setIsIndeterminate: function (value) {
            this.setValue(System.Windows.Controls.ProgressBar.isIndeterminateProperty, value);
        },
        getTrack: function () {
            return this.track;
        },
        setTrack: function (value) {
            if (Bridge.referenceEquals(this.track, value)) {
                return;
            }

            if (this.track != null) {
                this.track.removeLayoutUpdated(Bridge.fn.cacheBind(this, this.onTrackLayoutUpdated));
            }

            this.track = value;

            if (this.track != null) {
                this.track.addLayoutUpdated(Bridge.fn.cacheBind(this, this.onTrackLayoutUpdated));
            }
        },
        getIndicator: function () {
            return this.indicator;
        },
        setIndicator: function (value) {
            if (Bridge.referenceEquals(this.indicator, value)) {
                return;
            }

            if (this.indicator != null) {
                this.indicator.removeLayoutUpdated(Bridge.fn.cacheBind(this, this.onIndicatorLayoutUpdated));
            }

            this.indicator = value;

            if (this.indicator != null) {
                this.indicator.addLayoutUpdated(Bridge.fn.cacheBind(this, this.onIndicatorLayoutUpdated));
            }
        },
        onApplyTemplate: function () {
            System.Windows.Controls.Primitives.RangeBase.prototype.onApplyTemplate.call(this);

            if (this.getTemplate$1() != null) {
                this.setTrack(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_Track", this), System.Windows.FrameworkElement));
                this.setIndicator(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_Indicator", this), System.Windows.FrameworkElement));
                this.glow = Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_Glow", this), System.Windows.Controls.Border);
            } else {
                this.setTrack(null);
                this.setIndicator(null);
                this.glow = null;
            }

            this.setIndicatorSize();
            this.setGlowColor();
            this.setGlowAnimation();
        },
        onValueChanged: function (e) {
            this.setIndicatorSize();
        },
        onMinimumChanged: function (e) {
            this.setIndicatorSize();
        },
        onMaximumChanged: function (e) {
            this.setIndicatorSize();
        },
        onTrackLayoutUpdated: function (sender, e) {
            this.setIndicatorSize();
        },
        onIndicatorLayoutUpdated: function (sender, e) {
            this.setGlowAnimation();
        },
        onIsIndeterminateChanged: function (e) {
            this.setIndicatorSize();
            this.setGlowColor();
        },
        onForegroundChanged: function (e) {
            this.setGlowColor();
        },
        setIndicatorSize: function () {
            if (this.getTrack() == null || this.getIndicator() == null) {
                return;
            }

            var width = this.getIsIndeterminate() ? this.getTrack().getActualWidth() : this.getTrack().getActualWidth() * (this.getValue$5() - this.getMinimum()) / (this.getMaximum() - this.getMinimum());

            if (!Granular.Extensions.DoubleExtensions.isClose(this.getIndicator().getWidth(), width)) {
                this.getIndicator().setWidth(width);
            }
        },
        setGlowColor: function () {
            if (this.glow == null) {
                return;
            }

            if (this.getIsIndeterminate() && !(Bridge.is(this.getForeground(), System.Windows.Media.SolidColorBrush))) {
                this.glow.setBackground(this.getForeground());
            } else {
                var color = this.getIsIndeterminate() ? Bridge.cast(this.getForeground(), System.Windows.Media.SolidColorBrush).getColor() : System.Windows.Media.Color.fromArgb(128, 255, 255, 255);

                this.glow.setBackground(new System.Windows.Media.LinearGradientBrush.$ctor3(System.Windows.Point.zero, new System.Windows.Point.$ctor1(1, 0), System.Array.init([new System.Windows.Media.GradientStop.$ctor1(System.Windows.Media.Colors.getTransparent(), 0), new System.Windows.Media.GradientStop.$ctor1(color, 0.4), new System.Windows.Media.GradientStop.$ctor1(color, 0.6), new System.Windows.Media.GradientStop.$ctor1(System.Windows.Media.Colors.getTransparent(), 1)], System.Windows.Media.GradientStop)));
            }
        },
        setGlowAnimation: function () {
            if (this.getIndicator() == null || this.glow == null || Granular.Extensions.DoubleExtensions.isClose(this.getIndicator().getActualWidth(), this.currentAnimatedIndicatorWidth)) {
                return;
            }

            this.currentAnimatedIndicatorWidth = this.getIndicator().getActualWidth();

            var currentOffset = this.glow.getMargin().getLeft();

            if (this.currentAnimationClock != null) {
                Bridge.cast(this.glow, System.Windows.Media.Animation.IAnimatable).System$Windows$Media$Animation$IAnimatable$getRootClock().System$Windows$Media$Animation$IRootClock$removeClock(this.currentAnimationClock);
                this.currentAnimationClock = null;
            }

            if (this.getIndicator().getActualWidth() > 0) {
                var startOffset = -this.glow.getActualWidth();
                var endOffset = this.getIndicator().getActualWidth();

                var time = System.TimeSpan.fromSeconds((endOffset - startOffset) / 200);

                var thicknessAnimation = new System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames();

                thicknessAnimation.getKeyFrames().add(Bridge.merge(new System.Windows.Media.Animation.LinearThicknessKeyFrame(), {
                    setValue$5: new System.Windows.Thickness.$ctor3(startOffset, 0, 0, 0),
                    setKeyTime: System.Windows.Media.Animation.KeyTime.fromTimeSpan(System.TimeSpan.zero)
                } ));
                thicknessAnimation.getKeyFrames().add(Bridge.merge(new System.Windows.Media.Animation.LinearThicknessKeyFrame(), {
                    setValue$5: new System.Windows.Thickness.$ctor3(endOffset, 0, 0, 0),
                    setKeyTime: System.Windows.Media.Animation.KeyTime.fromTimeSpan(time)
                } ));

                thicknessAnimation.setDuration(new System.Windows.Duration.ctor(System.TimeSpan.add(time, System.TimeSpan.fromSeconds(1))));

                thicknessAnimation.setRepeatBehavior(System.Windows.Media.Animation.RepeatBehavior.forever);
                thicknessAnimation.setBeginTime(System.TimeSpan.neg(Granular.Extensions.TimeSpanExtensions.scale(time, (currentOffset - startOffset) / (endOffset - startOffset))));

                this.currentAnimationClock = Bridge.cast(thicknessAnimation.createClock(), System.Windows.Media.Animation.AnimationTimelineClock);

                System.Windows.Media.Animation.AnimatableExtensions.applyAnimationClock(this.glow, System.Windows.FrameworkElement.marginProperty, this.currentAnimationClock);
                this.currentAnimationClock.begin(Bridge.cast(this.glow, System.Windows.Media.Animation.IAnimatable).System$Windows$Media$Animation$IAnimatable$getRootClock());
            } else {
                System.Windows.Media.Animation.AnimatableExtensions.clearAnimationClocks(this.glow, System.Windows.FrameworkElement.marginProperty);
            }
        }
    });

    Bridge.ns("System.Windows.Controls.ProgressBar", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ProgressBar, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ProgressBar).onForegroundChanged(e);
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ProgressBar).onIsIndeterminateChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ScrollViewer", {
        inherits: [System.Windows.Controls.ContentControl],
        statics: {
            ctor: function () {
                System.Windows.Controls.Control.isTabStopProperty.overrideMetadata(System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ScrollViewer)));
            },
            scrollChangedEvent: null,
            canContentScrollProperty: null,
            computedHorizontalScrollBarVisibilityPropertyKey: null,
            computedHorizontalScrollBarVisibilityProperty: null,
            computedVerticalScrollBarVisibilityPropertyKey: null,
            computedVerticalScrollBarVisibilityProperty: null,
            computedScrollBarsVisibilityPropertyKey: null,
            computedScrollBarsVisibilityProperty: null,
            horizontalScrollBarVisibilityProperty: null,
            verticalScrollBarVisibilityProperty: null,
            horizontalOffsetProperty: null,
            verticalOffsetProperty: null,
            extentWidthPropertyKey: null,
            extentWidthProperty: null,
            extentHeightPropertyKey: null,
            extentHeightProperty: null,
            viewportWidthPropertyKey: null,
            viewportWidthProperty: null,
            viewportHeightPropertyKey: null,
            viewportHeightProperty: null,
            scrollableWidthPropertyKey: null,
            scrollableWidthProperty: null,
            scrollableHeightPropertyKey: null,
            scrollableHeightProperty: null,
            config: {
                init: function () {
                    this.scrollChangedEvent = System.Windows.EventManager.registerRoutedEvent("ScrollChanged", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.ScrollViewer);
                    this.canContentScrollProperty = System.Windows.DependencyProperty.registerAttached("CanContentScroll", Boolean, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.computedHorizontalScrollBarVisibilityPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ComputedHorizontalScrollBarVisibility", System.Windows.Visibility, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.computedHorizontalScrollBarVisibilityProperty = System.Windows.Controls.ScrollViewer.computedHorizontalScrollBarVisibilityPropertyKey.getDependencyProperty();
                    this.computedVerticalScrollBarVisibilityPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ComputedVerticalScrollBarVisibility", System.Windows.Visibility, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.computedVerticalScrollBarVisibilityProperty = System.Windows.Controls.ScrollViewer.computedVerticalScrollBarVisibilityPropertyKey.getDependencyProperty();
                    this.computedScrollBarsVisibilityPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ComputedScrollBarsVisibility", System.Windows.Visibility, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.computedScrollBarsVisibilityProperty = System.Windows.Controls.ScrollViewer.computedScrollBarsVisibilityPropertyKey.getDependencyProperty();
                    this.horizontalScrollBarVisibilityProperty = System.Windows.DependencyProperty.registerAttached("HorizontalScrollBarVisibility", System.Windows.Controls.ScrollBarVisibility, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Controls.ScrollBarVisibility.Visible, System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure, System.Windows.Controls.ScrollViewer.onScrollBarVisibilityChanged));
                    this.verticalScrollBarVisibilityProperty = System.Windows.DependencyProperty.registerAttached("VerticalScrollBarVisibility", System.Windows.Controls.ScrollBarVisibility, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor3(System.Windows.Controls.ScrollBarVisibility.Visible, System.Windows.FrameworkPropertyMetadataOptions.AffectsMeasure, System.Windows.Controls.ScrollViewer.onScrollBarVisibilityChanged));
                    this.horizontalOffsetProperty = System.Windows.DependencyProperty.register("HorizontalOffset", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange, $asm.$.System.Windows.Controls.ScrollViewer.f1));
                    this.verticalOffsetProperty = System.Windows.DependencyProperty.register("VerticalOffset", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsArrange, $asm.$.System.Windows.Controls.ScrollViewer.f1));
                    this.extentWidthPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ExtentWidth", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.extentWidthProperty = System.Windows.Controls.ScrollViewer.extentWidthPropertyKey.getDependencyProperty();
                    this.extentHeightPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ExtentHeight", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.extentHeightProperty = System.Windows.Controls.ScrollViewer.extentHeightPropertyKey.getDependencyProperty();
                    this.viewportWidthPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ViewportWidth", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.viewportWidthProperty = System.Windows.Controls.ScrollViewer.viewportWidthPropertyKey.getDependencyProperty();
                    this.viewportHeightPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ViewportHeight", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.viewportHeightProperty = System.Windows.Controls.ScrollViewer.viewportHeightPropertyKey.getDependencyProperty();
                    this.scrollableWidthPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ScrollableWidth", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.scrollableWidthProperty = System.Windows.Controls.ScrollViewer.scrollableWidthPropertyKey.getDependencyProperty();
                    this.scrollableHeightPropertyKey = System.Windows.DependencyProperty.registerReadOnly("ScrollableHeight", System.Double, System.Windows.Controls.ScrollViewer, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.scrollableHeightProperty = System.Windows.Controls.ScrollViewer.scrollableHeightPropertyKey.getDependencyProperty();
                }
            },
            getCanContentScroll: function (obj) {
                return System.Nullable.getValue(Bridge.cast(obj.getValue(System.Windows.Controls.ScrollViewer.canContentScrollProperty), Boolean));
            },
            setCanContentScroll: function (obj, value) {
                obj.setValue(System.Windows.Controls.ScrollViewer.canContentScrollProperty, value);
            },
            invalidateElementMeasurePath: function (root, element) {
                if (element == null) {
                    return;
                }

                while (!Bridge.referenceEquals(element, root)) {
                    element.invalidateMeasure();
                    element = Bridge.cast(element.getVisualParent(), System.Windows.UIElement);
                }
            },
            getScrollBarVisibility: function (scrollBarVisibility, isOverflowed) {
                switch (scrollBarVisibility) {
                    case System.Windows.Controls.ScrollBarVisibility.Disabled: 
                        return System.Windows.Visibility.Collapsed;
                    case System.Windows.Controls.ScrollBarVisibility.Auto: 
                        return isOverflowed ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
                    case System.Windows.Controls.ScrollBarVisibility.Hidden: 
                        return System.Windows.Visibility.Collapsed;
                    case System.Windows.Controls.ScrollBarVisibility.Visible: 
                        return System.Windows.Visibility.Visible;
                }

                throw new Granular.Exception("Unexpected ScrollBarVisibility \"{0}\"", [scrollBarVisibility]);
            },
            onScrollBarVisibilityChanged: function (dependencyObject, e) {
                if (Bridge.is(dependencyObject, System.Windows.Controls.ScrollViewer)) {
                    Bridge.cast(dependencyObject, System.Windows.Controls.ScrollViewer).setContentCanScroll();
                }
            }
        },
        horizontalScrollBar: null,
        verticalScrollBar: null,
        scrollContentPresenter: null,
        addScrollChanged: function (value) {
            this.addHandler(System.Windows.Controls.ScrollViewer.scrollChangedEvent, value);
        },
        removeScrollChanged: function (value) {
            this.removeHandler(System.Windows.Controls.ScrollViewer.scrollChangedEvent, value);
        },
        getComputedHorizontalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.computedHorizontalScrollBarVisibilityPropertyKey), System.Int32));
        },
        setComputedHorizontalScrollBarVisibility: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.computedHorizontalScrollBarVisibilityPropertyKey, value);
        },
        getComputedVerticalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.computedVerticalScrollBarVisibilityPropertyKey), System.Int32));
        },
        setComputedVerticalScrollBarVisibility: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.computedVerticalScrollBarVisibilityPropertyKey, value);
        },
        getComputedScrollBarsVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.computedScrollBarsVisibilityPropertyKey), System.Int32));
        },
        setComputedScrollBarsVisibility: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.computedScrollBarsVisibilityPropertyKey, value);
        },
        getHorizontalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ScrollViewer.horizontalScrollBarVisibilityProperty), System.Int32));
        },
        setHorizontalScrollBarVisibility: function (value) {
            this.setValue(System.Windows.Controls.ScrollViewer.horizontalScrollBarVisibilityProperty, value);
        },
        getVerticalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ScrollViewer.verticalScrollBarVisibilityProperty), System.Int32));
        },
        setVerticalScrollBarVisibility: function (value) {
            this.setValue(System.Windows.Controls.ScrollViewer.verticalScrollBarVisibilityProperty, value);
        },
        getHorizontalOffset: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ScrollViewer.horizontalOffsetProperty), System.Double));
        },
        setHorizontalOffset: function (value) {
            this.setValue(System.Windows.Controls.ScrollViewer.horizontalOffsetProperty, value);
        },
        getVerticalOffset: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ScrollViewer.verticalOffsetProperty), System.Double));
        },
        setVerticalOffset: function (value) {
            this.setValue(System.Windows.Controls.ScrollViewer.verticalOffsetProperty, value);
        },
        getExtentWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.extentWidthPropertyKey), System.Double));
        },
        setExtentWidth: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.extentWidthPropertyKey, value);
        },
        getExtentHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.extentHeightPropertyKey), System.Double));
        },
        setExtentHeight: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.extentHeightPropertyKey, value);
        },
        getViewportWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.viewportWidthPropertyKey), System.Double));
        },
        setViewportWidth: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.viewportWidthPropertyKey, value);
        },
        getViewportHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.viewportHeightPropertyKey), System.Double));
        },
        setViewportHeight: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.viewportHeightPropertyKey, value);
        },
        getScrollableWidth: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.scrollableWidthPropertyKey), System.Double));
        },
        setScrollableWidth: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.scrollableWidthPropertyKey, value);
        },
        getScrollableHeight: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue$1(System.Windows.Controls.ScrollViewer.scrollableHeightPropertyKey), System.Double));
        },
        setScrollableHeight: function (value) {
            this.setValue$1(System.Windows.Controls.ScrollViewer.scrollableHeightPropertyKey, value);
        },
        getHorizontalScrollBar: function () {
            return this.horizontalScrollBar;
        },
        setHorizontalScrollBar: function (value) {
            if (Bridge.referenceEquals(this.horizontalScrollBar, value)) {
                return;
            }

            if (this.horizontalScrollBar != null) {
                this.horizontalScrollBar.removeValueChanged(Bridge.fn.cacheBind(this, this.onScrollBarValueChanged));
            }

            this.horizontalScrollBar = value;

            if (this.horizontalScrollBar != null) {
                this.horizontalScrollBar.addValueChanged(Bridge.fn.cacheBind(this, this.onScrollBarValueChanged));
            }
        },
        getVerticalScrollBar: function () {
            return this.verticalScrollBar;
        },
        setVerticalScrollBar: function (value) {
            if (Bridge.referenceEquals(this.verticalScrollBar, value)) {
                return;
            }

            if (this.verticalScrollBar != null) {
                this.verticalScrollBar.removeValueChanged(Bridge.fn.cacheBind(this, this.onScrollBarValueChanged));
            }

            this.verticalScrollBar = value;

            if (this.verticalScrollBar != null) {
                this.verticalScrollBar.addValueChanged(Bridge.fn.cacheBind(this, this.onScrollBarValueChanged));
            }
        },
        onApplyTemplate: function () {
            System.Windows.Controls.ContentControl.prototype.onApplyTemplate.call(this);

            if (this.getTemplate$1() != null) {
                this.scrollContentPresenter = Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_ScrollContentPresenter", this), System.Windows.Controls.ScrollContentPresenter);
                this.setHorizontalScrollBar(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_HorizontalScrollBar", this), System.Windows.Controls.Primitives.ScrollBar));
                this.setVerticalScrollBar(Bridge.as(System.Windows.FrameworkTemplateExtensions.findName(this.getTemplate$1(), "PART_VerticalScrollBar", this), System.Windows.Controls.Primitives.ScrollBar));
            } else {
                this.scrollContentPresenter = null;
                this.setHorizontalScrollBar(null);
                this.setVerticalScrollBar(null);
            }

            this.setContentCanScroll();
            this.setScrollInfoSizes();
        },
        onScrollBarValueChanged: function (sender, e) {
            this.setHorizontalOffset(this.getHorizontalScrollBar().getValue$5());
            this.setVerticalOffset(this.getVerticalScrollBar().getValue$5());
        },
        onMouseWheel: function (e) {
            if (this.scrollContentPresenter != null) {
                this.setVerticalOffset(Granular.Extensions.DoubleExtensions.bounds((this.getVerticalOffset() - Bridge.Int.sign(e.getDelta()) * System.Windows.Controls.Primitives.ScrollInfoExtensions.MouseWheelDelta), 0, this.getScrollableHeight()));
                e.setHandled(true);
            }
        },
        setOffsets: function () {
            if (this.scrollContentPresenter != null) {
                this.scrollContentPresenter.setOffset(new System.Windows.Point.$ctor1(this.getHorizontalOffset(), this.getVerticalOffset()));
            }

            if (this.getHorizontalScrollBar() != null) {
                this.getHorizontalScrollBar().setValue$5(this.getHorizontalOffset());
            }

            if (this.getVerticalScrollBar() != null) {
                this.getVerticalScrollBar().setValue$5(this.getVerticalOffset());
            }
        },
        setContentCanScroll: function () {
            if (this.scrollContentPresenter != null) {
                this.scrollContentPresenter.setCanHorizontallyScroll(this.getHorizontalScrollBarVisibility() !== System.Windows.Controls.ScrollBarVisibility.Disabled);
                this.scrollContentPresenter.setCanVerticallyScroll(this.getVerticalScrollBarVisibility() !== System.Windows.Controls.ScrollBarVisibility.Disabled);
            }
        },
        setScrollInfoSizes: function () {
            if (this.scrollContentPresenter != null) {
                this.setExtentWidth(this.scrollContentPresenter.getExtentSize().getWidth());
                this.setExtentHeight(this.scrollContentPresenter.getExtentSize().getHeight());
                this.setViewportWidth(this.scrollContentPresenter.getViewportSize().getWidth());
                this.setViewportHeight(this.scrollContentPresenter.getViewportSize().getHeight());
            } else {
                this.setExtentWidth(0);
                this.setExtentHeight(0);
                this.setViewportWidth(0);
                this.setViewportHeight(0);
            }

            this.setScrollableWidth(Granular.Extensions.DoubleExtensions.max((this.getExtentWidth() - this.getViewportWidth()), 0));
            this.setScrollableHeight(Granular.Extensions.DoubleExtensions.max((this.getExtentHeight() - this.getViewportHeight()), 0));

            this.setHorizontalOffset(Granular.Extensions.DoubleExtensions.min(this.getHorizontalOffset(), this.getScrollableWidth()));
            this.setVerticalOffset(Granular.Extensions.DoubleExtensions.min(this.getVerticalOffset(), this.getScrollableHeight()));
        },
        measureOverride: function (availableSize) {
            if (this.getTemplateChild() == null) {
                return System.Windows.Size.zero;
            }

            this.setComputedHorizontalScrollBarVisibility(System.Windows.Controls.ScrollViewer.getScrollBarVisibility(this.getHorizontalScrollBarVisibility(), false));
            this.setComputedVerticalScrollBarVisibility(System.Windows.Controls.ScrollViewer.getScrollBarVisibility(this.getVerticalScrollBarVisibility(), false));
            this.setComputedScrollBarsVisibility(this.getComputedHorizontalScrollBarVisibility() === System.Windows.Visibility.Visible && this.getComputedVerticalScrollBarVisibility() === System.Windows.Visibility.Visible ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed);

            // 3 passes, each pass can cause an overflow (and add a scrollbar which invalidates the measure), starting with no overlaps
            for (var measurePass = 0; measurePass < 3; measurePass = (measurePass + 1) | 0) {
                // computed visibilities can invalidate the ScrollBars measure, invalidate their path so they will be re-measured through TemplateChild
                System.Windows.Controls.ScrollViewer.invalidateElementMeasurePath(this, this.getHorizontalScrollBar());
                System.Windows.Controls.ScrollViewer.invalidateElementMeasurePath(this, this.getVerticalScrollBar());

                this.getTemplateChild().measure(availableSize);

                var measuredHorizontalScrollBarVisibility = System.Windows.Controls.ScrollViewer.getScrollBarVisibility(this.getHorizontalScrollBarVisibility(), this.scrollContentPresenter != null && this.scrollContentPresenter.getViewportSize().getWidth() < this.scrollContentPresenter.getExtentSize().getWidth());
                var measuredVerticalScrollBarVisibility = System.Windows.Controls.ScrollViewer.getScrollBarVisibility(this.getVerticalScrollBarVisibility(), this.scrollContentPresenter != null && this.scrollContentPresenter.getViewportSize().getHeight() < this.scrollContentPresenter.getExtentSize().getHeight());

                if (this.getComputedHorizontalScrollBarVisibility() === measuredHorizontalScrollBarVisibility && this.getComputedVerticalScrollBarVisibility() === measuredVerticalScrollBarVisibility) {
                    break;
                }

                this.setComputedHorizontalScrollBarVisibility(measuredHorizontalScrollBarVisibility);
                this.setComputedVerticalScrollBarVisibility(measuredVerticalScrollBarVisibility);
                this.setComputedScrollBarsVisibility(this.getComputedHorizontalScrollBarVisibility() === System.Windows.Visibility.Visible && this.getComputedVerticalScrollBarVisibility() === System.Windows.Visibility.Visible ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed);
            }

            this.setScrollInfoSizes();

            return this.getTemplateChild().getDesiredSize();
        }
    });

    Bridge.ns("System.Windows.Controls.ScrollViewer", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ScrollViewer, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ScrollViewer).setOffsets();
        }
    });

    Bridge.define("System.Windows.Controls.TextBox", {
        inherits: [System.Windows.Controls.Primitives.TextBoxBase],
        statics: {
            ctor: function () {
                System.Windows.Controls.Primitives.TextBoxBase.acceptsReturnProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f1));
                System.Windows.Controls.Primitives.TextBoxBase.acceptsTabProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f2));
                System.Windows.Controls.Primitives.TextBoxBase.isReadOnlyProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f3));
                System.Windows.Controls.SpellCheck.isEnabledProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f4));
                System.Windows.FrameworkElement.cursorProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.Cursors.getIBeam()));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.TextBox)));
            },
            textProperty: null,
            caretIndexProperty: null,
            selectionStartProperty: null,
            selectionLengthProperty: null,
            maxLengthProperty: null,
            textAlignmentProperty: null,
            textWrappingProperty: null,
            horizontalScrollBarVisibilityProperty: null,
            verticalScrollBarVisibilityProperty: null,
            config: {
                init: function () {
                    this.textProperty = System.Windows.DependencyProperty.register("Text", String, System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f5));
                    this.caretIndexProperty = System.Windows.DependencyProperty.register("CaretIndex", System.Int32, System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f6));
                    this.selectionStartProperty = System.Windows.DependencyProperty.register("SelectionStart", System.Int32, System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f7));
                    this.selectionLengthProperty = System.Windows.DependencyProperty.register("SelectionLength", System.Int32, System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f8));
                    this.maxLengthProperty = System.Windows.DependencyProperty.register("MaxLength", System.Int32, System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.TextBox.f9));
                    this.textAlignmentProperty = System.Windows.Controls.TextBlock.textAlignmentProperty.addOwner(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.textWrappingProperty = System.Windows.Controls.TextBlock.textWrappingProperty.addOwner(System.Windows.Controls.TextBox, new System.Windows.FrameworkPropertyMetadata.$ctor8(System.Windows.FrameworkPropertyMetadataOptions.Inherits));
                    this.horizontalScrollBarVisibilityProperty = System.Windows.Controls.ScrollViewer.horizontalScrollBarVisibilityProperty.addOwner(System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Controls.ScrollBarVisibility.Hidden, $asm.$.System.Windows.Controls.TextBox.f10));
                    this.verticalScrollBarVisibilityProperty = System.Windows.Controls.ScrollViewer.verticalScrollBarVisibilityProperty.addOwner(System.Windows.Controls.Primitives.TextBoxBase, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Controls.ScrollBarVisibility.Hidden, $asm.$.System.Windows.Controls.TextBox.f11));
                }
            }
        },
        textBoxView: null,
        config: {
            properties: {
                LineCount: 0
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Primitives.TextBoxBase.ctor.call(this);
            this.textBoxView = new System.Windows.Controls.TextBoxView();
            this.textBoxView.setHorizontalScrollBarVisibility(this.getHorizontalScrollBarVisibility());
            this.textBoxView.setVerticalScrollBarVisibility(this.getVerticalScrollBarVisibility());
            this.textBoxView.setSpellCheck(System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.SpellCheck.isEnabledProperty), Boolean)));
            this.textBoxView.addTextChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBox.f12));
            this.textBoxView.addCaretIndexChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBox.f13));
            this.textBoxView.addSelectionStartChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBox.f14));
            this.textBoxView.addSelectionLengthChanged(Bridge.fn.bind(this, $asm.$.System.Windows.Controls.TextBox.f15));
        },
        getText: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.TextBox.textProperty), String);
        },
        setText: function (value) {
            this.setValue(System.Windows.Controls.TextBox.textProperty, value);
        },
        getCaretIndex: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.caretIndexProperty), System.Int32));
        },
        setCaretIndex: function (value) {
            this.setValue(System.Windows.Controls.TextBox.caretIndexProperty, value);
        },
        getSelectionStart: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.selectionStartProperty), System.Int32));
        },
        setSelectionStart: function (value) {
            this.setValue(System.Windows.Controls.TextBox.selectionStartProperty, value);
        },
        getSelectionLength: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.selectionLengthProperty), System.Int32));
        },
        setSelectionLength: function (value) {
            this.setValue(System.Windows.Controls.TextBox.selectionLengthProperty, value);
        },
        getMaxLength: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.maxLengthProperty), System.Int32));
        },
        setMaxLength: function (value) {
            this.setValue(System.Windows.Controls.TextBox.maxLengthProperty, value);
        },
        getTextAlignment: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.textAlignmentProperty), System.Int32));
        },
        setTextAlignment: function (value) {
            this.setValue(System.Windows.Controls.TextBox.textAlignmentProperty, value);
        },
        getTextWrapping: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.textWrappingProperty), System.Int32));
        },
        setTextWrapping: function (value) {
            this.setValue(System.Windows.Controls.TextBox.textWrappingProperty, value);
        },
        getHorizontalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.horizontalScrollBarVisibilityProperty), System.Int32));
        },
        setHorizontalScrollBarVisibility: function (value) {
            this.setValue(System.Windows.Controls.TextBox.horizontalScrollBarVisibilityProperty, value);
        },
        getVerticalScrollBarVisibility: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.TextBox.verticalScrollBarVisibilityProperty), System.Int32));
        },
        setVerticalScrollBarVisibility: function (value) {
            this.setValue(System.Windows.Controls.TextBox.verticalScrollBarVisibilityProperty, value);
        },
        getTextBoxContent: function () {
            return this.textBoxView;
        },
        clear: function () {
            this.setText("");
        },
        select: function (start, length) {
            this.textBoxView.setSelectionStart(start);
            this.textBoxView.setSelectionLength(length);
        },
        getCharacterIndexFromLineIndex: function (lineIndex) {
            return Granular.Extensions.StringExtensions.getCharacterIndexFromLineIndex(Granular.Extensions.StringExtensions.defaultIfNullOrEmpty(this.getText()), lineIndex);
        },
        getLineIndexFromCharacterIndex: function (charIndex) {
            return Granular.Extensions.StringExtensions.getLineIndexFromCharacterIndex(Granular.Extensions.StringExtensions.defaultIfNullOrEmpty(this.getText()), charIndex);
        },
        getLineLength: function (lineIndex) {
            return Granular.Extensions.StringExtensions.getLineLength(Granular.Extensions.StringExtensions.defaultIfNullOrEmpty(this.getText()), lineIndex);
        },
        getLineText: function (lineIndex) {
            return Granular.Extensions.StringExtensions.getLineText(Granular.Extensions.StringExtensions.defaultIfNullOrEmpty(this.getText()), lineIndex);
        },
        scrollToLine: function (lineIndex) {
            var characterIndex = this.getCharacterIndexFromLineIndex(lineIndex);

            if (characterIndex !== -1) {
                this.select(characterIndex, characterIndex);
            }
        },
        onTextChanged: function (e) {
            this.textBoxView.setText(this.getText());
            this.raiseEvent(new System.Windows.Controls.TextChangedEventArgs(System.Windows.Controls.Primitives.TextBoxBase.textChangedEvent, this));
        },
        onGotFocus: function (e) {
            this.textBoxView.focusRenderElement();
        },
        onLostFocus: function (e) {
            this.textBoxView.clearFocusRenderElement();
        },
        onKeyDown: function (e) {
            if (e.getKey() === System.Windows.Input.Key.Enter && !this.getAcceptsReturn() || e.getKey() === System.Windows.Input.Key.Tab && !this.getAcceptsTab()) {
                return;
            }

            this.textBoxView.processRenderElementKeyEvent(e);
        }
    });

    Bridge.ns("System.Windows.Controls.TextBox", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.TextBox, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setAcceptsReturn(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
        },
        f2: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setAcceptsTab(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
        },
        f3: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setIsReadOnly(Bridge.cast(sender, System.Windows.Controls.TextBox).getIsReadOnly());
        },
        f4: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setSpellCheck(System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean)));
        },
        f5: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).onTextChanged(e);
        },
        f6: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setCaretIndex(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f7: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setSelectionStart(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f8: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setSelectionLength(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f9: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setMaxLength(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f10: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setHorizontalScrollBarVisibility(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f11: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.TextBox).textBoxView.setVerticalScrollBarVisibility(System.Nullable.getValue(Bridge.cast(e.getNewValue(), System.Int32)));
        },
        f12: function (sender, e) {
            this.setText(this.textBoxView.getText());
        },
        f13: function (sender, e) {
            this.setCaretIndex(this.textBoxView.getCaretIndex());
        },
        f14: function (sender, e) {
            this.setSelectionStart(this.textBoxView.getSelectionStart());
        },
        f15: function (sender, e) {
            this.setSelectionLength(this.textBoxView.getSelectionLength());
        }
    });

    Bridge.define("System.Windows.Controls.UserControl", {
        inherits: [System.Windows.Controls.ContentControl],
        statics: {
            ctor: function () {
                System.Windows.Controls.Control.isTabStopProperty.overrideMetadata(System.Windows.Controls.UserControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.Controls.Control.horizontalContentAlignmentProperty.overrideMetadata(System.Windows.Controls.UserControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.HorizontalAlignment.Stretch));
                System.Windows.Controls.Control.verticalContentAlignmentProperty.overrideMetadata(System.Windows.Controls.UserControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.VerticalAlignment.Stretch));
                System.Windows.UIElement.focusableProperty.overrideMetadata(System.Windows.Controls.UserControl, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
            }
        }
    });

    Bridge.define("System.Windows.Window", {
        inherits: [System.Windows.Controls.ContentControl,System.Windows.Controls.IPopupLayerHost,System.Windows.Documents.IAdornerLayerHost,System.Windows.Controls.IRadioButtonGroupScope],
        statics: {
            ctor: function () {
                System.Windows.Controls.Control.isTabStopProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.Input.KeyboardNavigation.directionalNavigationProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Cycle));
                System.Windows.Input.KeyboardNavigation.tabNavigationProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Cycle));
                System.Windows.Input.KeyboardNavigation.controlTabNavigationProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Cycle));
                System.Windows.Input.FocusManager.isFocusScopeProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Window)));
            },
            titleProperty: null,
            config: {
                init: function () {
                    this.titleProperty = System.Windows.DependencyProperty.register("Title", String, System.Windows.Window, new System.Windows.FrameworkPropertyMetadata.$ctor6("", $asm.$.System.Windows.Window.f1));
                }
            }
        },
        presentationSource: null,
        keyboardNavigation: null,
        radioButtonGroupScope: null,
        config: {
            properties: {
                AdornerLayer: null,
                PopupLayer: null
            },
            alias: [
            "getAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$getAdornerLayer",
            "setAdornerLayer", "System$Windows$Documents$IAdornerLayerHost$setAdornerLayer",
            "getPopupLayer", "System$Windows$Controls$IPopupLayerHost$getPopupLayer",
            "setPopupLayer", "System$Windows$Controls$IPopupLayerHost$setPopupLayer",
            "getRadioButtonGroup", "System$Windows$Controls$IRadioButtonGroupScope$getRadioButtonGroup"
            ]
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.ContentControl.ctor.call(this);
            this.setResourceInheritanceParent(System.Windows.Application.getCurrent());

            this.setAdornerLayer(new System.Windows.Documents.AdornerLayer());
            this.addVisualChild(this.getAdornerLayer());

            this.setPopupLayer(new System.Windows.Controls.PopupLayer());
            this.addVisualChild(this.getPopupLayer());

            this.radioButtonGroupScope = new (System.Windows.Controls.SelectionGroupScope$1(System.Windows.Controls.RadioButton))();
        },
        getTitle: function () {
            return Bridge.cast(this.getValue(System.Windows.Window.titleProperty), String);
        },
        setTitle: function (value) {
            this.setValue(System.Windows.Window.titleProperty, value);
        },
        onTemplateChildChanged: function () {
            this.setVisualChildIndex(this.getAdornerLayer(), ((System.Linq.Enumerable.from(this.getVisualChildren()).count() - 2) | 0));
            this.setVisualChildIndex(this.getPopupLayer(), ((System.Linq.Enumerable.from(this.getVisualChildren()).count() - 1) | 0));
        },
        show: function () {
            if (this.presentationSource != null) {
                return;
            }

            if (System.Windows.Application.getCurrent().getMainWindow() == null) {
                System.Windows.Application.getCurrent().setMainWindow(this);
            }

            this.presentationSource = System.Windows.ApplicationHost.getCurrent().System$Windows$IApplicationHost$getPresentationSourceFactory().System$Windows$IPresentationSourceFactory$createPresentationSource(this);
            this.presentationSource.System$Windows$IPresentationSource$setTitle(this.getTitle());

            this.keyboardNavigation = new System.Windows.Input.KeyboardNavigation(this.presentationSource);
        },
        getRadioButtonGroup: function (groupName) {
            return this.radioButtonGroupScope.System$Windows$Controls$ISelectionGroupScope$1$System$Windows$Controls$RadioButton$getSelectionGroup(groupName);
        },
        measureOverride: function (availableSize) {
            this.getAdornerLayer().measure(availableSize);
            this.getPopupLayer().measure(availableSize);
            return System.Windows.Controls.ContentControl.prototype.measureOverride.call(this, availableSize);
        },
        arrangeOverride: function (finalSize) {
            this.getAdornerLayer().arrange(new System.Windows.Rect.$ctor3(finalSize));
            this.getPopupLayer().arrange(new System.Windows.Rect.$ctor3(finalSize));
            return System.Windows.Controls.ContentControl.prototype.arrangeOverride.call(this, finalSize);
        },
        onTitleChanged: function (e) {
            if (this.presentationSource != null) {
                this.presentationSource.System$Windows$IPresentationSource$setTitle(this.getTitle());
            }
        }
    });

    Bridge.ns("System.Windows.Window", $asm.$);

    Bridge.apply($asm.$.System.Windows.Window, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Window).onTitleChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Button", {
        inherits: [System.Windows.Controls.Primitives.ButtonBase],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Button, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Button)));
            }
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.ToggleButton", {
        inherits: [System.Windows.Controls.Primitives.ButtonBase],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Primitives.ToggleButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Primitives.ToggleButton)));
            },
            checkedEvent: null,
            uncheckedEvent: null,
            indeterminateEvent: null,
            isCheckedProperty: null,
            isThreeStateProperty: null,
            checkOnClickProperty: null,
            config: {
                init: function () {
                    this.checkedEvent = System.Windows.EventManager.registerRoutedEvent("Checked", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.ToggleButton);
                    this.uncheckedEvent = System.Windows.EventManager.registerRoutedEvent("Unchecked", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.ToggleButton);
                    this.indeterminateEvent = System.Windows.EventManager.registerRoutedEvent("Indeterminate", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Primitives.ToggleButton);
                    this.isCheckedProperty = System.Windows.DependencyProperty.register("IsChecked", System.Nullable$1(Boolean), System.Windows.Controls.Primitives.ToggleButton, new System.Windows.FrameworkPropertyMetadata.$ctor6(false, $asm.$.System.Windows.Controls.Primitives.ToggleButton.f1));
                    this.isThreeStateProperty = System.Windows.DependencyProperty.register("IsThreeState", Boolean, System.Windows.Controls.Primitives.ToggleButton, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.checkOnClickProperty = System.Windows.DependencyProperty.register("CheckOnClick", Boolean, System.Windows.Controls.Primitives.ToggleButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(true));
                }
            },
            getToggledState: function (currentState, isThreeState) {
                // false -> true [-> null] -> false

                if (System.Nullable.eq(currentState, false)) {
                    return true;
                }

                if (currentState == null || !isThreeState) {
                    return false;
                }

                return null;
            }
        },
        addChecked: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.ToggleButton.checkedEvent, value);
        },
        removeChecked: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.ToggleButton.checkedEvent, value);
        },
        addUnchecked: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.ToggleButton.uncheckedEvent, value);
        },
        removeUnchecked: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.ToggleButton.uncheckedEvent, value);
        },
        addIndeterminate: function (value) {
            this.addHandler(System.Windows.Controls.Primitives.ToggleButton.indeterminateEvent, value);
        },
        removeIndeterminate: function (value) {
            this.removeHandler(System.Windows.Controls.Primitives.ToggleButton.indeterminateEvent, value);
        },
        getIsChecked: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ToggleButton.isCheckedProperty), Boolean, true);
        },
        setIsChecked: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ToggleButton.isCheckedProperty, value);
        },
        getIsThreeState: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ToggleButton.isThreeStateProperty), Boolean));
        },
        setIsThreeState: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ToggleButton.isThreeStateProperty, value);
        },
        getCheckOnClick: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.ToggleButton.checkOnClickProperty), Boolean));
        },
        setCheckOnClick: function (value) {
            this.setValue(System.Windows.Controls.Primitives.ToggleButton.checkOnClickProperty, value);
        },
        onClick: function (e) {
            if (this.getCheckOnClick()) {
                this.toggleState();
            }
        },
        toggleState: function () {
            this.setCurrentValue(System.Windows.Controls.Primitives.ToggleButton.isCheckedProperty, System.Windows.Controls.Primitives.ToggleButton.getToggledState(this.getIsChecked(), this.getIsThreeState()));
        },
        onIsCheckedChanged: function (e) {
            if (System.Nullable.hasValue(this.getIsChecked()) && System.Nullable.getValue(this.getIsChecked())) {
                this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.Primitives.ToggleButton.checkedEvent, this));
            }

            if (System.Nullable.hasValue(this.getIsChecked()) && !System.Nullable.getValue(this.getIsChecked())) {
                this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.Primitives.ToggleButton.uncheckedEvent, this));
            }
        },
        updateVisualState: function (useTransitions) {
            System.Windows.Controls.Primitives.ButtonBase.prototype.updateVisualState.call(this, useTransitions);

            System.Windows.VisualStateManager.goToState(this, this.getCheckState(), useTransitions);
        },
        getCheckState: function () {
            if (System.Nullable.hasValue(this.getIsChecked())) {
                return System.Nullable.getValue(this.getIsChecked()) ? System.Windows.Controls.VisualStates.CheckedState : System.Windows.Controls.VisualStates.UncheckedState;
            }

            return System.Windows.Controls.VisualStates.IndeterminateState;
        }
    });

    Bridge.ns("System.Windows.Controls.Primitives.ToggleButton", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Primitives.ToggleButton, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Primitives.ToggleButton).onIsCheckedChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.Expander", {
        inherits: [System.Windows.Controls.HeaderedContentControl],
        statics: {
            ctor: function () {
                System.Windows.Controls.Control.isTabStopProperty.overrideMetadata(System.Windows.Controls.Expander, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Expander, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Expander)));
            },
            expandedEvent: null,
            collapsedEvent: null,
            expandDirectionProperty: null,
            isExpandedProperty: null,
            config: {
                init: function () {
                    this.expandedEvent = System.Windows.EventManager.registerRoutedEvent("Expanded", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Expander);
                    this.collapsedEvent = System.Windows.EventManager.registerRoutedEvent("Collapsed", System.Windows.RoutingStrategy.Bubble, Function, System.Windows.Controls.Expander);
                    this.expandDirectionProperty = System.Windows.DependencyProperty.register("ExpandDirection", System.Windows.Controls.ExpandDirection, System.Windows.Controls.Expander, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.isExpandedProperty = System.Windows.DependencyProperty.register("IsExpanded", Boolean, System.Windows.Controls.Expander, new System.Windows.FrameworkPropertyMetadata.$ctor9(System.Windows.FrameworkPropertyMetadataOptions.AffectsVisualState, $asm.$.System.Windows.Controls.Expander.f1));
                }
            }
        },
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.HeaderedContentControl.ctor.call(this);
            //
        },
        addExpanded: function (value) {
            this.addHandler(System.Windows.Controls.Expander.expandedEvent, value);
        },
        removeExpanded: function (value) {
            this.removeHandler(System.Windows.Controls.Expander.expandedEvent, value);
        },
        addCollapsed: function (value) {
            this.addHandler(System.Windows.Controls.Expander.collapsedEvent, value);
        },
        removeCollapsed: function (value) {
            this.removeHandler(System.Windows.Controls.Expander.collapsedEvent, value);
        },
        getExpandDirection: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Expander.expandDirectionProperty), System.Int32));
        },
        setExpandDirection: function (value) {
            this.setValue(System.Windows.Controls.Expander.expandDirectionProperty, value);
        },
        getIsExpanded: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Expander.isExpandedProperty), Boolean));
        },
        setIsExpanded: function (value) {
            this.setValue(System.Windows.Controls.Expander.isExpandedProperty, value);
        },
        onIsExpandedChanged: function (e) {
            if (System.Nullable.getValue(Bridge.cast(e.getNewValue(), Boolean))) {
                this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.Expander.expandedEvent, this));
            } else {
                this.raiseEvent(new System.Windows.RoutedEventArgs(System.Windows.Controls.Expander.collapsedEvent, this));
            }
        },
        updateVisualState: function (useTransitions) {
            System.Windows.VisualStateManager.goToState(this, this.getCommonState(), useTransitions);
            System.Windows.VisualStateManager.goToState(this, this.getExpansionState(), useTransitions);
        },
        getCommonState: function () {
            if (!this.getIsEnabled()) {
                return System.Windows.Controls.VisualStates.DisabledState;
            }

            if (this.getIsMouseOver()) {
                return System.Windows.Controls.VisualStates.MouseOverState;
            }

            return System.Windows.Controls.VisualStates.NormalState;
        },
        getExpansionState: function () {
            return this.getIsExpanded() ? System.Windows.Controls.VisualStates.ExpandedState : System.Windows.Controls.VisualStates.CollapsedState;
        }
    });

    Bridge.ns("System.Windows.Controls.Expander", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.Expander, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.Expander).onIsExpandedChanged(e);
        }
    });

    Bridge.define("System.Windows.Controls.ListBox", {
        inherits: [System.Windows.Controls.Primitives.Selector],
        statics: {
            ctor: function () {
                System.Windows.Controls.Control.isTabStopProperty.overrideMetadata(System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(false));
                System.Windows.Input.KeyboardNavigation.directionalNavigationProperty.overrideMetadata(System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Contained));
                System.Windows.Input.KeyboardNavigation.tabNavigationProperty.overrideMetadata(System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Input.KeyboardNavigationMode.Once));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.ListBox)));
            },
            selectedItemsPropertyKey: null,
            selectedItemsProperty: null,
            selectionModeProperty: null,
            config: {
                init: function () {
                    this.selectedItemsPropertyKey = System.Windows.DependencyProperty.registerReadOnly("SelectedItems", System.Collections.Generic.IEnumerable$1(Object), System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.selectedItemsProperty = System.Windows.Controls.ListBox.selectedItemsPropertyKey.getDependencyProperty();
                    this.selectionModeProperty = System.Windows.DependencyProperty.register("SelectionMode", System.Windows.Controls.SelectionMode, System.Windows.Controls.ListBox, new System.Windows.FrameworkPropertyMetadata.$ctor6(System.Windows.Controls.SelectionMode.Single, $asm.$.System.Windows.Controls.ListBox.f1));
                }
            },
            createSelectionBehavior: function (listBox, selectionMode) {
                switch (selectionMode) {
                    case System.Windows.Controls.SelectionMode.Single: 
                        return new System.Windows.Controls.ListBox.SingleSelectionBehavior(listBox);
                    case System.Windows.Controls.SelectionMode.Multiple: 
                        return new System.Windows.Controls.ListBox.MultipleSelectionBehavior(listBox);
                    case System.Windows.Controls.SelectionMode.Extended: 
                        return new System.Windows.Controls.ListBox.ExtendedSelectionBehavior(listBox);
                }

                throw new Granular.Exception("Unexpected SelectionMode \"{0}\"", [selectionMode]);
            }
        },
        selectionBehavior: null,
        selectionAnchor: null,
        isItemContainerBeingClicked: false,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Primitives.Selector.ctor.call(this);
            this.setSelectionBehavior();
        },
        getSelectedItems: function () {
            return Bridge.cast(this.getValue$1(System.Windows.Controls.ListBox.selectedItemsPropertyKey), System.Collections.Generic.IEnumerable$1(Object));
        },
        setSelectedItems: function (value) {
            this.setValue$1(System.Windows.Controls.ListBox.selectedItemsPropertyKey, value);
        },
        getSelectionMode: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.ListBox.selectionModeProperty), System.Int32));
        },
        setSelectionMode: function (value) {
            this.setValue(System.Windows.Controls.ListBox.selectionModeProperty, value);
        },
        isItemItsOwnContainerOverride: function (item) {
            return Bridge.is(item, System.Windows.Controls.ListBoxItem);
        },
        getContainerForItemOverride: function () {
            return new System.Windows.Controls.ListBoxItem();
        },
        onPrepareContainerForItem: function (item, container) {
            container.addPreviewMouseDown(Bridge.fn.cacheBind(this, this.onItemContainerPreviewMouseDown)); // handled too
            container.addMouseDown(Bridge.fn.cacheBind(this, this.onItemContainerMouseDown));
            container.addKeyDown(Bridge.fn.cacheBind(this, this.onItemContainerKeyDown));
            container.addGotKeyboardFocus(Bridge.fn.cacheBind(this, this.onItemContainerGotKeyboardFocus));
        },
        onClearContainerForItem: function (item, container) {
            container.removePreviewMouseDown(Bridge.fn.cacheBind(this, this.onItemContainerPreviewMouseDown)); // handled too
            container.removeMouseDown(Bridge.fn.cacheBind(this, this.onItemContainerMouseDown));
            container.removeKeyDown(Bridge.fn.cacheBind(this, this.onItemContainerKeyDown));
            container.removeGotKeyboardFocus(Bridge.fn.cacheBind(this, this.onItemContainerGotKeyboardFocus));
        },
        onItemContainerPreviewMouseDown: function (sender, e) {
            if (e.getChangedButton() === System.Windows.Input.MouseButton.Left || e.getChangedButton() === System.Windows.Input.MouseButton.Right) {
                this.isItemContainerBeingClicked = true;
            }
        },
        onItemContainerMouseDown: function (sender, e) {
            if (e.getChangedButton() === System.Windows.Input.MouseButton.Left || e.getChangedButton() === System.Windows.Input.MouseButton.Right) {
                this.selectionBehavior.System$Windows$Controls$ListBox$ISelectionBehavior$setClickSelection(Bridge.cast(sender, System.Windows.Controls.ListBoxItem), System.Windows.ApplicationHostExtensions.getKeyboardDeviceFromElement(System.Windows.ApplicationHost.getCurrent(), this).getModifiers());
                this.isItemContainerBeingClicked = false;
            }
        },
        onItemContainerKeyDown: function (sender, e) {
            if (e.getKey() === System.Windows.Input.Key.Space) {
                this.selectionBehavior.System$Windows$Controls$ListBox$ISelectionBehavior$setClickSelection(Bridge.cast(sender, System.Windows.Controls.ListBoxItem), e.getKeyboardDevice().getModifiers());
            }
        },
        onItemContainerGotKeyboardFocus: function (sender, e) {
            if (!this.isItemContainerBeingClicked) {
                this.selectionBehavior.System$Windows$Controls$ListBox$ISelectionBehavior$setFocusChangeSelection(Bridge.cast(sender, System.Windows.Controls.ListBoxItem), e.getKeyboardDevice().getModifiers());
            }
        },
        setSelectionBehavior: function () {
            this.selectionBehavior = System.Windows.Controls.ListBox.createSelectionBehavior(this, this.getSelectionMode());
        },
        setSelectionAnchor: function (item) {
            this.selectionAnchor = item;
        },
        setSingleSelection: function (item) {
            this.setSelectedItem(this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$itemFromContainer(item));

            for (var i = 0; i < this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount(); i = (i + 1) | 0) {
                var itemContainer = this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(i);
                itemContainer.setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, Bridge.referenceEquals(itemContainer, item));
            }
        },
        setRangeSelection: function (item) {
            var itemIndex = this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$indexFromContainer(item);
            var selectionAnchorIndex = this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$indexFromContainer(this.selectionAnchor);

            var rangeStartIndex = Granular.Extensions.IntExtensions.min(itemIndex, selectionAnchorIndex);
            var rangeEndIndex = Granular.Extensions.IntExtensions.max(itemIndex, selectionAnchorIndex);

            for (var i = 0; i < this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount(); i = (i + 1) | 0) {
                var itemContainer = this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(i);
                itemContainer.setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, rangeStartIndex <= i && i <= rangeEndIndex);
            }
        },
        toggleSelection: function (item) {
            item.setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, !System.Nullable.getValue(Bridge.cast(item.getValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty), Boolean)));
        },
        toggleSingleSelection: function (item) {
            var isSelected = !System.Nullable.getValue(Bridge.cast(item.getValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty), Boolean));

            this.setSelectedItem(isSelected ? this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$itemFromContainer(item) : null);

            for (var i = 0; i < this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$getItemsCount(); i = (i + 1) | 0) {
                var itemContainer = this.getItemContainerGenerator().System$Windows$Controls$Primitives$IItemContainerGenerator$generate(i);
                itemContainer.setCurrentValue(System.Windows.Controls.Primitives.Selector.isSelectedProperty, Bridge.referenceEquals(itemContainer, item) && isSelected);
            }
        }
    });

    Bridge.ns("System.Windows.Controls.ListBox", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.ListBox, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.ListBox).setSelectionBehavior();
        }
    });

    Bridge.define("System.Windows.Controls.Primitives.RepeatButton", {
        inherits: [System.Windows.Controls.Primitives.ButtonBase],
        statics: {
            ctor: function () {
                System.Windows.Controls.Primitives.ButtonBase.clickModeProperty.overrideMetadata(System.Windows.Controls.Primitives.RepeatButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(System.Windows.Controls.ClickMode.Press));
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.Primitives.RepeatButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.Primitives.RepeatButton)));
            },
            delayProperty: null,
            intervalProperty: null,
            config: {
                init: function () {
                    this.delayProperty = System.Windows.DependencyProperty.register("Delay", System.Int32, System.Windows.Controls.Primitives.RepeatButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(500));
                    this.intervalProperty = System.Windows.DependencyProperty.register("Interval", System.Int32, System.Windows.Controls.Primitives.RepeatButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(33));
                }
            }
        },
        timer: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Primitives.ButtonBase.ctor.call(this);
            this.timer = new System.Windows.Threading.DispatcherTimer.ctor();
            this.timer.addTick(Bridge.fn.cacheBind(this, this.onTimerTick));
        },
        getDelay: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RepeatButton.delayProperty), System.Int32));
        },
        setDelay: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RepeatButton.delayProperty, value);
        },
        getInterval: function () {
            return System.Nullable.getValue(Bridge.cast(this.getValue(System.Windows.Controls.Primitives.RepeatButton.intervalProperty), System.Int32));
        },
        setInterval: function (value) {
            this.setValue(System.Windows.Controls.Primitives.RepeatButton.intervalProperty, value);
        },
        onPressStarted: function () {
            this.timer.setInterval(System.TimeSpan.fromMilliseconds(this.getDelay() > 0 ? this.getDelay() : this.getInterval()));
            this.timer.start();
        },
        onPressEnded: function () {
            this.timer.stop();
        },
        onTimerTick: function (sender, e) {
            // the first interval can be different
            if (this.timer.getInterval().getTotalMilliseconds() !== this.getInterval()) {
                this.timer.stop();
                this.timer.setInterval(System.TimeSpan.fromMilliseconds(this.getInterval()));
                this.timer.start();
            }

            if (this.getIsPressed()) {
                this.raiseClick();
            }
        }
    });

    Bridge.define("System.Windows.Controls.CheckBox", {
        inherits: [System.Windows.Controls.Primitives.ToggleButton],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.CheckBox, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.CheckBox)));
            }
        }
    });

    Bridge.define("System.Windows.Controls.RadioButton", {
        inherits: [System.Windows.Controls.Primitives.ToggleButton],
        statics: {
            ctor: function () {
                System.Windows.FrameworkElement.defaultStyleKeyProperty.overrideMetadata(System.Windows.Controls.RadioButton, new System.Windows.FrameworkPropertyMetadata.$ctor1(new System.Windows.StyleKey(System.Windows.Controls.RadioButton)));
            },
            selectionGroupProperty: null,
            groupNameProperty: null,
            config: {
                init: function () {
                    this.selectionGroupProperty = System.Windows.DependencyProperty.registerAttached("SelectionGroup", System.Windows.Controls.ISelectionGroup$1(System.Windows.Controls.RadioButton), System.Windows.Controls.RadioButton, new System.Windows.FrameworkPropertyMetadata.ctor());
                    this.groupNameProperty = System.Windows.DependencyProperty.register("GroupName", String, System.Windows.Controls.RadioButton, new System.Windows.FrameworkPropertyMetadata.$ctor11($asm.$.System.Windows.Controls.RadioButton.f1));
                }
            },
            getSelectionGroupScope: function (visual) {
                while (visual != null) {
                    if (Bridge.is(visual, System.Windows.Controls.IRadioButtonGroupScope)) {
                        return Bridge.cast(visual, System.Windows.Controls.IRadioButtonGroupScope);
                    }

                    visual = visual.getVisualParent();
                }

                return null;
            }
        },
        currentGroup: null,
        ctor: function () {
            this.$initialize();
            System.Windows.Controls.Primitives.ToggleButton.ctor.call(this);
            //
        },
        getGroupName: function () {
            return Bridge.cast(this.getValue(System.Windows.Controls.RadioButton.groupNameProperty), String);
        },
        setGroupName: function (value) {
            this.setValue(System.Windows.Controls.RadioButton.groupNameProperty, value);
        },
        getCurrentGroup: function () {
            return this.currentGroup;
        },
        setCurrentGroup: function (value) {
            if (Bridge.referenceEquals(this.currentGroup, value)) {
                return;
            }

            if (this.currentGroup != null) {
                if (Bridge.referenceEquals(this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$getSelection(), this)) {
                    this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$setSelection(null);
                }

                this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$removeSelectionChanged(Bridge.fn.cacheBind(this, this.onCurrentSelectionGroupChanged));
            }

            this.currentGroup = value;

            if (this.currentGroup != null) {
                this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$addSelectionChanged(Bridge.fn.cacheBind(this, this.onCurrentSelectionGroupChanged));

                if (this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$getSelection() == null && System.Nullable.eq(this.getIsChecked(), true)) {
                    this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$setSelection(this);
                } else {
                    this.setIsChecked(Bridge.referenceEquals(this.currentGroup.System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$getSelection(), this));
                }
            }
        },
        toggleState: function () {
            this.setIsChecked(true);
        },
        onVisualAncestorChanged: function () {
            System.Windows.Controls.Primitives.ToggleButton.prototype.onVisualAncestorChanged.call(this);

            this.setCurrentGroup$1();
        },
        onGroupNameChanged: function (e) {
            this.setCurrentGroup$1();
        },
        setCurrentGroup$1: function () {
            this.setCurrentGroup(!Granular.Extensions.StringExtensions.isNullOrEmpty(this.getGroupName()) ? this.getGroup(this.getGroupName()) : this.getDefaultGroup());
        },
        onIsCheckedChanged: function (e) {
            System.Windows.Controls.Primitives.ToggleButton.prototype.onIsCheckedChanged.call(this, e);

            if (System.Nullable.eq(this.getIsChecked(), true) && this.getCurrentGroup() != null) {
                this.getCurrentGroup().System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$setSelection(this);
            }
        },
        onCurrentSelectionGroupChanged: function (sender, e) {
            this.setIsChecked(Bridge.referenceEquals(this.getCurrentGroup().System$Windows$Controls$ISelectionGroup$1$System$Windows$Controls$RadioButton$getSelection(), this));
        },
        getGroup: function (name) {
            var scope = System.Windows.Controls.RadioButton.getSelectionGroupScope(this);
            return scope != null ? scope.System$Windows$Controls$IRadioButtonGroupScope$getRadioButtonGroup(name) : null;
        },
        getDefaultGroup: function () {
            if (this.getLogicalParent() == null) {
                return null;
            }

            var group = Bridge.cast(this.getLogicalParent().getValue(System.Windows.Controls.RadioButton.selectionGroupProperty), System.Windows.Controls.ISelectionGroup$1(System.Windows.Controls.RadioButton));

            if (group == null) {
                group = new (System.Windows.Controls.SelectionGroup$1(System.Windows.Controls.RadioButton))();
                this.getLogicalParent().setValue(System.Windows.Controls.RadioButton.selectionGroupProperty, group);
            }

            return group;
        }
    });

    Bridge.ns("System.Windows.Controls.RadioButton", $asm.$);

    Bridge.apply($asm.$.System.Windows.Controls.RadioButton, {
        f1: function (sender, e) {
            Bridge.cast(sender, System.Windows.Controls.RadioButton).onGroupNameChanged(e);
        }
    });

    var $m = Bridge.setMetadata,
        $n = [System,System.Windows,System.Windows.Data,Granular.Collections,System.Windows.Input,System.Windows.Media,System.Collections.Generic,System.Reflection,System.Windows.Media.Animation,System.Collections.ObjectModel,System.Windows.Markup,System.Collections,System.Windows.Controls,System.Windows.Controls.Primitives,System.Windows.Documents,System.Windows.Media.Imaging];
    $m($n[1].CornerRadius, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.CornerRadiusTypeConverter)]}; });
    $m($n[2].ObservableValueChangedEventHandlerExtensions, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[1].DependencyProperty, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.DependencyPropertyTypeConverter)]}; });
    $m($n[1].DependencyPropertyChangedEventHandlerExtensions, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[1].IPropertyPathElement, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.PropertyPathElementTypeConverter)]}; });
    $m($n[1].DependencyPropertyValueEntryExtensions, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[1].Duration, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.DurationTypeConverter)]}; });
    $m($n[1].GridLength, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.GridLengthTypeConverter)]}; });
    $m($n[4].Cursor, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Input.CursorTypeConverter)]}; });
    $m($n[4].KeyEventHandlerExtensions, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[10].XmlnsDefinitionAttribute, function () { return {"am":true}; });
    $m($n[5].Color, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.ColorTypeConverter)]}; });
    $m($n[1].Rect, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.RectTypeConverter)]}; });
    $m($n[1].Thickness, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.ThicknessTypeConverter)]}; });
    $m($n[8].KeyTime, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.Animation.KeyTimeTypeConverter)]}; });
    $m($n[8].RepeatBehavior, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.Animation.RepeatBehaviorTypeConverter)]}; });
    $m($n[5].Matrix, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.MatrixTypeConverter)]}; });
    $m($n[1].PropertyPath, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.PropertyPathTypeConverter)]}; });
    $m($n[1].RoutedEvent, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.RoutedEventTypeConverter)]}; });
    $m($n[1].Size, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.SizeTypeConverter)]}; });
    $m($n[1].TemplatePartAttribute, function () { return {"am":true}; });
    $m($n[1].TemplateVisualStateAttribute, function () { return {"am":true}; });
    $m($n[2].ObservableValue, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[2].StaticObservableValue, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[1].DependencyPropertyValueEntry, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[10].MarkupExtensionParameterAttribute, function () { return {"am":true}; });
    $m($n[1].ReadOnlyDependencyPropertyValueEntry, function () { return {"at":[new System.Diagnostics.DebuggerNonUserCodeAttribute()]}; });
    $m($n[5].Transform, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.TransformTypeConverter)]}; });
    $m($n[5].Brush, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.BrushTypeConverter)]}; });
    $m($n[5].ImageSource, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.ImageSourceTypeConverter)]}; });
    $m($n[12].TextBlock, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Text")]}; });
    $m($n[14].Block, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("SiblingBlocks")]}; });
    $m($n[14].Inline, function () { return {"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Documents.InlineConverter)]}; });
    $m($n[5].GradientBrush, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("GradientStops")]}; });
    $m($n[12].ContentControl, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Content")]}; });
    $m($n[13].RangeBase, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Focused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Unfocused")]}; });
    $m($n[13].TextBoxBase, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Focused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Unfocused"),new System.Windows.TemplatePartAttribute.$ctor1("PART_ContentHost", System.Windows.Controls.Decorator)]}; });
    $m($n[13].Thumb, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Pressed"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Focused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Unfocused")]}; });
    $m($n[14].Paragraph, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Inlines")]}; });
    $m($n[14].Run, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Text")]}; });
    $m($n[1].MultiTrigger, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Setters")]}; });
    $m($n[13].ButtonBase, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Pressed"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Focused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Unfocused")]}; });
    $m($n[12].ListBoxItem, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("SelectionStates", "Selected"),new System.Windows.TemplateVisualStateAttribute.$ctor1("SelectionStates", "SelectedUnfocused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("SelectionStates", "Unselected"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Focused"),new System.Windows.TemplateVisualStateAttribute.$ctor1("FocusStates", "Unfocused")]}; });
    $m($n[13].ScrollBar, function () { return {"at":[new System.Windows.TemplatePartAttribute.$ctor1("PART_Track", System.Windows.Controls.Primitives.Track),new System.Windows.TemplatePartAttribute.$ctor1("PART_DecreaseButton", System.Windows.Controls.Primitives.ButtonBase),new System.Windows.TemplatePartAttribute.$ctor1("PART_IncreaseButton", System.Windows.Controls.Primitives.ButtonBase)]}; });
    $m($n[12].ProgressBar, function () { return {"at":[new System.Windows.TemplatePartAttribute.$ctor1("PART_Track", System.Windows.FrameworkElement),new System.Windows.TemplatePartAttribute.$ctor1("PART_Indicator", System.Windows.FrameworkElement),new System.Windows.TemplatePartAttribute.$ctor1("PART_Glow", System.Windows.Controls.Border)]}; });
    $m($n[12].ScrollViewer, function () { return {"at":[new System.Windows.TemplatePartAttribute.$ctor1("PART_HorizontalScrollBar", System.Windows.Controls.Primitives.ScrollBar),new System.Windows.TemplatePartAttribute.$ctor1("PART_VerticalScrollBar", System.Windows.Controls.Primitives.ScrollBar),new System.Windows.TemplatePartAttribute.$ctor1("PART_ScrollContentPresenter", System.Windows.Controls.ScrollContentPresenter)]}; });
    $m($n[12].TextBox, function () { return {"at":[new System.Windows.Markup.ContentPropertyAttribute("Text")]}; });
    $m($n[13].ToggleButton, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CheckStates", "Checked"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CheckStates", "Unchecked"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CheckStates", "Indeterminate")]}; });
    $m($n[12].Expander, function () { return {"at":[new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Normal"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "MouseOver"),new System.Windows.TemplateVisualStateAttribute.$ctor1("CommonStates", "Disabled"),new System.Windows.TemplateVisualStateAttribute.$ctor1("ExpansionStates", "Expanded"),new System.Windows.TemplateVisualStateAttribute.$ctor1("ExpansionStates", "Collapsed")]}; });
    $m($n[1].Application, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"BaseUri","t":16,"rt":$n[0].Uri,"g":{"a":2,"n":"get_BaseUri","t":8,"sn":"getBaseUri","rt":$n[0].Uri},"s":{"a":2,"n":"set_BaseUri","t":8,"pi":[{"n":"value","pt":$n[0].Uri,"ps":0}],"sn":"setBaseUri","rt":Object,"p":[$n[0].Uri]}},{"a":2,"n":"MainWindow","t":16,"rt":$n[1].Window,"g":{"a":2,"n":"get_MainWindow","t":8,"sn":"getMainWindow","rt":$n[1].Window},"s":{"a":2,"n":"set_MainWindow","t":8,"pi":[{"n":"value","pt":$n[1].Window,"ps":0}],"sn":"setMainWindow","rt":Object,"p":[$n[1].Window]}},{"a":2,"n":"Resources","t":16,"rt":$n[1].ResourceDictionary,"g":{"a":2,"n":"get_Resources","t":8,"sn":"getResources","rt":$n[1].ResourceDictionary},"s":{"a":2,"n":"set_Resources","t":8,"pi":[{"n":"value","pt":$n[1].ResourceDictionary,"ps":0}],"sn":"setResources","rt":Object,"p":[$n[1].ResourceDictionary]}},{"a":2,"n":"StartupUri","t":16,"rt":$n[0].Uri,"g":{"a":2,"n":"get_StartupUri","t":8,"sn":"getStartupUri","rt":$n[0].Uri},"s":{"a":2,"n":"set_StartupUri","t":8,"pi":[{"n":"value","pt":$n[0].Uri,"ps":0}],"sn":"setStartupUri","rt":Object,"p":[$n[0].Uri]}},{"a":2,"n":"LoadCompleted","t":2,"ad":{"a":2,"n":"add_LoadCompleted","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addLoadCompleted","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_LoadCompleted","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeLoadCompleted","rt":Object,"p":[Function]}},{"a":2,"n":"ResourcesChanged","t":2,"ad":{"a":2,"n":"add_ResourcesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addResourcesChanged","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_ResourcesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeResourcesChanged","rt":Object,"p":[Function]}},{"a":2,"n":"Startup","t":2,"ad":{"a":2,"n":"add_Startup","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addStartup","rt":Object,"p":[Function]},"r":{"a":2,"n":"remove_Startup","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeStartup","rt":Object,"p":[Function]}}]}; });
    $m($n[1].Condition, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"Binding","t":16,"rt":$n[2].Binding,"g":{"a":2,"n":"get_Binding","t":8,"sn":"getBinding","rt":$n[2].Binding},"s":{"a":2,"n":"set_Binding","t":8,"pi":[{"n":"value","pt":$n[2].Binding,"ps":0}],"sn":"setBinding","rt":Object,"p":[$n[2].Binding]}},{"a":2,"n":"Property","t":16,"rt":$n[1].IPropertyPathElement,"g":{"a":2,"n":"get_Property","t":8,"sn":"getProperty","rt":$n[1].IPropertyPathElement},"s":{"a":2,"n":"set_Property","t":8,"pi":[{"n":"value","pt":$n[1].IPropertyPathElement,"ps":0}],"sn":"setProperty","rt":Object,"p":[$n[1].IPropertyPathElement]}},{"a":2,"n":"SourceName","t":16,"rt":String,"g":{"a":2,"n":"get_SourceName","t":8,"sn":"getSourceName","rt":String},"s":{"a":2,"n":"set_SourceName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setSourceName","rt":Object,"p":[String]}},{"a":2,"n":"Value","t":16,"rt":Object,"g":{"a":2,"n":"get_Value","t":8,"sn":"getValue","rt":Object},"s":{"a":2,"n":"set_Value","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setValue","rt":Object,"p":[Object]}}]}; });
    $m($n[1].DataTemplate, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.DictionaryKeyPropertyAttribute("Key"),new System.Windows.Markup.DeferredValueKeyProviderAttribute(System.Windows.DataTemplateKeyProvider)],"m":[{"a":2,"n":"DataType","t":16,"rt":Function,"g":{"a":2,"n":"get_DataType","t":8,"sn":"getDataType","rt":Function},"s":{"a":2,"n":"set_DataType","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setDataType","rt":Object,"p":[Function]}},{"a":2,"n":"Key","t":16,"rt":Object,"g":{"a":2,"n":"get_Key","t":8,"sn":"getKey","rt":Object},"s":{"a":2,"n":"set_Key","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setKey","rt":Object,"p":[Object]}}]}; });
    $m($n[1].DataTrigger, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Setters")],"m":[{"a":2,"n":"Binding","t":16,"rt":$n[2].Binding,"g":{"a":2,"n":"get_Binding","t":8,"sn":"getBinding","rt":$n[2].Binding},"s":{"a":2,"n":"set_Binding","t":8,"pi":[{"n":"value","pt":$n[2].Binding,"ps":0}],"sn":"setBinding","rt":Object,"p":[$n[2].Binding]}},{"a":2,"n":"Setters","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"g":{"a":2,"n":"get_Setters","t":8,"sn":"getSetters","rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction)},"s":{"a":1,"n":"set_Setters","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"ps":0}],"sn":"setSetters","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITriggerAction)]}},{"a":2,"n":"Value","t":16,"rt":Object,"g":{"a":2,"n":"get_Value","t":8,"sn":"getValue$5","rt":Object},"s":{"a":2,"n":"set_Value","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setValue$5","rt":Object,"p":[Object]}}]}; });
    $m($n[1].DynamicResourceExtension, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("ResourceKey", 0)],"m":[{"a":2,"n":"ResourceKey","t":16,"rt":Object,"g":{"a":2,"n":"get_ResourceKey","t":8,"sn":"getResourceKey","rt":Object},"s":{"a":2,"n":"set_ResourceKey","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setResourceKey","rt":Object,"p":[Object]}}]}; });
    $m($n[1].EventSetter, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"Event","t":16,"rt":$n[1].RoutedEvent,"g":{"a":2,"n":"get_Event","t":8,"sn":"getEvent","rt":$n[1].RoutedEvent},"s":{"a":2,"n":"set_Event","t":8,"pi":[{"n":"value","pt":$n[1].RoutedEvent,"ps":0}],"sn":"setEvent","rt":Object,"p":[$n[1].RoutedEvent]}},{"a":2,"n":"HandledEventsToo","t":16,"rt":Boolean,"g":{"a":2,"n":"get_HandledEventsToo","t":8,"sn":"getHandledEventsToo","rt":Boolean},"s":{"a":2,"n":"set_HandledEventsToo","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setHandledEventsToo","rt":Object,"p":[Boolean]}},{"a":2,"n":"Handler","t":16,"rt":Function,"g":{"a":2,"n":"get_Handler","t":8,"sn":"getHandler","rt":Function},"s":{"a":2,"n":"set_Handler","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setHandler","rt":Object,"p":[Function]}}]}; });
    $m($n[1].EventTrigger, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Actions")],"m":[{"a":2,"n":"Actions","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"g":{"a":2,"n":"get_Actions","t":8,"sn":"getActions","rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction)},"s":{"a":1,"n":"set_Actions","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"ps":0}],"sn":"setActions","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITriggerAction)]}},{"a":2,"n":"RoutedEvent","t":16,"rt":$n[1].RoutedEvent,"g":{"a":2,"n":"get_RoutedEvent","t":8,"sn":"getRoutedEvent","rt":$n[1].RoutedEvent},"s":{"a":2,"n":"set_RoutedEvent","t":8,"pi":[{"n":"value","pt":$n[1].RoutedEvent,"ps":0}],"sn":"setRoutedEvent","rt":Object,"p":[$n[1].RoutedEvent]}},{"a":2,"n":"SourceName","t":16,"rt":String,"g":{"a":2,"n":"get_SourceName","t":8,"sn":"getSourceName","rt":String},"s":{"a":2,"n":"set_SourceName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setSourceName","rt":Object,"p":[String]}}]}; });
    $m($n[1].FrameworkElement, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.RuntimeNamePropertyAttribute("Name")],"m":[{"a":2,"n":"ActualHeight","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_ActualHeight","t":8,"sn":"getActualHeight","rt":$n[0].Double},"s":{"a":1,"n":"set_ActualHeight","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setActualHeight","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"ActualSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_ActualSize","t":8,"sn":"getActualSize","rt":$n[1].Size},"s":{"a":1,"n":"set_ActualSize","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setActualSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"ActualWidth","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_ActualWidth","t":8,"sn":"getActualWidth","rt":$n[0].Double},"s":{"a":1,"n":"set_ActualWidth","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setActualWidth","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Cursor","t":16,"rt":$n[4].Cursor,"g":{"a":2,"n":"get_Cursor","t":8,"sn":"getCursor","rt":$n[4].Cursor},"s":{"a":2,"n":"set_Cursor","t":8,"pi":[{"n":"value","pt":$n[4].Cursor,"ps":0}],"sn":"setCursor","rt":Object,"p":[$n[4].Cursor]}},{"a":2,"n":"DataContext","t":16,"rt":Object,"g":{"a":2,"n":"get_DataContext","t":8,"sn":"getDataContext","rt":Object},"s":{"a":2,"n":"set_DataContext","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setDataContext","rt":Object,"p":[Object]}},{"a":2,"n":"DefaultStyleKey","t":16,"rt":Object,"g":{"a":2,"n":"get_DefaultStyleKey","t":8,"sn":"getDefaultStyleKey","rt":Object},"s":{"a":2,"n":"set_DefaultStyleKey","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setDefaultStyleKey","rt":Object,"p":[Object]}},{"a":2,"n":"FocusVisualStyle","t":16,"rt":$n[1].Style,"g":{"a":2,"n":"get_FocusVisualStyle","t":8,"sn":"getFocusVisualStyle","rt":$n[1].Style},"s":{"a":2,"n":"set_FocusVisualStyle","t":8,"pi":[{"n":"value","pt":$n[1].Style,"ps":0}],"sn":"setFocusVisualStyle","rt":Object,"p":[$n[1].Style]}},{"a":2,"n":"ForceCursor","t":16,"rt":Boolean,"g":{"a":2,"n":"get_ForceCursor","t":8,"sn":"getForceCursor","rt":Boolean},"s":{"a":2,"n":"set_ForceCursor","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setForceCursor","rt":Object,"p":[Boolean]}},{"a":2,"n":"Height","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Height","t":8,"sn":"getHeight","rt":$n[0].Double},"s":{"a":2,"n":"set_Height","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setHeight","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"HorizontalAlignment","t":16,"rt":$n[1].HorizontalAlignment,"g":{"a":2,"n":"get_HorizontalAlignment","t":8,"sn":"getHorizontalAlignment","rt":$n[1].HorizontalAlignment},"s":{"a":2,"n":"set_HorizontalAlignment","t":8,"pi":[{"n":"value","pt":$n[1].HorizontalAlignment,"ps":0}],"sn":"setHorizontalAlignment","rt":Object,"p":[$n[1].HorizontalAlignment]}},{"a":2,"n":"IsInitialized","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsInitialized","t":8,"sn":"getIsInitialized","rt":Boolean},"s":{"a":1,"n":"set_IsInitialized","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsInitialized","rt":Object,"p":[Boolean]}},{"a":2,"n":"LayoutTransform","t":16,"rt":$n[5].Transform,"g":{"a":2,"n":"get_LayoutTransform","t":8,"sn":"getLayoutTransform","rt":$n[5].Transform},"s":{"a":2,"n":"set_LayoutTransform","t":8,"pi":[{"n":"value","pt":$n[5].Transform,"ps":0}],"sn":"setLayoutTransform","rt":Object,"p":[$n[5].Transform]}},{"a":2,"n":"Margin","t":16,"rt":$n[1].Thickness,"g":{"a":2,"n":"get_Margin","t":8,"sn":"getMargin","rt":$n[1].Thickness},"s":{"a":2,"n":"set_Margin","t":8,"pi":[{"n":"value","pt":$n[1].Thickness,"ps":0}],"sn":"setMargin","rt":Object,"p":[$n[1].Thickness]}},{"a":2,"n":"MaxHeight","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_MaxHeight","t":8,"sn":"getMaxHeight","rt":$n[0].Double},"s":{"a":2,"n":"set_MaxHeight","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMaxHeight","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"MaxSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_MaxSize","t":8,"sn":"getMaxSize","rt":$n[1].Size},"s":{"a":1,"n":"set_MaxSize","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setMaxSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"MaxWidth","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_MaxWidth","t":8,"sn":"getMaxWidth","rt":$n[0].Double},"s":{"a":2,"n":"set_MaxWidth","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMaxWidth","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"MinHeight","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_MinHeight","t":8,"sn":"getMinHeight","rt":$n[0].Double},"s":{"a":2,"n":"set_MinHeight","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMinHeight","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"MinSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_MinSize","t":8,"sn":"getMinSize","rt":$n[1].Size},"s":{"a":1,"n":"set_MinSize","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setMinSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"MinWidth","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_MinWidth","t":8,"sn":"getMinWidth","rt":$n[0].Double},"s":{"a":2,"n":"set_MinWidth","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMinWidth","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Name","t":16,"rt":String,"g":{"a":2,"n":"get_Name","t":8,"sn":"getName","rt":String},"s":{"a":2,"n":"set_Name","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setName","rt":Object,"p":[String]}},{"a":2,"n":"Resources","t":16,"rt":$n[1].ResourceDictionary,"g":{"a":2,"n":"get_Resources","t":8,"sn":"getResources","rt":$n[1].ResourceDictionary},"s":{"a":2,"n":"set_Resources","t":8,"pi":[{"n":"value","pt":$n[1].ResourceDictionary,"ps":0}],"sn":"setResources","rt":Object,"p":[$n[1].ResourceDictionary]}},{"a":2,"n":"Size","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_Size","t":8,"sn":"getSize","rt":$n[1].Size},"s":{"a":1,"n":"set_Size","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"Style","t":16,"rt":$n[1].Style,"g":{"a":2,"n":"get_Style","t":8,"sn":"getStyle","rt":$n[1].Style},"s":{"a":2,"n":"set_Style","t":8,"pi":[{"n":"value","pt":$n[1].Style,"ps":0}],"sn":"setStyle","rt":Object,"p":[$n[1].Style]}},{"a":2,"n":"TemplateChild","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_TemplateChild","t":8,"sn":"getTemplateChild","rt":$n[1].UIElement},"s":{"a":2,"n":"set_TemplateChild","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setTemplateChild","rt":Object,"p":[$n[1].UIElement]}},{"a":2,"n":"TemplatedParent","t":16,"rt":$n[1].FrameworkElement,"g":{"a":2,"n":"get_TemplatedParent","t":8,"sn":"getTemplatedParent","rt":$n[1].FrameworkElement},"s":{"a":4,"n":"set_TemplatedParent","t":8,"pi":[{"n":"value","pt":$n[1].FrameworkElement,"ps":0}],"sn":"setTemplatedParent","rt":Object,"p":[$n[1].FrameworkElement]}},{"a":2,"n":"Triggers","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"g":{"a":2,"n":"get_Triggers","t":8,"sn":"getTriggers","rt":$n[3].ObservableCollection$1(System.Windows.ITrigger)},"s":{"a":1,"n":"set_Triggers","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"ps":0}],"sn":"setTriggers","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITrigger)]}},{"a":2,"n":"VerticalAlignment","t":16,"rt":$n[1].VerticalAlignment,"g":{"a":2,"n":"get_VerticalAlignment","t":8,"sn":"getVerticalAlignment","rt":$n[1].VerticalAlignment},"s":{"a":2,"n":"set_VerticalAlignment","t":8,"pi":[{"n":"value","pt":$n[1].VerticalAlignment,"ps":0}],"sn":"setVerticalAlignment","rt":Object,"p":[$n[1].VerticalAlignment]}},{"a":2,"n":"Width","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Width","t":8,"sn":"getWidth","rt":$n[0].Double},"s":{"a":2,"n":"set_Width","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setWidth","rt":Object,"p":[$n[0].Double]}}]}; });
    $m($n[1].FrameworkTemplate, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("FrameworkElementFactory")],"m":[{"a":2,"n":"FrameworkElementFactory","t":16,"rt":$n[1].IFrameworkElementFactory,"g":{"a":2,"n":"get_FrameworkElementFactory","t":8,"sn":"getFrameworkElementFactory","rt":$n[1].IFrameworkElementFactory},"s":{"a":2,"n":"set_FrameworkElementFactory","t":8,"pi":[{"n":"value","pt":$n[1].IFrameworkElementFactory,"ps":0}],"sn":"setFrameworkElementFactory","rt":Object,"p":[$n[1].IFrameworkElementFactory]}},{"a":2,"n":"Triggers","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"g":{"a":2,"n":"get_Triggers","t":8,"sn":"getTriggers","rt":$n[3].ObservableCollection$1(System.Windows.ITrigger)},"s":{"a":1,"n":"set_Triggers","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"ps":0}],"sn":"setTriggers","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITrigger)]}}]}; });
    $m($n[1].MultiDataTriggerBase, function () { return {"att":1048705,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Setters")],"m":[{"a":2,"n":"Conditions","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.Condition),"g":{"a":2,"n":"get_Conditions","t":8,"sn":"getConditions","rt":$n[3].ObservableCollection$1(System.Windows.Condition)},"s":{"a":1,"n":"set_Conditions","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.Condition),"ps":0}],"sn":"setConditions","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.Condition)]}},{"a":2,"n":"Setters","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"g":{"a":2,"n":"get_Setters","t":8,"sn":"getSetters","rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction)},"s":{"a":1,"n":"set_Setters","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"ps":0}],"sn":"setSetters","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITriggerAction)]}}]}; });
    $m($n[1].Point, function () { return {"att":1048833,"a":2,"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.PointTypeConverter)],"m":[{"a":2,"n":"IsEmpty","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsEmpty","t":8,"sn":"getIsEmpty","rt":Boolean},"s":{"a":1,"n":"set_IsEmpty","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsEmpty","rt":Object,"p":[Boolean]}},{"a":2,"n":"X","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_X","t":8,"sn":"getX","rt":$n[0].Double},"s":{"a":1,"n":"set_X","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setX","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Y","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Y","t":8,"sn":"getY","rt":$n[0].Double},"s":{"a":1,"n":"set_Y","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setY","rt":Object,"p":[$n[0].Double]}}]}; });
    $m($n[1].ResourceDictionary, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.SupportsValueProviderAttribute()],"m":[{"a":2,"n":"BaseUri","t":16,"rt":$n[0].Uri,"g":{"a":2,"n":"get_BaseUri","t":8,"sn":"getBaseUri","rt":$n[0].Uri},"s":{"a":2,"n":"set_BaseUri","t":8,"pi":[{"n":"value","pt":$n[0].Uri,"ps":0}],"sn":"setBaseUri","rt":Object,"p":[$n[0].Uri]}},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"sn":"getCount","rt":$n[0].Int32}},{"a":2,"n":"IsEmpty","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsEmpty","t":8,"sn":"getIsEmpty","rt":Boolean}},{"a":2,"n":"IsReadOnly","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"sn":"getIsReadOnly","rt":Boolean}},{"a":2,"n":"Keys","t":16,"rt":$n[6].ICollection$1(Object),"g":{"a":2,"n":"get_Keys","t":8,"sn":"getKeys","rt":$n[6].ICollection$1(Object)}},{"a":2,"n":"MergedDictionaries","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ResourceDictionary),"g":{"a":2,"n":"get_MergedDictionaries","t":8,"sn":"getMergedDictionaries","rt":$n[3].ObservableCollection$1(System.Windows.ResourceDictionary)},"s":{"a":1,"n":"set_MergedDictionaries","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ResourceDictionary),"ps":0}],"sn":"setMergedDictionaries","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ResourceDictionary)]}},{"a":2,"n":"Source","t":16,"rt":$n[0].Uri,"g":{"a":2,"n":"get_Source","t":8,"sn":"getSource","rt":$n[0].Uri},"s":{"a":2,"n":"set_Source","t":8,"pi":[{"n":"value","pt":$n[0].Uri,"ps":0}],"sn":"setSource","rt":Object,"p":[$n[0].Uri]}},{"a":2,"n":"Values","t":16,"rt":$n[6].ICollection$1(Object),"g":{"a":2,"n":"get_Values","t":8,"sn":"getValues","rt":$n[6].ICollection$1(Object)}}]}; });
    $m($n[1].ComponentResourceKey, function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":"Assembly","t":16,"rt":$n[7].Assembly,"g":{"a":2,"n":"get_Assembly","t":8,"sn":"getAssembly","rt":$n[7].Assembly}},{"a":2,"n":"ResourceId","t":16,"rt":Object,"g":{"a":2,"n":"get_ResourceId","t":8,"sn":"getResourceId","rt":Object},"s":{"a":2,"n":"set_ResourceId","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setResourceId","rt":Object,"p":[Object]}},{"a":2,"n":"TypeInTargetAssembly","t":16,"rt":Function,"g":{"a":2,"n":"get_TypeInTargetAssembly","t":8,"sn":"getTypeInTargetAssembly","rt":Function},"s":{"a":2,"n":"set_TypeInTargetAssembly","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setTypeInTargetAssembly","rt":Object,"p":[Function]}}]}; });
    $m($n[1].Setter, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"Property","t":16,"rt":$n[1].IPropertyPathElement,"g":{"a":2,"n":"get_Property","t":8,"sn":"getProperty","rt":$n[1].IPropertyPathElement},"s":{"a":2,"n":"set_Property","t":8,"pi":[{"n":"value","pt":$n[1].IPropertyPathElement,"ps":0}],"sn":"setProperty","rt":Object,"p":[$n[1].IPropertyPathElement]}},{"a":2,"n":"TargetName","t":16,"rt":String,"g":{"a":2,"n":"get_TargetName","t":8,"sn":"getTargetName","rt":String},"s":{"a":2,"n":"set_TargetName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setTargetName","rt":Object,"p":[String]}},{"a":2,"n":"Value","t":16,"rt":Object,"g":{"a":2,"n":"get_Value","t":8,"sn":"getValue","rt":Object},"s":{"a":2,"n":"set_Value","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setValue","rt":Object,"p":[Object]}}]}; });
    $m($n[1].StaticResourceExtension, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("ResourceKey", 0)],"m":[{"a":2,"n":"ResourceKey","t":16,"rt":Object,"g":{"a":2,"n":"get_ResourceKey","t":8,"sn":"getResourceKey","rt":Object},"s":{"a":2,"n":"set_ResourceKey","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setResourceKey","rt":Object,"p":[Object]}}]}; });
    $m($n[1].Style, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Setters"),new System.Windows.Markup.DictionaryKeyPropertyAttribute("Key"),new System.Windows.Markup.DeferredValueKeyProviderAttribute(System.Windows.StyleKeyProvider)],"m":[{"a":2,"n":"BasedOn","t":16,"rt":$n[1].Style,"g":{"a":2,"n":"get_BasedOn","t":8,"sn":"getBasedOn","rt":$n[1].Style},"s":{"a":2,"n":"set_BasedOn","t":8,"pi":[{"n":"value","pt":$n[1].Style,"ps":0}],"sn":"setBasedOn","rt":Object,"p":[$n[1].Style]}},{"a":2,"n":"Key","t":16,"rt":Object,"g":{"a":2,"n":"get_Key","t":8,"sn":"getKey","rt":Object},"s":{"a":2,"n":"set_Key","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setKey","rt":Object,"p":[Object]}},{"a":2,"n":"Setters","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"g":{"a":2,"n":"get_Setters","t":8,"sn":"getSetters","rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction)},"s":{"a":1,"n":"set_Setters","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"ps":0}],"sn":"setSetters","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITriggerAction)]}},{"a":2,"n":"TargetType","t":16,"rt":Function,"g":{"a":2,"n":"get_TargetType","t":8,"sn":"getTargetType","rt":Function},"s":{"a":2,"n":"set_TargetType","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setTargetType","rt":Object,"p":[Function]}},{"a":2,"n":"Triggers","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"g":{"a":2,"n":"get_Triggers","t":8,"sn":"getTriggers","rt":$n[3].ObservableCollection$1(System.Windows.ITrigger)},"s":{"a":1,"n":"set_Triggers","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITrigger),"ps":0}],"sn":"setTriggers","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITrigger)]}}]}; });
    $m($n[1].TemplateBindingExtension, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("Property", 0)],"m":[{"a":2,"n":"Converter","t":16,"rt":$n[2].IValueConverter,"g":{"a":2,"n":"get_Converter","t":8,"sn":"getConverter","rt":$n[2].IValueConverter},"s":{"a":2,"n":"set_Converter","t":8,"pi":[{"n":"value","pt":$n[2].IValueConverter,"ps":0}],"sn":"setConverter","rt":Object,"p":[$n[2].IValueConverter]}},{"a":2,"n":"ConverterParameter","t":16,"rt":Object,"g":{"a":2,"n":"get_ConverterParameter","t":8,"sn":"getConverterParameter","rt":Object},"s":{"a":2,"n":"set_ConverterParameter","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setConverterParameter","rt":Object,"p":[Object]}},{"a":2,"n":"Property","t":16,"rt":$n[1].IPropertyPathElement,"g":{"a":2,"n":"get_Property","t":8,"sn":"getProperty","rt":$n[1].IPropertyPathElement},"s":{"a":2,"n":"set_Property","t":8,"pi":[{"n":"value","pt":$n[1].IPropertyPathElement,"ps":0}],"sn":"setProperty","rt":Object,"p":[$n[1].IPropertyPathElement]}}]}; });
    $m($n[1].Trigger, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Setters")],"m":[{"a":2,"n":"Property","t":16,"rt":$n[1].IPropertyPathElement,"g":{"a":2,"n":"get_Property","t":8,"sn":"getProperty","rt":$n[1].IPropertyPathElement},"s":{"a":2,"n":"set_Property","t":8,"pi":[{"n":"value","pt":$n[1].IPropertyPathElement,"ps":0}],"sn":"setProperty","rt":Object,"p":[$n[1].IPropertyPathElement]}},{"a":2,"n":"Setters","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"g":{"a":2,"n":"get_Setters","t":8,"sn":"getSetters","rt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction)},"s":{"a":1,"n":"set_Setters","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.ITriggerAction),"ps":0}],"sn":"setSetters","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.ITriggerAction)]}},{"a":2,"n":"SourceName","t":16,"rt":String,"g":{"a":2,"n":"get_SourceName","t":8,"sn":"getSourceName","rt":String},"s":{"a":2,"n":"set_SourceName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setSourceName","rt":Object,"p":[String]}},{"a":2,"n":"Value","t":16,"rt":Object,"g":{"a":2,"n":"get_Value","t":8,"sn":"getValue$5","rt":Object},"s":{"a":2,"n":"set_Value","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setValue$5","rt":Object,"p":[Object]}}]}; });
    $m($n[1].UIElement, function () { return {"att":1,"a":2,"m":[{"a":2,"n":"ClipToBounds","t":16,"rt":Boolean,"g":{"a":2,"n":"get_ClipToBounds","t":8,"sn":"getClipToBounds","rt":Boolean},"s":{"a":2,"n":"set_ClipToBounds","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setClipToBounds","rt":Object,"p":[Boolean]}},{"a":2,"n":"DesiredSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_DesiredSize","t":8,"sn":"getDesiredSize","rt":$n[1].Size},"s":{"a":1,"n":"set_DesiredSize","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setDesiredSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"Focusable","t":16,"rt":Boolean,"g":{"a":2,"n":"get_Focusable","t":8,"sn":"getFocusable","rt":Boolean},"s":{"a":2,"n":"set_Focusable","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setFocusable","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsArrangeValid","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsArrangeValid","t":8,"sn":"getIsArrangeValid","rt":Boolean},"s":{"a":1,"n":"set_IsArrangeValid","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsArrangeValid","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsEnabled","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"sn":"getIsEnabled","rt":Boolean},"s":{"a":2,"n":"set_IsEnabled","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsEnabled","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsFocused","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsFocused","t":8,"sn":"getIsFocused","rt":Boolean},"s":{"a":1,"n":"set_IsFocused","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsFocused","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsHitTestVisible","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsHitTestVisible","t":8,"sn":"getIsHitTestVisible","rt":Boolean},"s":{"a":2,"n":"set_IsHitTestVisible","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsHitTestVisible","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsKeyboardFocusWithin","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsKeyboardFocusWithin","t":8,"sn":"getIsKeyboardFocusWithin","rt":Boolean},"s":{"a":1,"n":"set_IsKeyboardFocusWithin","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsKeyboardFocusWithin","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsKeyboardFocused","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsKeyboardFocused","t":8,"sn":"getIsKeyboardFocused","rt":Boolean},"s":{"a":1,"n":"set_IsKeyboardFocused","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsKeyboardFocused","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsMeasureValid","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsMeasureValid","t":8,"sn":"getIsMeasureValid","rt":Boolean},"s":{"a":1,"n":"set_IsMeasureValid","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsMeasureValid","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsMouseOver","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsMouseOver","t":8,"sn":"getIsMouseOver","rt":Boolean},"s":{"a":1,"n":"set_IsMouseOver","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsMouseOver","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsRootElement","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsRootElement","t":8,"sn":"getIsRootElement","rt":Boolean},"s":{"a":2,"n":"set_IsRootElement","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsRootElement","rt":Object,"p":[Boolean]}},{"a":2,"n":"IsVisible","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsVisible","t":8,"sn":"getIsVisible","rt":Boolean},"s":{"a":1,"n":"set_IsVisible","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsVisible","rt":Object,"p":[Boolean]}},{"a":2,"n":"LogicalChildren","t":16,"rt":$n[6].IEnumerable$1(Object),"g":{"a":2,"n":"get_LogicalChildren","t":8,"sn":"getLogicalChildren","rt":$n[6].IEnumerable$1(Object)},"s":{"a":1,"n":"set_LogicalChildren","t":8,"pi":[{"n":"value","pt":$n[6].IEnumerable$1(Object),"ps":0}],"sn":"setLogicalChildren","rt":Object,"p":[$n[6].IEnumerable$1(Object)]}},{"a":2,"n":"LogicalParent","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_LogicalParent","t":8,"sn":"getLogicalParent","rt":$n[1].UIElement},"s":{"a":1,"n":"set_LogicalParent","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setLogicalParent","rt":Object,"p":[$n[1].UIElement]}},{"a":2,"n":"Opacity","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Opacity","t":8,"sn":"getOpacity","rt":$n[0].Double},"s":{"a":2,"n":"set_Opacity","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setOpacity","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"PreviousAvailableSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_PreviousAvailableSize","t":8,"sn":"getPreviousAvailableSize","rt":$n[1].Size},"s":{"a":1,"n":"set_PreviousAvailableSize","t":8,"pi":[{"n":"value","pt":$n[1].Size,"ps":0}],"sn":"setPreviousAvailableSize","rt":Object,"p":[$n[1].Size]}},{"a":2,"n":"PreviousFinalRect","t":16,"rt":$n[1].Rect,"g":{"a":2,"n":"get_PreviousFinalRect","t":8,"sn":"getPreviousFinalRect","rt":$n[1].Rect},"s":{"a":1,"n":"set_PreviousFinalRect","t":8,"pi":[{"n":"value","pt":$n[1].Rect,"ps":0}],"sn":"setPreviousFinalRect","rt":Object,"p":[$n[1].Rect]}},{"a":2,"n":"RenderSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_RenderSize","t":8,"sn":"getRenderSize","rt":$n[1].Size}},{"a":2,"n":"RenderTransform","t":16,"rt":$n[5].Transform,"g":{"a":2,"n":"get_RenderTransform","t":8,"sn":"getRenderTransform","rt":$n[5].Transform},"s":{"a":2,"n":"set_RenderTransform","t":8,"pi":[{"n":"value","pt":$n[5].Transform,"ps":0}],"sn":"setRenderTransform","rt":Object,"p":[$n[5].Transform]}},{"a":2,"n":"RenderTransformOrigin","t":16,"rt":$n[1].Point,"g":{"a":2,"n":"get_RenderTransformOrigin","t":8,"sn":"getRenderTransformOrigin","rt":$n[1].Point},"s":{"a":2,"n":"set_RenderTransformOrigin","t":8,"pi":[{"n":"value","pt":$n[1].Point,"ps":0}],"sn":"setRenderTransformOrigin","rt":Object,"p":[$n[1].Point]}},{"a":2,"n":"Visibility","t":16,"rt":$n[1].Visibility,"g":{"a":2,"n":"get_Visibility","t":8,"sn":"getVisibility","rt":$n[1].Visibility},"s":{"a":2,"n":"set_Visibility","t":8,"pi":[{"n":"value","pt":$n[1].Visibility,"ps":0}],"sn":"setVisibility","rt":Object,"p":[$n[1].Visibility]}}]}; });
    $m($n[1].VisualState, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.RuntimeNamePropertyAttribute("Name"),new System.Windows.Markup.ContentPropertyAttribute("Storyboard")],"m":[{"a":2,"n":"Name","t":16,"rt":String,"g":{"a":2,"n":"get_Name","t":8,"sn":"getName","rt":String},"s":{"a":2,"n":"set_Name","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setName","rt":Object,"p":[String]}},{"a":2,"n":"Storyboard","t":16,"rt":$n[8].Storyboard,"g":{"a":2,"n":"get_Storyboard","t":8,"sn":"getStoryboard","rt":$n[8].Storyboard},"s":{"a":2,"n":"set_Storyboard","t":8,"pi":[{"n":"value","pt":$n[8].Storyboard,"ps":0}],"sn":"setStoryboard","rt":Object,"p":[$n[8].Storyboard]}}]}; });
    $m($n[1].VisualStateGroup, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("States"),new System.Windows.Markup.RuntimeNamePropertyAttribute("Name")],"m":[{"a":2,"n":"CurrentState","t":16,"rt":$n[1].VisualState,"g":{"a":2,"n":"get_CurrentState","t":8,"sn":"getCurrentState","rt":$n[1].VisualState},"s":{"a":1,"n":"set_CurrentState","t":8,"pi":[{"n":"value","pt":$n[1].VisualState,"ps":0}],"sn":"setCurrentState","rt":Object,"p":[$n[1].VisualState]}},{"a":2,"n":"Name","t":16,"rt":String,"g":{"a":2,"n":"get_Name","t":8,"sn":"getName","rt":String},"s":{"a":2,"n":"set_Name","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setName","rt":Object,"p":[String]}},{"a":2,"n":"States","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.VisualState),"g":{"a":2,"n":"get_States","t":8,"sn":"getStates","rt":$n[1].FreezableCollection$1(System.Windows.VisualState)},"s":{"a":1,"n":"set_States","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.VisualState),"ps":0}],"sn":"setStates","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.VisualState)]}},{"a":2,"n":"Transitions","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.VisualTransition),"g":{"a":2,"n":"get_Transitions","t":8,"sn":"getTransitions","rt":$n[1].FreezableCollection$1(System.Windows.VisualTransition)},"s":{"a":1,"n":"set_Transitions","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.VisualTransition),"ps":0}],"sn":"setTransitions","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.VisualTransition)]}}]}; });
    $m($n[1].VisualTransition, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Storyboard")],"m":[{"a":2,"n":"From","t":16,"rt":String,"g":{"a":2,"n":"get_From","t":8,"sn":"getFrom","rt":String},"s":{"a":2,"n":"set_From","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setFrom","rt":Object,"p":[String]}},{"a":2,"n":"Storyboard","t":16,"rt":$n[8].Storyboard,"g":{"a":2,"n":"get_Storyboard","t":8,"sn":"getStoryboard","rt":$n[8].Storyboard},"s":{"a":2,"n":"set_Storyboard","t":8,"pi":[{"n":"value","pt":$n[8].Storyboard,"ps":0}],"sn":"setStoryboard","rt":Object,"p":[$n[8].Storyboard]}},{"a":2,"n":"To","t":16,"rt":String,"g":{"a":2,"n":"get_To","t":8,"sn":"getTo","rt":String},"s":{"a":2,"n":"set_To","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setTo","rt":Object,"p":[String]}}]}; });
    $m($n[5].Brushes, function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AliceBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_AliceBlue","is":true,"t":8,"sn":"getAliceBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"AntiqueWhite","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_AntiqueWhite","is":true,"t":8,"sn":"getAntiqueWhite","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Aqua","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Aqua","is":true,"t":8,"sn":"getAqua","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Aquamarine","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Aquamarine","is":true,"t":8,"sn":"getAquamarine","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Azure","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Azure","is":true,"t":8,"sn":"getAzure","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Beige","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Beige","is":true,"t":8,"sn":"getBeige","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Bisque","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Bisque","is":true,"t":8,"sn":"getBisque","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Black","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Black","is":true,"t":8,"sn":"getBlack","rt":$n[5].SolidColorBrush}},{"a":2,"n":"BlanchedAlmond","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_BlanchedAlmond","is":true,"t":8,"sn":"getBlanchedAlmond","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Blue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Blue","is":true,"t":8,"sn":"getBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"BlueViolet","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_BlueViolet","is":true,"t":8,"sn":"getBlueViolet","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Brown","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Brown","is":true,"t":8,"sn":"getBrown","rt":$n[5].SolidColorBrush}},{"a":2,"n":"BurlyWood","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_BurlyWood","is":true,"t":8,"sn":"getBurlyWood","rt":$n[5].SolidColorBrush}},{"a":2,"n":"CadetBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_CadetBlue","is":true,"t":8,"sn":"getCadetBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Chartreuse","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Chartreuse","is":true,"t":8,"sn":"getChartreuse","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Chocolate","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Chocolate","is":true,"t":8,"sn":"getChocolate","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Coral","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Coral","is":true,"t":8,"sn":"getCoral","rt":$n[5].SolidColorBrush}},{"a":2,"n":"CornflowerBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_CornflowerBlue","is":true,"t":8,"sn":"getCornflowerBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Cornsilk","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Cornsilk","is":true,"t":8,"sn":"getCornsilk","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Crimson","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Crimson","is":true,"t":8,"sn":"getCrimson","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Cyan","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Cyan","is":true,"t":8,"sn":"getCyan","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkBlue","is":true,"t":8,"sn":"getDarkBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkCyan","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkCyan","is":true,"t":8,"sn":"getDarkCyan","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkGoldenrod","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkGoldenrod","is":true,"t":8,"sn":"getDarkGoldenrod","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkGray","is":true,"t":8,"sn":"getDarkGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkGreen","is":true,"t":8,"sn":"getDarkGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkKhaki","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkKhaki","is":true,"t":8,"sn":"getDarkKhaki","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkMagenta","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkMagenta","is":true,"t":8,"sn":"getDarkMagenta","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkOliveGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkOliveGreen","is":true,"t":8,"sn":"getDarkOliveGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkOrange","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkOrange","is":true,"t":8,"sn":"getDarkOrange","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkOrchid","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkOrchid","is":true,"t":8,"sn":"getDarkOrchid","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkRed","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkRed","is":true,"t":8,"sn":"getDarkRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkSalmon","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkSalmon","is":true,"t":8,"sn":"getDarkSalmon","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkSeaGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkSeaGreen","is":true,"t":8,"sn":"getDarkSeaGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkSlateBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkSlateBlue","is":true,"t":8,"sn":"getDarkSlateBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkSlateGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkSlateGray","is":true,"t":8,"sn":"getDarkSlateGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkTurquoise","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkTurquoise","is":true,"t":8,"sn":"getDarkTurquoise","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DarkViolet","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DarkViolet","is":true,"t":8,"sn":"getDarkViolet","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DeepPink","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DeepPink","is":true,"t":8,"sn":"getDeepPink","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DeepSkyBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DeepSkyBlue","is":true,"t":8,"sn":"getDeepSkyBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DimGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DimGray","is":true,"t":8,"sn":"getDimGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"DodgerBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_DodgerBlue","is":true,"t":8,"sn":"getDodgerBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Firebrick","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Firebrick","is":true,"t":8,"sn":"getFirebrick","rt":$n[5].SolidColorBrush}},{"a":2,"n":"FloralWhite","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_FloralWhite","is":true,"t":8,"sn":"getFloralWhite","rt":$n[5].SolidColorBrush}},{"a":2,"n":"ForestGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_ForestGreen","is":true,"t":8,"sn":"getForestGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Fuchsia","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Fuchsia","is":true,"t":8,"sn":"getFuchsia","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Gainsboro","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Gainsboro","is":true,"t":8,"sn":"getGainsboro","rt":$n[5].SolidColorBrush}},{"a":2,"n":"GhostWhite","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_GhostWhite","is":true,"t":8,"sn":"getGhostWhite","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Gold","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Gold","is":true,"t":8,"sn":"getGold","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Goldenrod","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Goldenrod","is":true,"t":8,"sn":"getGoldenrod","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Gray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Gray","is":true,"t":8,"sn":"getGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Green","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Green","is":true,"t":8,"sn":"getGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"GreenYellow","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_GreenYellow","is":true,"t":8,"sn":"getGreenYellow","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Honeydew","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Honeydew","is":true,"t":8,"sn":"getHoneydew","rt":$n[5].SolidColorBrush}},{"a":2,"n":"HotPink","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_HotPink","is":true,"t":8,"sn":"getHotPink","rt":$n[5].SolidColorBrush}},{"a":2,"n":"IndianRed","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_IndianRed","is":true,"t":8,"sn":"getIndianRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Indigo","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Indigo","is":true,"t":8,"sn":"getIndigo","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Ivory","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Ivory","is":true,"t":8,"sn":"getIvory","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Khaki","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Khaki","is":true,"t":8,"sn":"getKhaki","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Lavender","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Lavender","is":true,"t":8,"sn":"getLavender","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LavenderBlush","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LavenderBlush","is":true,"t":8,"sn":"getLavenderBlush","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LawnGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LawnGreen","is":true,"t":8,"sn":"getLawnGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LemonChiffon","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LemonChiffon","is":true,"t":8,"sn":"getLemonChiffon","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightBlue","is":true,"t":8,"sn":"getLightBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightCoral","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightCoral","is":true,"t":8,"sn":"getLightCoral","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightCyan","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightCyan","is":true,"t":8,"sn":"getLightCyan","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightGoldenrodYellow","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightGoldenrodYellow","is":true,"t":8,"sn":"getLightGoldenrodYellow","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightGray","is":true,"t":8,"sn":"getLightGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightGreen","is":true,"t":8,"sn":"getLightGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightPink","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightPink","is":true,"t":8,"sn":"getLightPink","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightSalmon","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightSalmon","is":true,"t":8,"sn":"getLightSalmon","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightSeaGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightSeaGreen","is":true,"t":8,"sn":"getLightSeaGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightSkyBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightSkyBlue","is":true,"t":8,"sn":"getLightSkyBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightSlateGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightSlateGray","is":true,"t":8,"sn":"getLightSlateGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightSteelBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightSteelBlue","is":true,"t":8,"sn":"getLightSteelBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LightYellow","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LightYellow","is":true,"t":8,"sn":"getLightYellow","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Lime","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Lime","is":true,"t":8,"sn":"getLime","rt":$n[5].SolidColorBrush}},{"a":2,"n":"LimeGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_LimeGreen","is":true,"t":8,"sn":"getLimeGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Linen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Linen","is":true,"t":8,"sn":"getLinen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Magenta","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Magenta","is":true,"t":8,"sn":"getMagenta","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Maroon","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Maroon","is":true,"t":8,"sn":"getMaroon","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumAquamarine","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumAquamarine","is":true,"t":8,"sn":"getMediumAquamarine","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumBlue","is":true,"t":8,"sn":"getMediumBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumOrchid","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumOrchid","is":true,"t":8,"sn":"getMediumOrchid","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumPurple","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumPurple","is":true,"t":8,"sn":"getMediumPurple","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumSeaGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumSeaGreen","is":true,"t":8,"sn":"getMediumSeaGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumSlateBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumSlateBlue","is":true,"t":8,"sn":"getMediumSlateBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumSpringGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumSpringGreen","is":true,"t":8,"sn":"getMediumSpringGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumTurquoise","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumTurquoise","is":true,"t":8,"sn":"getMediumTurquoise","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MediumVioletRed","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MediumVioletRed","is":true,"t":8,"sn":"getMediumVioletRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MidnightBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MidnightBlue","is":true,"t":8,"sn":"getMidnightBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MintCream","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MintCream","is":true,"t":8,"sn":"getMintCream","rt":$n[5].SolidColorBrush}},{"a":2,"n":"MistyRose","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_MistyRose","is":true,"t":8,"sn":"getMistyRose","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Moccasin","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Moccasin","is":true,"t":8,"sn":"getMoccasin","rt":$n[5].SolidColorBrush}},{"a":2,"n":"NavajoWhite","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_NavajoWhite","is":true,"t":8,"sn":"getNavajoWhite","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Navy","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Navy","is":true,"t":8,"sn":"getNavy","rt":$n[5].SolidColorBrush}},{"a":2,"n":"OldLace","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_OldLace","is":true,"t":8,"sn":"getOldLace","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Olive","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Olive","is":true,"t":8,"sn":"getOlive","rt":$n[5].SolidColorBrush}},{"a":2,"n":"OliveDrab","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_OliveDrab","is":true,"t":8,"sn":"getOliveDrab","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Orange","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Orange","is":true,"t":8,"sn":"getOrange","rt":$n[5].SolidColorBrush}},{"a":2,"n":"OrangeRed","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_OrangeRed","is":true,"t":8,"sn":"getOrangeRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Orchid","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Orchid","is":true,"t":8,"sn":"getOrchid","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PaleGoldenrod","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PaleGoldenrod","is":true,"t":8,"sn":"getPaleGoldenrod","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PaleGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PaleGreen","is":true,"t":8,"sn":"getPaleGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PaleTurquoise","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PaleTurquoise","is":true,"t":8,"sn":"getPaleTurquoise","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PaleVioletRed","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PaleVioletRed","is":true,"t":8,"sn":"getPaleVioletRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PapayaWhip","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PapayaWhip","is":true,"t":8,"sn":"getPapayaWhip","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PeachPuff","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PeachPuff","is":true,"t":8,"sn":"getPeachPuff","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Peru","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Peru","is":true,"t":8,"sn":"getPeru","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Pink","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Pink","is":true,"t":8,"sn":"getPink","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Plum","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Plum","is":true,"t":8,"sn":"getPlum","rt":$n[5].SolidColorBrush}},{"a":2,"n":"PowderBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_PowderBlue","is":true,"t":8,"sn":"getPowderBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Purple","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Purple","is":true,"t":8,"sn":"getPurple","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Red","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Red","is":true,"t":8,"sn":"getRed","rt":$n[5].SolidColorBrush}},{"a":2,"n":"RosyBrown","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_RosyBrown","is":true,"t":8,"sn":"getRosyBrown","rt":$n[5].SolidColorBrush}},{"a":2,"n":"RoyalBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_RoyalBlue","is":true,"t":8,"sn":"getRoyalBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SaddleBrown","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SaddleBrown","is":true,"t":8,"sn":"getSaddleBrown","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Salmon","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Salmon","is":true,"t":8,"sn":"getSalmon","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SandyBrown","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SandyBrown","is":true,"t":8,"sn":"getSandyBrown","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SeaGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SeaGreen","is":true,"t":8,"sn":"getSeaGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SeaShell","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SeaShell","is":true,"t":8,"sn":"getSeaShell","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Sienna","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Sienna","is":true,"t":8,"sn":"getSienna","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Silver","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Silver","is":true,"t":8,"sn":"getSilver","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SkyBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SkyBlue","is":true,"t":8,"sn":"getSkyBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SlateBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SlateBlue","is":true,"t":8,"sn":"getSlateBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SlateGray","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SlateGray","is":true,"t":8,"sn":"getSlateGray","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Snow","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Snow","is":true,"t":8,"sn":"getSnow","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SpringGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SpringGreen","is":true,"t":8,"sn":"getSpringGreen","rt":$n[5].SolidColorBrush}},{"a":2,"n":"SteelBlue","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_SteelBlue","is":true,"t":8,"sn":"getSteelBlue","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Tan","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Tan","is":true,"t":8,"sn":"getTan","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Teal","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Teal","is":true,"t":8,"sn":"getTeal","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Thistle","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Thistle","is":true,"t":8,"sn":"getThistle","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Tomato","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Tomato","is":true,"t":8,"sn":"getTomato","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Transparent","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Transparent","is":true,"t":8,"sn":"getTransparent","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Turquoise","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Turquoise","is":true,"t":8,"sn":"getTurquoise","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Violet","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Violet","is":true,"t":8,"sn":"getViolet","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Wheat","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Wheat","is":true,"t":8,"sn":"getWheat","rt":$n[5].SolidColorBrush}},{"a":2,"n":"White","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_White","is":true,"t":8,"sn":"getWhite","rt":$n[5].SolidColorBrush}},{"a":2,"n":"WhiteSmoke","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_WhiteSmoke","is":true,"t":8,"sn":"getWhiteSmoke","rt":$n[5].SolidColorBrush}},{"a":2,"n":"Yellow","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_Yellow","is":true,"t":8,"sn":"getYellow","rt":$n[5].SolidColorBrush}},{"a":2,"n":"YellowGreen","is":true,"t":16,"rt":$n[5].SolidColorBrush,"g":{"a":2,"n":"get_YellowGreen","is":true,"t":8,"sn":"getYellowGreen","rt":$n[5].SolidColorBrush}}]}; });
    $m($n[5].Colors, function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AliceBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_AliceBlue","is":true,"t":8,"sn":"getAliceBlue","rt":$n[5].Color}},{"a":2,"n":"AntiqueWhite","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_AntiqueWhite","is":true,"t":8,"sn":"getAntiqueWhite","rt":$n[5].Color}},{"a":2,"n":"Aqua","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Aqua","is":true,"t":8,"sn":"getAqua","rt":$n[5].Color}},{"a":2,"n":"Aquamarine","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Aquamarine","is":true,"t":8,"sn":"getAquamarine","rt":$n[5].Color}},{"a":2,"n":"Azure","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Azure","is":true,"t":8,"sn":"getAzure","rt":$n[5].Color}},{"a":2,"n":"Beige","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Beige","is":true,"t":8,"sn":"getBeige","rt":$n[5].Color}},{"a":2,"n":"Bisque","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Bisque","is":true,"t":8,"sn":"getBisque","rt":$n[5].Color}},{"a":2,"n":"Black","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Black","is":true,"t":8,"sn":"getBlack","rt":$n[5].Color}},{"a":2,"n":"BlanchedAlmond","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_BlanchedAlmond","is":true,"t":8,"sn":"getBlanchedAlmond","rt":$n[5].Color}},{"a":2,"n":"Blue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Blue","is":true,"t":8,"sn":"getBlue","rt":$n[5].Color}},{"a":2,"n":"BlueViolet","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_BlueViolet","is":true,"t":8,"sn":"getBlueViolet","rt":$n[5].Color}},{"a":2,"n":"Brown","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Brown","is":true,"t":8,"sn":"getBrown","rt":$n[5].Color}},{"a":2,"n":"BurlyWood","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_BurlyWood","is":true,"t":8,"sn":"getBurlyWood","rt":$n[5].Color}},{"a":2,"n":"CadetBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_CadetBlue","is":true,"t":8,"sn":"getCadetBlue","rt":$n[5].Color}},{"a":2,"n":"Chartreuse","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Chartreuse","is":true,"t":8,"sn":"getChartreuse","rt":$n[5].Color}},{"a":2,"n":"Chocolate","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Chocolate","is":true,"t":8,"sn":"getChocolate","rt":$n[5].Color}},{"a":2,"n":"Coral","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Coral","is":true,"t":8,"sn":"getCoral","rt":$n[5].Color}},{"a":2,"n":"CornflowerBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_CornflowerBlue","is":true,"t":8,"sn":"getCornflowerBlue","rt":$n[5].Color}},{"a":2,"n":"Cornsilk","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Cornsilk","is":true,"t":8,"sn":"getCornsilk","rt":$n[5].Color}},{"a":2,"n":"Crimson","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Crimson","is":true,"t":8,"sn":"getCrimson","rt":$n[5].Color}},{"a":2,"n":"Cyan","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Cyan","is":true,"t":8,"sn":"getCyan","rt":$n[5].Color}},{"a":2,"n":"DarkBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkBlue","is":true,"t":8,"sn":"getDarkBlue","rt":$n[5].Color}},{"a":2,"n":"DarkCyan","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkCyan","is":true,"t":8,"sn":"getDarkCyan","rt":$n[5].Color}},{"a":2,"n":"DarkGoldenrod","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkGoldenrod","is":true,"t":8,"sn":"getDarkGoldenrod","rt":$n[5].Color}},{"a":2,"n":"DarkGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkGray","is":true,"t":8,"sn":"getDarkGray","rt":$n[5].Color}},{"a":2,"n":"DarkGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkGreen","is":true,"t":8,"sn":"getDarkGreen","rt":$n[5].Color}},{"a":2,"n":"DarkKhaki","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkKhaki","is":true,"t":8,"sn":"getDarkKhaki","rt":$n[5].Color}},{"a":2,"n":"DarkMagenta","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkMagenta","is":true,"t":8,"sn":"getDarkMagenta","rt":$n[5].Color}},{"a":2,"n":"DarkOliveGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkOliveGreen","is":true,"t":8,"sn":"getDarkOliveGreen","rt":$n[5].Color}},{"a":2,"n":"DarkOrange","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkOrange","is":true,"t":8,"sn":"getDarkOrange","rt":$n[5].Color}},{"a":2,"n":"DarkOrchid","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkOrchid","is":true,"t":8,"sn":"getDarkOrchid","rt":$n[5].Color}},{"a":2,"n":"DarkRed","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkRed","is":true,"t":8,"sn":"getDarkRed","rt":$n[5].Color}},{"a":2,"n":"DarkSalmon","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkSalmon","is":true,"t":8,"sn":"getDarkSalmon","rt":$n[5].Color}},{"a":2,"n":"DarkSeaGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkSeaGreen","is":true,"t":8,"sn":"getDarkSeaGreen","rt":$n[5].Color}},{"a":2,"n":"DarkSlateBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkSlateBlue","is":true,"t":8,"sn":"getDarkSlateBlue","rt":$n[5].Color}},{"a":2,"n":"DarkSlateGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkSlateGray","is":true,"t":8,"sn":"getDarkSlateGray","rt":$n[5].Color}},{"a":2,"n":"DarkTurquoise","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkTurquoise","is":true,"t":8,"sn":"getDarkTurquoise","rt":$n[5].Color}},{"a":2,"n":"DarkViolet","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DarkViolet","is":true,"t":8,"sn":"getDarkViolet","rt":$n[5].Color}},{"a":2,"n":"DeepPink","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DeepPink","is":true,"t":8,"sn":"getDeepPink","rt":$n[5].Color}},{"a":2,"n":"DeepSkyBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DeepSkyBlue","is":true,"t":8,"sn":"getDeepSkyBlue","rt":$n[5].Color}},{"a":2,"n":"DimGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DimGray","is":true,"t":8,"sn":"getDimGray","rt":$n[5].Color}},{"a":2,"n":"DodgerBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_DodgerBlue","is":true,"t":8,"sn":"getDodgerBlue","rt":$n[5].Color}},{"a":2,"n":"Firebrick","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Firebrick","is":true,"t":8,"sn":"getFirebrick","rt":$n[5].Color}},{"a":2,"n":"FloralWhite","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_FloralWhite","is":true,"t":8,"sn":"getFloralWhite","rt":$n[5].Color}},{"a":2,"n":"ForestGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_ForestGreen","is":true,"t":8,"sn":"getForestGreen","rt":$n[5].Color}},{"a":2,"n":"Fuchsia","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Fuchsia","is":true,"t":8,"sn":"getFuchsia","rt":$n[5].Color}},{"a":2,"n":"Gainsboro","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Gainsboro","is":true,"t":8,"sn":"getGainsboro","rt":$n[5].Color}},{"a":2,"n":"GhostWhite","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_GhostWhite","is":true,"t":8,"sn":"getGhostWhite","rt":$n[5].Color}},{"a":2,"n":"Gold","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Gold","is":true,"t":8,"sn":"getGold","rt":$n[5].Color}},{"a":2,"n":"Goldenrod","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Goldenrod","is":true,"t":8,"sn":"getGoldenrod","rt":$n[5].Color}},{"a":2,"n":"Gray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Gray","is":true,"t":8,"sn":"getGray","rt":$n[5].Color}},{"a":2,"n":"Green","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Green","is":true,"t":8,"sn":"getGreen","rt":$n[5].Color}},{"a":2,"n":"GreenYellow","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_GreenYellow","is":true,"t":8,"sn":"getGreenYellow","rt":$n[5].Color}},{"a":2,"n":"Honeydew","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Honeydew","is":true,"t":8,"sn":"getHoneydew","rt":$n[5].Color}},{"a":2,"n":"HotPink","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_HotPink","is":true,"t":8,"sn":"getHotPink","rt":$n[5].Color}},{"a":2,"n":"IndianRed","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_IndianRed","is":true,"t":8,"sn":"getIndianRed","rt":$n[5].Color}},{"a":2,"n":"Indigo","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Indigo","is":true,"t":8,"sn":"getIndigo","rt":$n[5].Color}},{"a":2,"n":"Ivory","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Ivory","is":true,"t":8,"sn":"getIvory","rt":$n[5].Color}},{"a":2,"n":"Khaki","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Khaki","is":true,"t":8,"sn":"getKhaki","rt":$n[5].Color}},{"a":2,"n":"Lavender","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Lavender","is":true,"t":8,"sn":"getLavender","rt":$n[5].Color}},{"a":2,"n":"LavenderBlush","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LavenderBlush","is":true,"t":8,"sn":"getLavenderBlush","rt":$n[5].Color}},{"a":2,"n":"LawnGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LawnGreen","is":true,"t":8,"sn":"getLawnGreen","rt":$n[5].Color}},{"a":2,"n":"LemonChiffon","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LemonChiffon","is":true,"t":8,"sn":"getLemonChiffon","rt":$n[5].Color}},{"a":2,"n":"LightBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightBlue","is":true,"t":8,"sn":"getLightBlue","rt":$n[5].Color}},{"a":2,"n":"LightCoral","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightCoral","is":true,"t":8,"sn":"getLightCoral","rt":$n[5].Color}},{"a":2,"n":"LightCyan","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightCyan","is":true,"t":8,"sn":"getLightCyan","rt":$n[5].Color}},{"a":2,"n":"LightGoldenrodYellow","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightGoldenrodYellow","is":true,"t":8,"sn":"getLightGoldenrodYellow","rt":$n[5].Color}},{"a":2,"n":"LightGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightGray","is":true,"t":8,"sn":"getLightGray","rt":$n[5].Color}},{"a":2,"n":"LightGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightGreen","is":true,"t":8,"sn":"getLightGreen","rt":$n[5].Color}},{"a":2,"n":"LightPink","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightPink","is":true,"t":8,"sn":"getLightPink","rt":$n[5].Color}},{"a":2,"n":"LightSalmon","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightSalmon","is":true,"t":8,"sn":"getLightSalmon","rt":$n[5].Color}},{"a":2,"n":"LightSeaGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightSeaGreen","is":true,"t":8,"sn":"getLightSeaGreen","rt":$n[5].Color}},{"a":2,"n":"LightSkyBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightSkyBlue","is":true,"t":8,"sn":"getLightSkyBlue","rt":$n[5].Color}},{"a":2,"n":"LightSlateGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightSlateGray","is":true,"t":8,"sn":"getLightSlateGray","rt":$n[5].Color}},{"a":2,"n":"LightSteelBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightSteelBlue","is":true,"t":8,"sn":"getLightSteelBlue","rt":$n[5].Color}},{"a":2,"n":"LightYellow","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LightYellow","is":true,"t":8,"sn":"getLightYellow","rt":$n[5].Color}},{"a":2,"n":"Lime","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Lime","is":true,"t":8,"sn":"getLime","rt":$n[5].Color}},{"a":2,"n":"LimeGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_LimeGreen","is":true,"t":8,"sn":"getLimeGreen","rt":$n[5].Color}},{"a":2,"n":"Linen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Linen","is":true,"t":8,"sn":"getLinen","rt":$n[5].Color}},{"a":2,"n":"Magenta","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Magenta","is":true,"t":8,"sn":"getMagenta","rt":$n[5].Color}},{"a":2,"n":"Maroon","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Maroon","is":true,"t":8,"sn":"getMaroon","rt":$n[5].Color}},{"a":2,"n":"MediumAquamarine","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumAquamarine","is":true,"t":8,"sn":"getMediumAquamarine","rt":$n[5].Color}},{"a":2,"n":"MediumBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumBlue","is":true,"t":8,"sn":"getMediumBlue","rt":$n[5].Color}},{"a":2,"n":"MediumOrchid","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumOrchid","is":true,"t":8,"sn":"getMediumOrchid","rt":$n[5].Color}},{"a":2,"n":"MediumPurple","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumPurple","is":true,"t":8,"sn":"getMediumPurple","rt":$n[5].Color}},{"a":2,"n":"MediumSeaGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumSeaGreen","is":true,"t":8,"sn":"getMediumSeaGreen","rt":$n[5].Color}},{"a":2,"n":"MediumSlateBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumSlateBlue","is":true,"t":8,"sn":"getMediumSlateBlue","rt":$n[5].Color}},{"a":2,"n":"MediumSpringGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumSpringGreen","is":true,"t":8,"sn":"getMediumSpringGreen","rt":$n[5].Color}},{"a":2,"n":"MediumTurquoise","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumTurquoise","is":true,"t":8,"sn":"getMediumTurquoise","rt":$n[5].Color}},{"a":2,"n":"MediumVioletRed","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MediumVioletRed","is":true,"t":8,"sn":"getMediumVioletRed","rt":$n[5].Color}},{"a":2,"n":"MidnightBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MidnightBlue","is":true,"t":8,"sn":"getMidnightBlue","rt":$n[5].Color}},{"a":2,"n":"MintCream","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MintCream","is":true,"t":8,"sn":"getMintCream","rt":$n[5].Color}},{"a":2,"n":"MistyRose","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_MistyRose","is":true,"t":8,"sn":"getMistyRose","rt":$n[5].Color}},{"a":2,"n":"Moccasin","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Moccasin","is":true,"t":8,"sn":"getMoccasin","rt":$n[5].Color}},{"a":2,"n":"NavajoWhite","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_NavajoWhite","is":true,"t":8,"sn":"getNavajoWhite","rt":$n[5].Color}},{"a":2,"n":"Navy","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Navy","is":true,"t":8,"sn":"getNavy","rt":$n[5].Color}},{"a":2,"n":"OldLace","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_OldLace","is":true,"t":8,"sn":"getOldLace","rt":$n[5].Color}},{"a":2,"n":"Olive","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Olive","is":true,"t":8,"sn":"getOlive","rt":$n[5].Color}},{"a":2,"n":"OliveDrab","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_OliveDrab","is":true,"t":8,"sn":"getOliveDrab","rt":$n[5].Color}},{"a":2,"n":"Orange","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Orange","is":true,"t":8,"sn":"getOrange","rt":$n[5].Color}},{"a":2,"n":"OrangeRed","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_OrangeRed","is":true,"t":8,"sn":"getOrangeRed","rt":$n[5].Color}},{"a":2,"n":"Orchid","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Orchid","is":true,"t":8,"sn":"getOrchid","rt":$n[5].Color}},{"a":2,"n":"PaleGoldenrod","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PaleGoldenrod","is":true,"t":8,"sn":"getPaleGoldenrod","rt":$n[5].Color}},{"a":2,"n":"PaleGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PaleGreen","is":true,"t":8,"sn":"getPaleGreen","rt":$n[5].Color}},{"a":2,"n":"PaleTurquoise","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PaleTurquoise","is":true,"t":8,"sn":"getPaleTurquoise","rt":$n[5].Color}},{"a":2,"n":"PaleVioletRed","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PaleVioletRed","is":true,"t":8,"sn":"getPaleVioletRed","rt":$n[5].Color}},{"a":2,"n":"PapayaWhip","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PapayaWhip","is":true,"t":8,"sn":"getPapayaWhip","rt":$n[5].Color}},{"a":2,"n":"PeachPuff","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PeachPuff","is":true,"t":8,"sn":"getPeachPuff","rt":$n[5].Color}},{"a":2,"n":"Peru","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Peru","is":true,"t":8,"sn":"getPeru","rt":$n[5].Color}},{"a":2,"n":"Pink","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Pink","is":true,"t":8,"sn":"getPink","rt":$n[5].Color}},{"a":2,"n":"Plum","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Plum","is":true,"t":8,"sn":"getPlum","rt":$n[5].Color}},{"a":2,"n":"PowderBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_PowderBlue","is":true,"t":8,"sn":"getPowderBlue","rt":$n[5].Color}},{"a":2,"n":"Purple","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Purple","is":true,"t":8,"sn":"getPurple","rt":$n[5].Color}},{"a":2,"n":"Red","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Red","is":true,"t":8,"sn":"getRed","rt":$n[5].Color}},{"a":2,"n":"RosyBrown","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_RosyBrown","is":true,"t":8,"sn":"getRosyBrown","rt":$n[5].Color}},{"a":2,"n":"RoyalBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_RoyalBlue","is":true,"t":8,"sn":"getRoyalBlue","rt":$n[5].Color}},{"a":2,"n":"SaddleBrown","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SaddleBrown","is":true,"t":8,"sn":"getSaddleBrown","rt":$n[5].Color}},{"a":2,"n":"Salmon","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Salmon","is":true,"t":8,"sn":"getSalmon","rt":$n[5].Color}},{"a":2,"n":"SandyBrown","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SandyBrown","is":true,"t":8,"sn":"getSandyBrown","rt":$n[5].Color}},{"a":2,"n":"SeaGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SeaGreen","is":true,"t":8,"sn":"getSeaGreen","rt":$n[5].Color}},{"a":2,"n":"SeaShell","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SeaShell","is":true,"t":8,"sn":"getSeaShell","rt":$n[5].Color}},{"a":2,"n":"Sienna","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Sienna","is":true,"t":8,"sn":"getSienna","rt":$n[5].Color}},{"a":2,"n":"Silver","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Silver","is":true,"t":8,"sn":"getSilver","rt":$n[5].Color}},{"a":2,"n":"SkyBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SkyBlue","is":true,"t":8,"sn":"getSkyBlue","rt":$n[5].Color}},{"a":2,"n":"SlateBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SlateBlue","is":true,"t":8,"sn":"getSlateBlue","rt":$n[5].Color}},{"a":2,"n":"SlateGray","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SlateGray","is":true,"t":8,"sn":"getSlateGray","rt":$n[5].Color}},{"a":2,"n":"Snow","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Snow","is":true,"t":8,"sn":"getSnow","rt":$n[5].Color}},{"a":2,"n":"SpringGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SpringGreen","is":true,"t":8,"sn":"getSpringGreen","rt":$n[5].Color}},{"a":2,"n":"SteelBlue","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_SteelBlue","is":true,"t":8,"sn":"getSteelBlue","rt":$n[5].Color}},{"a":2,"n":"Tan","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Tan","is":true,"t":8,"sn":"getTan","rt":$n[5].Color}},{"a":2,"n":"Teal","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Teal","is":true,"t":8,"sn":"getTeal","rt":$n[5].Color}},{"a":2,"n":"Thistle","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Thistle","is":true,"t":8,"sn":"getThistle","rt":$n[5].Color}},{"a":2,"n":"Tomato","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Tomato","is":true,"t":8,"sn":"getTomato","rt":$n[5].Color}},{"a":2,"n":"Transparent","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Transparent","is":true,"t":8,"sn":"getTransparent","rt":$n[5].Color}},{"a":2,"n":"Turquoise","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Turquoise","is":true,"t":8,"sn":"getTurquoise","rt":$n[5].Color}},{"a":2,"n":"Violet","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Violet","is":true,"t":8,"sn":"getViolet","rt":$n[5].Color}},{"a":2,"n":"Wheat","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Wheat","is":true,"t":8,"sn":"getWheat","rt":$n[5].Color}},{"a":2,"n":"White","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_White","is":true,"t":8,"sn":"getWhite","rt":$n[5].Color}},{"a":2,"n":"WhiteSmoke","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_WhiteSmoke","is":true,"t":8,"sn":"getWhiteSmoke","rt":$n[5].Color}},{"a":2,"n":"Yellow","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_Yellow","is":true,"t":8,"sn":"getYellow","rt":$n[5].Color}},{"a":2,"n":"YellowGreen","is":true,"t":16,"rt":$n[5].Color,"g":{"a":2,"n":"get_YellowGreen","is":true,"t":8,"sn":"getYellowGreen","rt":$n[5].Color}}]}; });
    $m($n[5].FontFamily, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.TypeConverterAttribute(System.Windows.Media.FontFamilyTypeConverter)],"m":[{"a":2,"n":"FamilyName","t":16,"rt":String,"g":{"a":2,"n":"get_FamilyName","t":8,"sn":"getFamilyName","rt":String}},{"a":2,"n":"FamilyNames","t":16,"rt":$n[6].IEnumerable$1(String),"g":{"a":2,"n":"get_FamilyNames","t":8,"sn":"getFamilyNames","rt":$n[6].IEnumerable$1(String)},"s":{"a":1,"n":"set_FamilyNames","t":8,"pi":[{"n":"value","pt":$n[6].IEnumerable$1(String),"ps":0}],"sn":"setFamilyNames","rt":Object,"p":[$n[6].IEnumerable$1(String)]}}]}; });
    $m($n[5].LinearGradientBrush, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"EndPoint","t":16,"rt":$n[1].Point,"g":{"a":2,"n":"get_EndPoint","t":8,"sn":"getEndPoint","rt":$n[1].Point},"s":{"a":2,"n":"set_EndPoint","t":8,"pi":[{"n":"value","pt":$n[1].Point,"ps":0}],"sn":"setEndPoint","rt":Object,"p":[$n[1].Point]}},{"a":2,"n":"StartPoint","t":16,"rt":$n[1].Point,"g":{"a":2,"n":"get_StartPoint","t":8,"sn":"getStartPoint","rt":$n[1].Point},"s":{"a":2,"n":"set_StartPoint","t":8,"pi":[{"n":"value","pt":$n[1].Point,"ps":0}],"sn":"setStartPoint","rt":Object,"p":[$n[1].Point]}}]}; });
    $m($n[5].TransformGroup, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Children")],"m":[{"a":2,"n":"Children","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.Media.Transform),"g":{"a":2,"n":"get_Children","t":8,"sn":"getChildren","rt":$n[1].FreezableCollection$1(System.Windows.Media.Transform)},"s":{"a":1,"n":"set_Children","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.Media.Transform),"ps":0}],"sn":"setChildren","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.Media.Transform)]}},{"ov":true,"a":2,"n":"Value","t":16,"rt":$n[5].Matrix,"g":{"ov":true,"a":2,"n":"get_Value","t":8,"sn":"getValue$5","rt":$n[5].Matrix}}]}; });
    $m($n[5].Visual, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"VisualBounds","t":16,"rt":$n[1].Rect,"g":{"a":2,"n":"get_VisualBounds","t":8,"sn":"getVisualBounds","rt":$n[1].Rect},"s":{"a":3,"n":"set_VisualBounds","t":8,"pi":[{"n":"value","pt":$n[1].Rect,"ps":0}],"sn":"setVisualBounds","rt":Object,"p":[$n[1].Rect]}},{"a":2,"n":"VisualChildren","t":16,"rt":$n[9].ReadOnlyCollection$1(System.Windows.Media.Visual),"g":{"a":2,"n":"get_VisualChildren","t":8,"sn":"getVisualChildren","rt":$n[9].ReadOnlyCollection$1(System.Windows.Media.Visual)},"s":{"a":1,"n":"set_VisualChildren","t":8,"pi":[{"n":"value","pt":$n[9].ReadOnlyCollection$1(System.Windows.Media.Visual),"ps":0}],"sn":"setVisualChildren","rt":Object,"p":[$n[9].ReadOnlyCollection$1(System.Windows.Media.Visual)]}},{"a":2,"n":"VisualLevel","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_VisualLevel","t":8,"sn":"getVisualLevel","rt":$n[0].Int32}},{"a":2,"n":"VisualOffset","t":16,"rt":$n[1].Point,"g":{"a":2,"n":"get_VisualOffset","t":8,"sn":"getVisualOffset","rt":$n[1].Point}},{"a":2,"n":"VisualParent","t":16,"rt":$n[5].Visual,"g":{"a":2,"n":"get_VisualParent","t":8,"sn":"getVisualParent","rt":$n[5].Visual},"s":{"a":1,"n":"set_VisualParent","t":8,"pi":[{"n":"value","pt":$n[5].Visual,"ps":0}],"sn":"setVisualParent","rt":Object,"p":[$n[5].Visual]}},{"a":2,"n":"VisualSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_VisualSize","t":8,"sn":"getVisualSize","rt":$n[1].Size}},{"a":2,"n":"VisualTransform","t":16,"rt":$n[5].Matrix,"g":{"a":2,"n":"get_VisualTransform","t":8,"sn":"getVisualTransform","rt":$n[5].Matrix},"s":{"a":1,"n":"set_VisualTransform","t":8,"pi":[{"n":"value","pt":$n[5].Matrix,"ps":0}],"sn":"setVisualTransform","rt":Object,"p":[$n[5].Matrix]}}]}; });
    $m($n[15].BitmapSource, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"IsDownloading","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsDownloading","t":8,"sn":"getIsDownloading","rt":Boolean},"s":{"a":1,"n":"set_IsDownloading","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsDownloading","rt":Object,"p":[Boolean]}},{"ov":true,"a":2,"n":"RenderImageSource","t":16,"rt":$n[5].IRenderImageSource,"g":{"ov":true,"a":2,"n":"get_RenderImageSource","t":8,"sn":"getRenderImageSource","rt":$n[5].IRenderImageSource}}]}; });
    $m($n[8].KeyFramesAnimationTimeline$1, function (T) { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("KeyFrames")],"m":[{"a":2,"n":"KeyFrames","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.Media.Animation.KeyFrame$1(T)),"g":{"a":2,"n":"get_KeyFrames","t":8,"sn":"getKeyFrames","rt":$n[1].FreezableCollection$1(System.Windows.Media.Animation.KeyFrame$1(T))},"s":{"a":1,"n":"set_KeyFrames","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.Media.Animation.KeyFrame$1(T)),"ps":0}],"sn":"setKeyFrames","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.Media.Animation.KeyFrame$1(T))]}}]}; });
    $m($n[8].BeginStoryboard, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.RuntimeNamePropertyAttribute("Name"),new System.Windows.Markup.ContentPropertyAttribute("Storyboard")],"m":[{"a":2,"n":"HandoffBehavior","t":16,"rt":$n[8].HandoffBehavior,"g":{"a":2,"n":"get_HandoffBehavior","t":8,"sn":"getHandoffBehavior","rt":$n[8].HandoffBehavior},"s":{"a":2,"n":"set_HandoffBehavior","t":8,"pi":[{"n":"value","pt":$n[8].HandoffBehavior,"ps":0}],"sn":"setHandoffBehavior","rt":Object,"p":[$n[8].HandoffBehavior]}},{"a":2,"n":"Name","t":16,"rt":String,"g":{"a":2,"n":"get_Name","t":8,"sn":"getName","rt":String},"s":{"a":2,"n":"set_Name","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setName","rt":Object,"p":[String]}},{"a":2,"n":"Storyboard","t":16,"rt":$n[8].Storyboard,"g":{"a":2,"n":"get_Storyboard","t":8,"sn":"getStoryboard","rt":$n[8].Storyboard},"s":{"a":2,"n":"set_Storyboard","t":8,"pi":[{"n":"value","pt":$n[8].Storyboard,"ps":0}],"sn":"setStoryboard","rt":Object,"p":[$n[8].Storyboard]}}]}; });
    $m($n[8].StoryboardAction, function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":"BeginStoryboardName","t":16,"rt":String,"g":{"a":2,"n":"get_BeginStoryboardName","t":8,"sn":"getBeginStoryboardName","rt":String},"s":{"a":2,"n":"set_BeginStoryboardName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setBeginStoryboardName","rt":Object,"p":[String]}}]}; });
    $m($n[8].Timeline, function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":"AutoReverse","t":16,"rt":Boolean,"g":{"a":2,"n":"get_AutoReverse","t":8,"sn":"getAutoReverse","rt":Boolean},"s":{"a":2,"n":"set_AutoReverse","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setAutoReverse","rt":Object,"p":[Boolean]}},{"a":2,"n":"BeginTime","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_BeginTime","t":8,"sn":"getBeginTime","rt":$n[0].TimeSpan},"s":{"a":2,"n":"set_BeginTime","t":8,"pi":[{"n":"value","pt":$n[0].TimeSpan,"ps":0}],"sn":"setBeginTime","rt":Object,"p":[$n[0].TimeSpan]}},{"a":2,"n":"Duration","t":16,"rt":$n[1].Duration,"g":{"a":2,"n":"get_Duration","t":8,"sn":"getDuration","rt":$n[1].Duration},"s":{"a":2,"n":"set_Duration","t":8,"pi":[{"n":"value","pt":$n[1].Duration,"ps":0}],"sn":"setDuration","rt":Object,"p":[$n[1].Duration]}},{"a":2,"n":"FillBehavior","t":16,"rt":$n[8].FillBehavior,"g":{"a":2,"n":"get_FillBehavior","t":8,"sn":"getFillBehavior","rt":$n[8].FillBehavior},"s":{"a":2,"n":"set_FillBehavior","t":8,"pi":[{"n":"value","pt":$n[8].FillBehavior,"ps":0}],"sn":"setFillBehavior","rt":Object,"p":[$n[8].FillBehavior]}},{"a":2,"n":"Parent","t":16,"rt":$n[8].TimelineGroup,"g":{"a":2,"n":"get_Parent","t":8,"sn":"getParent","rt":$n[8].TimelineGroup},"s":{"a":2,"n":"set_Parent","t":8,"pi":[{"n":"value","pt":$n[8].TimelineGroup,"ps":0}],"sn":"setParent","rt":Object,"p":[$n[8].TimelineGroup]}},{"a":2,"n":"RepeatBehavior","t":16,"rt":$n[8].RepeatBehavior,"g":{"a":2,"n":"get_RepeatBehavior","t":8,"sn":"getRepeatBehavior","rt":$n[8].RepeatBehavior},"s":{"a":2,"n":"set_RepeatBehavior","t":8,"pi":[{"n":"value","pt":$n[8].RepeatBehavior,"ps":0}],"sn":"setRepeatBehavior","rt":Object,"p":[$n[8].RepeatBehavior]}}]}; });
    $m($n[8].TimelineClock, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"CurrentState","t":16,"rt":$n[8].ClockState,"g":{"a":2,"n":"get_CurrentState","t":8,"sn":"getCurrentState","rt":$n[8].ClockState},"s":{"a":1,"n":"set_CurrentState","t":8,"pi":[{"n":"value","pt":$n[8].ClockState,"ps":0}],"sn":"setCurrentState","rt":Object,"p":[$n[8].ClockState]}},{"a":2,"n":"Duration","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_Duration","t":8,"sn":"getDuration","rt":$n[0].TimeSpan}},{"a":2,"n":"FirstTick","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_FirstTick","t":8,"sn":"getFirstTick","rt":$n[0].TimeSpan}},{"a":2,"n":"IsFilling","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsFilling","t":8,"sn":"getIsFilling","rt":Boolean}},{"a":2,"n":"LastTick","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_LastTick","t":8,"sn":"getLastTick","rt":$n[0].TimeSpan}},{"a":2,"n":"Timeline","t":16,"rt":$n[8].Timeline,"g":{"a":2,"n":"get_Timeline","t":8,"sn":"getTimeline","rt":$n[8].Timeline},"s":{"a":1,"n":"set_Timeline","t":8,"pi":[{"n":"value","pt":$n[8].Timeline,"ps":0}],"sn":"setTimeline","rt":Object,"p":[$n[8].Timeline]}}]}; });
    $m($n[8].TimelineGroup, function () { return {"att":129,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Children")],"m":[{"a":2,"n":"Children","t":16,"rt":$n[3].ObservableCollection$1(System.Windows.Media.Animation.Timeline),"g":{"a":2,"n":"get_Children","t":8,"sn":"getChildren","rt":$n[3].ObservableCollection$1(System.Windows.Media.Animation.Timeline)},"s":{"a":1,"n":"set_Children","t":8,"pi":[{"n":"value","pt":$n[3].ObservableCollection$1(System.Windows.Media.Animation.Timeline),"ps":0}],"sn":"setChildren","rt":Object,"p":[$n[3].ObservableCollection$1(System.Windows.Media.Animation.Timeline)]}}]}; });
    $m($n[8].TimelineGroupClock, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"Children","t":16,"rt":$n[6].IEnumerable$1(System.Windows.Media.Animation.TimelineClock),"g":{"a":2,"n":"get_Children","t":8,"sn":"getChildren","rt":$n[6].IEnumerable$1(System.Windows.Media.Animation.TimelineClock)},"s":{"a":1,"n":"set_Children","t":8,"pi":[{"n":"value","pt":$n[6].IEnumerable$1(System.Windows.Media.Animation.TimelineClock),"ps":0}],"sn":"setChildren","rt":Object,"p":[$n[6].IEnumerable$1(System.Windows.Media.Animation.TimelineClock)]}}]}; });
    $m($n[10].XamlTypes.TypeProvider, function () { return {"td":$n[10].XamlTypes,"att":1048579,"a":1,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("Type", 0)],"m":[{"a":2,"n":"Type","t":16,"rt":Function,"g":{"a":2,"n":"get_Type","t":8,"sn":"getType","rt":Function},"s":{"a":2,"n":"set_Type","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setType","rt":Object,"p":[Function]}}]}; });
    $m($n[14].Adorner, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"AdornedElement","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_AdornedElement","t":8,"sn":"getAdornedElement","rt":$n[1].UIElement},"s":{"a":1,"n":"set_AdornedElement","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setAdornedElement","rt":Object,"p":[$n[1].UIElement]}},{"a":2,"n":"Child","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_Child","t":8,"sn":"getChild","rt":$n[1].UIElement},"s":{"a":2,"n":"set_Child","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setChild","rt":Object,"p":[$n[1].UIElement]}}]}; });
    $m($n[2].Binding, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("Path", 0)],"m":[{"a":2,"n":"Converter","t":16,"rt":$n[2].IValueConverter,"g":{"a":2,"n":"get_Converter","t":8,"sn":"getConverter","rt":$n[2].IValueConverter},"s":{"a":2,"n":"set_Converter","t":8,"pi":[{"n":"value","pt":$n[2].IValueConverter,"ps":0}],"sn":"setConverter","rt":Object,"p":[$n[2].IValueConverter]}},{"a":2,"n":"ConverterParameter","t":16,"rt":Object,"g":{"a":2,"n":"get_ConverterParameter","t":8,"sn":"getConverterParameter","rt":Object},"s":{"a":2,"n":"set_ConverterParameter","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setConverterParameter","rt":Object,"p":[Object]}},{"a":2,"n":"ElementName","t":16,"rt":String,"g":{"a":2,"n":"get_ElementName","t":8,"sn":"getElementName","rt":String},"s":{"a":2,"n":"set_ElementName","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setElementName","rt":Object,"p":[String]}},{"a":2,"n":"FallbackValue","t":16,"rt":Object,"g":{"a":2,"n":"get_FallbackValue","t":8,"sn":"getFallbackValue","rt":Object},"s":{"a":2,"n":"set_FallbackValue","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setFallbackValue","rt":Object,"p":[Object]}},{"a":2,"n":"Mode","t":16,"rt":$n[2].BindingMode,"g":{"a":2,"n":"get_Mode","t":8,"sn":"getMode","rt":$n[2].BindingMode},"s":{"a":2,"n":"set_Mode","t":8,"pi":[{"n":"value","pt":$n[2].BindingMode,"ps":0}],"sn":"setMode","rt":Object,"p":[$n[2].BindingMode]}},{"a":2,"n":"Path","t":16,"rt":$n[1].PropertyPath,"g":{"a":2,"n":"get_Path","t":8,"sn":"getPath","rt":$n[1].PropertyPath},"s":{"a":2,"n":"set_Path","t":8,"pi":[{"n":"value","pt":$n[1].PropertyPath,"ps":0}],"sn":"setPath","rt":Object,"p":[$n[1].PropertyPath]}},{"a":2,"n":"RelativeSource","t":16,"rt":$n[2].RelativeSource,"g":{"a":2,"n":"get_RelativeSource","t":8,"sn":"getRelativeSource","rt":$n[2].RelativeSource},"s":{"a":2,"n":"set_RelativeSource","t":8,"pi":[{"n":"value","pt":$n[2].RelativeSource,"ps":0}],"sn":"setRelativeSource","rt":Object,"p":[$n[2].RelativeSource]}},{"a":2,"n":"Source","t":16,"rt":Object,"g":{"a":2,"n":"get_Source","t":8,"sn":"getSource","rt":Object},"s":{"a":2,"n":"set_Source","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setSource","rt":Object,"p":[Object]}},{"a":2,"n":"StringFormat","t":16,"rt":String,"g":{"a":2,"n":"get_StringFormat","t":8,"sn":"getStringFormat","rt":String},"s":{"a":2,"n":"set_StringFormat","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setStringFormat","rt":Object,"p":[String]}},{"a":2,"n":"TargetNullValue","t":16,"rt":Object,"g":{"a":2,"n":"get_TargetNullValue","t":8,"sn":"getTargetNullValue","rt":Object},"s":{"a":2,"n":"set_TargetNullValue","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setTargetNullValue","rt":Object,"p":[Object]}},{"a":2,"n":"UpdateSourceTrigger","t":16,"rt":$n[2].UpdateSourceTrigger,"g":{"a":2,"n":"get_UpdateSourceTrigger","t":8,"sn":"getUpdateSourceTrigger","rt":$n[2].UpdateSourceTrigger},"s":{"a":2,"n":"set_UpdateSourceTrigger","t":8,"pi":[{"n":"value","pt":$n[2].UpdateSourceTrigger,"ps":0}],"sn":"setUpdateSourceTrigger","rt":Object,"p":[$n[2].UpdateSourceTrigger]}}]}; });
    $m($n[2].CollectionView, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"CanFilter","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanFilter","t":8,"sn":"getCanFilter","rt":Boolean}},{"a":2,"n":"CanSort","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanSort","t":8,"sn":"getCanSort","rt":Boolean}},{"a":2,"n":"CurrentItem","t":16,"rt":Object,"g":{"a":2,"n":"get_CurrentItem","t":8,"sn":"getCurrentItem","rt":Object},"s":{"a":2,"n":"set_CurrentItem","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setCurrentItem","rt":Object,"p":[Object]}},{"a":2,"n":"CurrentItemIndex","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrentItemIndex","t":8,"sn":"getCurrentItemIndex","rt":$n[0].Int32},"s":{"a":2,"n":"set_CurrentItemIndex","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setCurrentItemIndex","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"FilterPredicate","t":16,"rt":Function,"g":{"a":2,"n":"get_FilterPredicate","t":8,"sn":"getFilterPredicate","rt":Function},"s":{"a":2,"n":"set_FilterPredicate","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setFilterPredicate","rt":Object,"p":[Function]}},{"a":2,"n":"SortDirection","t":16,"rt":$n[3].ListSortDirection,"g":{"a":2,"n":"get_SortDirection","t":8,"sn":"getSortDirection","rt":$n[3].ListSortDirection},"s":{"a":2,"n":"set_SortDirection","t":8,"pi":[{"n":"value","pt":$n[3].ListSortDirection,"ps":0}],"sn":"setSortDirection","rt":Object,"p":[$n[3].ListSortDirection]}},{"a":2,"n":"SortKeySelector","t":16,"rt":Function,"g":{"a":2,"n":"get_SortKeySelector","t":8,"sn":"getSortKeySelector","rt":Function},"s":{"a":2,"n":"set_SortKeySelector","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setSortKeySelector","rt":Object,"p":[Function]}},{"a":2,"n":"SourceCollection","t":16,"rt":$n[11].IEnumerable,"g":{"a":2,"n":"get_SourceCollection","t":8,"sn":"getSourceCollection","rt":$n[11].IEnumerable},"s":{"a":1,"n":"set_SourceCollection","t":8,"pi":[{"n":"value","pt":$n[11].IEnumerable,"ps":0}],"sn":"setSourceCollection","rt":Object,"p":[$n[11].IEnumerable]}}]}; });
    $m($n[2].RelativeSource, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.MarkupExtensionParameterAttribute("Mode", 0)],"m":[{"a":2,"n":"AncestorLevel","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_AncestorLevel","t":8,"sn":"getAncestorLevel","rt":$n[0].Int32},"s":{"a":2,"n":"set_AncestorLevel","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setAncestorLevel","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"AncestorType","t":16,"rt":Function,"g":{"a":2,"n":"get_AncestorType","t":8,"sn":"getAncestorType","rt":Function},"s":{"a":2,"n":"set_AncestorType","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setAncestorType","rt":Object,"p":[Function]}},{"a":2,"n":"Mode","t":16,"rt":$n[2].RelativeSourceMode,"g":{"a":2,"n":"get_Mode","t":8,"sn":"getMode","rt":$n[2].RelativeSourceMode},"s":{"a":2,"n":"set_Mode","t":8,"pi":[{"n":"value","pt":$n[2].RelativeSourceMode,"ps":0}],"sn":"setMode","rt":Object,"p":[$n[2].RelativeSourceMode]}}]}; });
    $m($n[12].Control, function () { return {"att":1,"a":2,"m":[{"a":2,"n":"Background","t":16,"rt":$n[5].Brush,"g":{"a":2,"n":"get_Background","t":8,"sn":"getBackground","rt":$n[5].Brush},"s":{"a":2,"n":"set_Background","t":8,"pi":[{"n":"value","pt":$n[5].Brush,"ps":0}],"sn":"setBackground","rt":Object,"p":[$n[5].Brush]}},{"a":2,"n":"BorderBrush","t":16,"rt":$n[5].Brush,"g":{"a":2,"n":"get_BorderBrush","t":8,"sn":"getBorderBrush","rt":$n[5].Brush},"s":{"a":2,"n":"set_BorderBrush","t":8,"pi":[{"n":"value","pt":$n[5].Brush,"ps":0}],"sn":"setBorderBrush","rt":Object,"p":[$n[5].Brush]}},{"a":2,"n":"BorderThickness","t":16,"rt":$n[1].Thickness,"g":{"a":2,"n":"get_BorderThickness","t":8,"sn":"getBorderThickness","rt":$n[1].Thickness},"s":{"a":2,"n":"set_BorderThickness","t":8,"pi":[{"n":"value","pt":$n[1].Thickness,"ps":0}],"sn":"setBorderThickness","rt":Object,"p":[$n[1].Thickness]}},{"a":2,"n":"FontFamily","t":16,"rt":$n[5].FontFamily,"g":{"a":2,"n":"get_FontFamily","t":8,"sn":"getFontFamily","rt":$n[5].FontFamily},"s":{"a":2,"n":"set_FontFamily","t":8,"pi":[{"n":"value","pt":$n[5].FontFamily,"ps":0}],"sn":"setFontFamily","rt":Object,"p":[$n[5].FontFamily]}},{"a":2,"n":"FontSize","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_FontSize","t":8,"sn":"getFontSize","rt":$n[0].Double},"s":{"a":2,"n":"set_FontSize","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setFontSize","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"FontStretch","t":16,"rt":$n[1].FontStretch,"g":{"a":2,"n":"get_FontStretch","t":8,"sn":"getFontStretch","rt":$n[1].FontStretch},"s":{"a":2,"n":"set_FontStretch","t":8,"pi":[{"n":"value","pt":$n[1].FontStretch,"ps":0}],"sn":"setFontStretch","rt":Object,"p":[$n[1].FontStretch]}},{"a":2,"n":"FontStyle","t":16,"rt":$n[1].FontStyle,"g":{"a":2,"n":"get_FontStyle","t":8,"sn":"getFontStyle","rt":$n[1].FontStyle},"s":{"a":2,"n":"set_FontStyle","t":8,"pi":[{"n":"value","pt":$n[1].FontStyle,"ps":0}],"sn":"setFontStyle","rt":Object,"p":[$n[1].FontStyle]}},{"a":2,"n":"FontWeight","t":16,"rt":$n[1].FontWeight,"g":{"a":2,"n":"get_FontWeight","t":8,"sn":"getFontWeight","rt":$n[1].FontWeight},"s":{"a":2,"n":"set_FontWeight","t":8,"pi":[{"n":"value","pt":$n[1].FontWeight,"ps":0}],"sn":"setFontWeight","rt":Object,"p":[$n[1].FontWeight]}},{"a":2,"n":"Foreground","t":16,"rt":$n[5].Brush,"g":{"a":2,"n":"get_Foreground","t":8,"sn":"getForeground","rt":$n[5].Brush},"s":{"a":2,"n":"set_Foreground","t":8,"pi":[{"n":"value","pt":$n[5].Brush,"ps":0}],"sn":"setForeground","rt":Object,"p":[$n[5].Brush]}},{"a":2,"n":"HorizontalContentAlignment","t":16,"rt":$n[1].HorizontalAlignment,"g":{"a":2,"n":"get_HorizontalContentAlignment","t":8,"sn":"getHorizontalContentAlignment","rt":$n[1].HorizontalAlignment},"s":{"a":2,"n":"set_HorizontalContentAlignment","t":8,"pi":[{"n":"value","pt":$n[1].HorizontalAlignment,"ps":0}],"sn":"setHorizontalContentAlignment","rt":Object,"p":[$n[1].HorizontalAlignment]}},{"a":2,"n":"IsTabStop","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsTabStop","t":8,"sn":"getIsTabStop","rt":Boolean},"s":{"a":2,"n":"set_IsTabStop","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsTabStop","rt":Object,"p":[Boolean]}},{"a":2,"n":"Padding","t":16,"rt":$n[1].Thickness,"g":{"a":2,"n":"get_Padding","t":8,"sn":"getPadding","rt":$n[1].Thickness},"s":{"a":2,"n":"set_Padding","t":8,"pi":[{"n":"value","pt":$n[1].Thickness,"ps":0}],"sn":"setPadding","rt":Object,"p":[$n[1].Thickness]}},{"a":2,"n":"TabIndex","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_TabIndex","t":8,"sn":"getTabIndex","rt":$n[0].Int32},"s":{"a":2,"n":"set_TabIndex","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setTabIndex","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"Template","t":16,"rt":$n[12].ControlTemplate,"g":{"a":2,"n":"get_Template","t":8,"sn":"getTemplate$1","rt":$n[12].ControlTemplate},"s":{"a":2,"n":"set_Template","t":8,"pi":[{"n":"value","pt":$n[12].ControlTemplate,"ps":0}],"sn":"setTemplate$1","rt":Object,"p":[$n[12].ControlTemplate]}},{"a":2,"n":"VerticalContentAlignment","t":16,"rt":$n[1].VerticalAlignment,"g":{"a":2,"n":"get_VerticalContentAlignment","t":8,"sn":"getVerticalContentAlignment","rt":$n[1].VerticalAlignment},"s":{"a":2,"n":"set_VerticalContentAlignment","t":8,"pi":[{"n":"value","pt":$n[1].VerticalAlignment,"ps":0}],"sn":"setVerticalContentAlignment","rt":Object,"p":[$n[1].VerticalAlignment]}}]}; });
    $m($n[12].ControlTemplate, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"TargetType","t":16,"rt":Function,"g":{"a":2,"n":"get_TargetType","t":8,"sn":"getTargetType","rt":Function},"s":{"a":2,"n":"set_TargetType","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setTargetType","rt":Object,"p":[Function]}}]}; });
    $m($n[12].Decorator, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Child")],"m":[{"a":2,"n":"Child","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_Child","t":8,"sn":"getChild","rt":$n[1].UIElement},"s":{"a":2,"n":"set_Child","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setChild","rt":Object,"p":[$n[1].UIElement]}}]}; });
    $m($n[12].Grid, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"ColumnDefinitions","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.Controls.ColumnDefinition),"g":{"a":2,"n":"get_ColumnDefinitions","t":8,"sn":"getColumnDefinitions","rt":$n[1].FreezableCollection$1(System.Windows.Controls.ColumnDefinition)},"s":{"a":1,"n":"set_ColumnDefinitions","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.Controls.ColumnDefinition),"ps":0}],"sn":"setColumnDefinitions","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.Controls.ColumnDefinition)]}},{"a":2,"n":"RowDefinitions","t":16,"rt":$n[1].FreezableCollection$1(System.Windows.Controls.RowDefinition),"g":{"a":2,"n":"get_RowDefinitions","t":8,"sn":"getRowDefinitions","rt":$n[1].FreezableCollection$1(System.Windows.Controls.RowDefinition)},"s":{"a":1,"n":"set_RowDefinitions","t":8,"pi":[{"n":"value","pt":$n[1].FreezableCollection$1(System.Windows.Controls.RowDefinition),"ps":0}],"sn":"setRowDefinitions","rt":Object,"p":[$n[1].FreezableCollection$1(System.Windows.Controls.RowDefinition)]}}]}; });
    $m($n[12].ItemCollection, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"CanFilter","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanFilter","t":8,"sn":"getCanFilter","rt":Boolean}},{"a":2,"n":"CanSort","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanSort","t":8,"sn":"getCanSort","rt":Boolean}},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"sn":"getCount","rt":$n[0].Int32}},{"a":2,"n":"CurrentItem","t":16,"rt":Object,"g":{"a":2,"n":"get_CurrentItem","t":8,"sn":"getCurrentItem","rt":Object},"s":{"a":2,"n":"set_CurrentItem","t":8,"pi":[{"n":"value","pt":Object,"ps":0}],"sn":"setCurrentItem","rt":Object,"p":[Object]}},{"a":2,"n":"CurrentItemIndex","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrentItemIndex","t":8,"sn":"getCurrentItemIndex","rt":$n[0].Int32},"s":{"a":2,"n":"set_CurrentItemIndex","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setCurrentItemIndex","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"FilterPredicate","t":16,"rt":Function,"g":{"a":2,"n":"get_FilterPredicate","t":8,"sn":"getFilterPredicate","rt":Function},"s":{"a":2,"n":"set_FilterPredicate","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setFilterPredicate","rt":Object,"p":[Function]}},{"a":2,"n":"IsReadOnly","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"sn":"getIsReadOnly","rt":Boolean}},{"a":2,"n":"SortDirection","t":16,"rt":$n[3].ListSortDirection,"g":{"a":2,"n":"get_SortDirection","t":8,"sn":"getSortDirection","rt":$n[3].ListSortDirection},"s":{"a":2,"n":"set_SortDirection","t":8,"pi":[{"n":"value","pt":$n[3].ListSortDirection,"ps":0}],"sn":"setSortDirection","rt":Object,"p":[$n[3].ListSortDirection]}},{"a":2,"n":"SortKeySelector","t":16,"rt":Function,"g":{"a":2,"n":"get_SortKeySelector","t":8,"sn":"getSortKeySelector","rt":Function},"s":{"a":2,"n":"set_SortKeySelector","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"setSortKeySelector","rt":Object,"p":[Function]}},{"a":2,"n":"SourceCollection","t":16,"rt":$n[11].IEnumerable,"g":{"a":2,"n":"get_SourceCollection","t":8,"sn":"getSourceCollection","rt":$n[11].IEnumerable}}]}; });
    $m($n[12].ItemsControl, function () { return {"att":1,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Items")],"m":[{"a":2,"n":"ItemContainerGenerator","t":16,"rt":$n[13].IItemContainerGenerator,"g":{"a":2,"n":"get_ItemContainerGenerator","t":8,"sn":"getItemContainerGenerator","rt":$n[13].IItemContainerGenerator},"s":{"a":1,"n":"set_ItemContainerGenerator","t":8,"pi":[{"n":"value","pt":$n[13].IItemContainerGenerator,"ps":0}],"sn":"setItemContainerGenerator","rt":Object,"p":[$n[13].IItemContainerGenerator]}},{"a":2,"n":"ItemContainerStyle","t":16,"rt":$n[1].Style,"g":{"a":2,"n":"get_ItemContainerStyle","t":8,"sn":"getItemContainerStyle","rt":$n[1].Style},"s":{"a":2,"n":"set_ItemContainerStyle","t":8,"pi":[{"n":"value","pt":$n[1].Style,"ps":0}],"sn":"setItemContainerStyle","rt":Object,"p":[$n[1].Style]}},{"a":2,"n":"ItemContainerStyleSelector","t":16,"rt":$n[12].IStyleSelector,"g":{"a":2,"n":"get_ItemContainerStyleSelector","t":8,"sn":"getItemContainerStyleSelector","rt":$n[12].IStyleSelector},"s":{"a":2,"n":"set_ItemContainerStyleSelector","t":8,"pi":[{"n":"value","pt":$n[12].IStyleSelector,"ps":0}],"sn":"setItemContainerStyleSelector","rt":Object,"p":[$n[12].IStyleSelector]}},{"a":2,"n":"ItemTemplate","t":16,"rt":$n[1].DataTemplate,"g":{"a":2,"n":"get_ItemTemplate","t":8,"sn":"getItemTemplate","rt":$n[1].DataTemplate},"s":{"a":2,"n":"set_ItemTemplate","t":8,"pi":[{"n":"value","pt":$n[1].DataTemplate,"ps":0}],"sn":"setItemTemplate","rt":Object,"p":[$n[1].DataTemplate]}},{"a":2,"n":"ItemTemplateSelector","t":16,"rt":$n[12].IDataTemplateSelector,"g":{"a":2,"n":"get_ItemTemplateSelector","t":8,"sn":"getItemTemplateSelector","rt":$n[12].IDataTemplateSelector},"s":{"a":2,"n":"set_ItemTemplateSelector","t":8,"pi":[{"n":"value","pt":$n[12].IDataTemplateSelector,"ps":0}],"sn":"setItemTemplateSelector","rt":Object,"p":[$n[12].IDataTemplateSelector]}},{"a":2,"n":"Items","t":16,"rt":$n[12].ItemCollection,"g":{"a":2,"n":"get_Items","t":8,"sn":"getItems","rt":$n[12].ItemCollection},"s":{"a":1,"n":"set_Items","t":8,"pi":[{"n":"value","pt":$n[12].ItemCollection,"ps":0}],"sn":"setItems","rt":Object,"p":[$n[12].ItemCollection]}},{"a":2,"n":"ItemsPanel","t":16,"rt":$n[1].IFrameworkTemplate,"g":{"a":2,"n":"get_ItemsPanel","t":8,"sn":"getItemsPanel","rt":$n[1].IFrameworkTemplate},"s":{"a":2,"n":"set_ItemsPanel","t":8,"pi":[{"n":"value","pt":$n[1].IFrameworkTemplate,"ps":0}],"sn":"setItemsPanel","rt":Object,"p":[$n[1].IFrameworkTemplate]}},{"a":2,"n":"ItemsSource","t":16,"rt":$n[11].IEnumerable,"g":{"a":2,"n":"get_ItemsSource","t":8,"sn":"getItemsSource","rt":$n[11].IEnumerable},"s":{"a":2,"n":"set_ItemsSource","t":8,"pi":[{"n":"value","pt":$n[11].IEnumerable,"ps":0}],"sn":"setItemsSource","rt":Object,"p":[$n[11].IEnumerable]}}]}; });
    $m($n[12].Panel, function () { return {"att":1048705,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Children")],"m":[{"a":2,"n":"Background","t":16,"rt":$n[5].Brush,"g":{"a":2,"n":"get_Background","t":8,"sn":"getBackground","rt":$n[5].Brush},"s":{"a":2,"n":"set_Background","t":8,"pi":[{"n":"value","pt":$n[5].Brush,"ps":0}],"sn":"setBackground","rt":Object,"p":[$n[5].Brush]}},{"a":2,"n":"Children","t":16,"rt":$n[12].UIElementCollection,"g":{"a":2,"n":"get_Children","t":8,"sn":"getChildren","rt":$n[12].UIElementCollection},"s":{"a":1,"n":"set_Children","t":8,"pi":[{"n":"value","pt":$n[12].UIElementCollection,"ps":0}],"sn":"setChildren","rt":Object,"p":[$n[12].UIElementCollection]}},{"a":2,"n":"IsItemsHost","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsItemsHost","t":8,"sn":"getIsItemsHost","rt":Boolean},"s":{"a":2,"n":"set_IsItemsHost","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsItemsHost","rt":Object,"p":[Boolean]}},{"a":2,"n":"ItemContainerGenerator","t":16,"rt":$n[13].IItemContainerGenerator,"g":{"a":2,"n":"get_ItemContainerGenerator","t":8,"sn":"getItemContainerGenerator","rt":$n[13].IItemContainerGenerator},"s":{"a":2,"n":"set_ItemContainerGenerator","t":8,"pi":[{"n":"value","pt":$n[13].IItemContainerGenerator,"ps":0}],"sn":"setItemContainerGenerator","rt":Object,"p":[$n[13].IItemContainerGenerator]}}]}; });
    $m($n[12].PasswordBox, function () { return {"att":257,"a":2,"at":[new System.Windows.TemplatePartAttribute.$ctor1("PART_ContentHost", System.Windows.FrameworkElement)],"m":[{"a":2,"n":"MaxLength","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_MaxLength","t":8,"sn":"getMaxLength","rt":$n[0].Int32},"s":{"a":2,"n":"set_MaxLength","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"setMaxLength","rt":Object,"p":[$n[0].Int32]}},{"a":2,"n":"Password","t":16,"rt":String,"g":{"a":2,"n":"get_Password","t":8,"sn":"getPassword","rt":String},"s":{"a":2,"n":"set_Password","t":8,"pi":[{"n":"value","pt":String,"ps":0}],"sn":"setPassword","rt":Object,"p":[String]}}]}; });
    $m($n[12].PopupLayer, function () { return {"att":1048577,"a":2}; });
    $m($n[12].ScrollContentPresenter, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"AdornerLayer","t":16,"rt":$n[14].AdornerLayer,"g":{"a":2,"n":"get_AdornerLayer","t":8,"sn":"getAdornerLayer","rt":$n[14].AdornerLayer},"s":{"a":1,"n":"set_AdornerLayer","t":8,"pi":[{"n":"value","pt":$n[14].AdornerLayer,"ps":0}],"sn":"setAdornerLayer","rt":Object,"p":[$n[14].AdornerLayer]}},{"a":2,"n":"CanContentScroll","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanContentScroll","t":8,"sn":"getCanContentScroll","rt":Boolean},"s":{"a":2,"n":"set_CanContentScroll","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setCanContentScroll","rt":Object,"p":[Boolean]}},{"a":2,"n":"CanHorizontallyScroll","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanHorizontallyScroll","t":8,"sn":"getCanHorizontallyScroll","rt":Boolean},"s":{"a":2,"n":"set_CanHorizontallyScroll","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setCanHorizontallyScroll","rt":Object,"p":[Boolean]}},{"a":2,"n":"CanVerticallyScroll","t":16,"rt":Boolean,"g":{"a":2,"n":"get_CanVerticallyScroll","t":8,"sn":"getCanVerticallyScroll","rt":Boolean},"s":{"a":2,"n":"set_CanVerticallyScroll","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setCanVerticallyScroll","rt":Object,"p":[Boolean]}},{"a":2,"n":"ExtentSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_ExtentSize","t":8,"sn":"getExtentSize","rt":$n[1].Size}},{"a":2,"n":"Offset","t":16,"rt":$n[1].Point,"g":{"a":2,"n":"get_Offset","t":8,"sn":"getOffset","rt":$n[1].Point},"s":{"a":2,"n":"set_Offset","t":8,"pi":[{"n":"value","pt":$n[1].Point,"ps":0}],"sn":"setOffset","rt":Object,"p":[$n[1].Point]}},{"a":2,"n":"ViewportSize","t":16,"rt":$n[1].Size,"g":{"a":2,"n":"get_ViewportSize","t":8,"sn":"getViewportSize","rt":$n[1].Size}}]}; });
    $m($n[12].UIElementCollection, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"sn":"getCount","rt":$n[0].Int32}},{"a":2,"n":"IsReadOnly","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"sn":"getIsReadOnly","rt":Boolean}}]}; });
    $m($n[13].Popup, function () { return {"att":1048577,"a":2,"at":[new System.Windows.Markup.ContentPropertyAttribute("Child")],"m":[{"a":2,"n":"Child","t":16,"rt":$n[1].UIElement,"g":{"a":2,"n":"get_Child","t":8,"sn":"getChild","rt":$n[1].UIElement},"s":{"a":2,"n":"set_Child","t":8,"pi":[{"n":"value","pt":$n[1].UIElement,"ps":0}],"sn":"setChild","rt":Object,"p":[$n[1].UIElement]}},{"a":2,"n":"HorizontalOffset","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_HorizontalOffset","t":8,"sn":"getHorizontalOffset","rt":$n[0].Double},"s":{"a":2,"n":"set_HorizontalOffset","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setHorizontalOffset","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"IsOpen","t":16,"rt":Boolean,"g":{"a":2,"n":"get_IsOpen","t":8,"sn":"getIsOpen","rt":Boolean},"s":{"a":2,"n":"set_IsOpen","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setIsOpen","rt":Object,"p":[Boolean]}},{"a":2,"n":"Placement","t":16,"rt":$n[13].PlacementMode,"g":{"a":2,"n":"get_Placement","t":8,"sn":"getPlacement","rt":$n[13].PlacementMode},"s":{"a":2,"n":"set_Placement","t":8,"pi":[{"n":"value","pt":$n[13].PlacementMode,"ps":0}],"sn":"setPlacement","rt":Object,"p":[$n[13].PlacementMode]}},{"a":2,"n":"PlacementRectangle","t":16,"rt":$n[1].Rect,"g":{"a":2,"n":"get_PlacementRectangle","t":8,"sn":"getPlacementRectangle","rt":$n[1].Rect},"s":{"a":2,"n":"set_PlacementRectangle","t":8,"pi":[{"n":"value","pt":$n[1].Rect,"ps":0}],"sn":"setPlacementRectangle","rt":Object,"p":[$n[1].Rect]}},{"a":2,"n":"PlacementTarget","t":16,"rt":$n[5].Visual,"g":{"a":2,"n":"get_PlacementTarget","t":8,"sn":"getPlacementTarget","rt":$n[5].Visual},"s":{"a":2,"n":"set_PlacementTarget","t":8,"pi":[{"n":"value","pt":$n[5].Visual,"ps":0}],"sn":"setPlacementTarget","rt":Object,"p":[$n[5].Visual]}},{"a":2,"n":"StaysOpen","t":16,"rt":Boolean,"g":{"a":2,"n":"get_StaysOpen","t":8,"sn":"getStaysOpen","rt":Boolean},"s":{"a":2,"n":"set_StaysOpen","t":8,"pi":[{"n":"value","pt":Boolean,"ps":0}],"sn":"setStaysOpen","rt":Object,"p":[Boolean]}},{"a":2,"n":"VerticalOffset","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_VerticalOffset","t":8,"sn":"getVerticalOffset","rt":$n[0].Double},"s":{"a":2,"n":"set_VerticalOffset","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setVerticalOffset","rt":Object,"p":[$n[0].Double]}}]}; });
    $m($n[13].Track, function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":"DecreaseRepeatButton","t":16,"rt":$n[13].RepeatButton,"g":{"a":2,"n":"get_DecreaseRepeatButton","t":8,"sn":"getDecreaseRepeatButton","rt":$n[13].RepeatButton},"s":{"a":2,"n":"set_DecreaseRepeatButton","t":8,"pi":[{"n":"value","pt":$n[13].RepeatButton,"ps":0}],"sn":"setDecreaseRepeatButton","rt":Object,"p":[$n[13].RepeatButton]}},{"a":2,"n":"IncreaseRepeatButton","t":16,"rt":$n[13].RepeatButton,"g":{"a":2,"n":"get_IncreaseRepeatButton","t":8,"sn":"getIncreaseRepeatButton","rt":$n[13].RepeatButton},"s":{"a":2,"n":"set_IncreaseRepeatButton","t":8,"pi":[{"n":"value","pt":$n[13].RepeatButton,"ps":0}],"sn":"setIncreaseRepeatButton","rt":Object,"p":[$n[13].RepeatButton]}},{"a":2,"n":"Maximum","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Maximum","t":8,"sn":"getMaximum","rt":$n[0].Double},"s":{"a":2,"n":"set_Maximum","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMaximum","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Minimum","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Minimum","t":8,"sn":"getMinimum","rt":$n[0].Double},"s":{"a":2,"n":"set_Minimum","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setMinimum","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Orientation","t":16,"rt":$n[12].Orientation,"g":{"a":2,"n":"get_Orientation","t":8,"sn":"getOrientation","rt":$n[12].Orientation},"s":{"a":2,"n":"set_Orientation","t":8,"pi":[{"n":"value","pt":$n[12].Orientation,"ps":0}],"sn":"setOrientation","rt":Object,"p":[$n[12].Orientation]}},{"a":2,"n":"Thumb","t":16,"rt":$n[13].Thumb,"g":{"a":2,"n":"get_Thumb","t":8,"sn":"getThumb","rt":$n[13].Thumb},"s":{"a":2,"n":"set_Thumb","t":8,"pi":[{"n":"value","pt":$n[13].Thumb,"ps":0}],"sn":"setThumb","rt":Object,"p":[$n[13].Thumb]}},{"a":2,"n":"ThumbMinLength","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_ThumbMinLength","t":8,"sn":"getThumbMinLength","rt":$n[0].Double},"s":{"a":2,"n":"set_ThumbMinLength","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setThumbMinLength","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"Value","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_Value","t":8,"sn":"getValue$5","rt":$n[0].Double},"s":{"a":2,"n":"set_Value","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setValue$5","rt":Object,"p":[$n[0].Double]}},{"a":2,"n":"ViewportSize","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_ViewportSize","t":8,"sn":"getViewportSize","rt":$n[0].Double},"s":{"a":2,"n":"set_ViewportSize","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"setViewportSize","rt":Object,"p":[$n[0].Double]}}]}; });
    $asm.attr= [new System.Windows.ThemeInfoAttribute.ctor(2),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Controls", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Controls.Primitives", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Data", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Documents", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Input", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Animation", "Granular.Presentation"),new System.Windows.Markup.XmlnsDefinitionAttribute("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Imaging", "Granular.Presentation")];
});
